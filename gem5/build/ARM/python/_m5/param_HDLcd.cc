/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:297
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/HDLcd.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "dev/arm/hdlcd.hh"

#include "dev/arm/display.hh"
#include "enums/ImageFormat.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "sim/clock_domain.hh"
#include "base/types.hh"
#include "base/vnc/vncinput.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
py::module_ m = m_internal.def_submodule("param_HDLcd");
    py::class_<HDLcdParams, AmbaDmaDeviceParams, std::unique_ptr<HDLcdParams, py::nodelete>>(m, "HDLcdParams")
        .def(py::init<>())
        .def("create", &HDLcdParams::create)
        .def_readwrite("enable_capture", &HDLcdParams::enable_capture)
        .def_readwrite("encoder", &HDLcdParams::encoder)
        .def_readwrite("frame_format", &HDLcdParams::frame_format)
        .def_readwrite("pixel_buffer_size", &HDLcdParams::pixel_buffer_size)
        .def_readwrite("pixel_chunk", &HDLcdParams::pixel_chunk)
        .def_readwrite("pxl_clk", &HDLcdParams::pxl_clk)
        .def_readwrite("virt_refresh_rate", &HDLcdParams::virt_refresh_rate)
        .def_readwrite("vnc", &HDLcdParams::vnc)
        .def_readwrite("workaround_dma_line_count", &HDLcdParams::workaround_dma_line_count)
        .def_readwrite("workaround_swap_rb", &HDLcdParams::workaround_swap_rb)
        ;

    py::class_<gem5::HDLcd, gem5::AmbaDmaDevice, std::unique_ptr<gem5::HDLcd, py::nodelete>>(m, "gem5_COLONS_HDLcd")
        ;

}

static EmbeddedPyBind embed_obj("HDLcd", module_init, "AmbaDmaDevice");

} // namespace gem5
namespace gem5
{

namespace
{

/*
 * If we can't define a default create() method for this params
 * struct because the SimObject doesn't have the right
 * constructor, use template magic to make it so we're actually
 * defining a create method for this class instead.
 */
class DummyHDLcdParamsClass
{
  public:
    gem5::HDLcd *create() const;
};

template <class CxxClass, class Enable=void>
class DummyHDLcdShunt;

/*
 * This version directs to the real Params struct and the
 * default behavior of create if there's an appropriate
 * constructor.
 */
template <class CxxClass>
class DummyHDLcdShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass, const HDLcdParams &>>>
{
  public:
    using Params = HDLcdParams;
    static gem5::HDLcd *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

/*
 * This version diverts to the DummyParamsClass and a dummy
 * implementation of create if the appropriate constructor does
 * not exist.
 */
template <class CxxClass>
class DummyHDLcdShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass, const HDLcdParams &>>>
{
  public:
    using Params = DummyHDLcdParamsClass;
    static gem5::HDLcd *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

/*
 * An implementation of either the real Params struct's create
 * method, or the Dummy one. Either an implementation is
 * mandantory since this was shunted off to the dummy class, or
 * one is optional which will override this weak version.
 */
[[maybe_unused]] gem5::HDLcd *
DummyHDLcdShunt<gem5::HDLcd>::Params::create() const
{
    return DummyHDLcdShunt<gem5::HDLcd>::create(*this);
}

} // namespace gem5
