/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:297
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/ArmISA.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "arch/arm/isa.hh"

#include "enums/DecoderFlavor.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "arch/arm/pmu.hh"
#include "arch/arm/system.hh"
#include "base/types.hh"
#include "sim/system.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
py::module_ m = m_internal.def_submodule("param_ArmISA");
    py::class_<ArmISAParams, BaseISAParams, std::unique_ptr<ArmISAParams, py::nodelete>>(m, "ArmISAParams")
        .def(py::init<>())
        .def("create", &ArmISAParams::create)
        .def_readwrite("decoderFlavor", &ArmISAParams::decoderFlavor)
        .def_readwrite("fpsid", &ArmISAParams::fpsid)
        .def_readwrite("id_aa64afr0_el1", &ArmISAParams::id_aa64afr0_el1)
        .def_readwrite("id_aa64afr1_el1", &ArmISAParams::id_aa64afr1_el1)
        .def_readwrite("id_aa64dfr0_el1", &ArmISAParams::id_aa64dfr0_el1)
        .def_readwrite("id_aa64dfr1_el1", &ArmISAParams::id_aa64dfr1_el1)
        .def_readwrite("id_aa64isar0_el1", &ArmISAParams::id_aa64isar0_el1)
        .def_readwrite("id_aa64isar1_el1", &ArmISAParams::id_aa64isar1_el1)
        .def_readwrite("id_aa64mmfr0_el1", &ArmISAParams::id_aa64mmfr0_el1)
        .def_readwrite("id_aa64mmfr1_el1", &ArmISAParams::id_aa64mmfr1_el1)
        .def_readwrite("id_aa64mmfr2_el1", &ArmISAParams::id_aa64mmfr2_el1)
        .def_readwrite("id_isar0", &ArmISAParams::id_isar0)
        .def_readwrite("id_isar1", &ArmISAParams::id_isar1)
        .def_readwrite("id_isar2", &ArmISAParams::id_isar2)
        .def_readwrite("id_isar3", &ArmISAParams::id_isar3)
        .def_readwrite("id_isar4", &ArmISAParams::id_isar4)
        .def_readwrite("id_isar5", &ArmISAParams::id_isar5)
        .def_readwrite("id_isar6", &ArmISAParams::id_isar6)
        .def_readwrite("id_mmfr0", &ArmISAParams::id_mmfr0)
        .def_readwrite("id_mmfr1", &ArmISAParams::id_mmfr1)
        .def_readwrite("id_mmfr2", &ArmISAParams::id_mmfr2)
        .def_readwrite("id_mmfr3", &ArmISAParams::id_mmfr3)
        .def_readwrite("id_mmfr4", &ArmISAParams::id_mmfr4)
        .def_readwrite("impdef_nop", &ArmISAParams::impdef_nop)
        .def_readwrite("midr", &ArmISAParams::midr)
        .def_readwrite("pmu", &ArmISAParams::pmu)
        .def_readwrite("release_se", &ArmISAParams::release_se)
        .def_readwrite("sve_vl_se", &ArmISAParams::sve_vl_se)
        .def_readwrite("system", &ArmISAParams::system)
        ;

    py::class_<gem5::ArmISA::ISA, gem5::BaseISA, std::unique_ptr<gem5::ArmISA::ISA, py::nodelete>>(m, "gem5_COLONS_ArmISA_COLONS_ISA")
        ;

}

static EmbeddedPyBind embed_obj("ArmISA", module_init, "BaseISA");

} // namespace gem5
namespace gem5
{

namespace
{

/*
 * If we can't define a default create() method for this params
 * struct because the SimObject doesn't have the right
 * constructor, use template magic to make it so we're actually
 * defining a create method for this class instead.
 */
class DummyArmISAParamsClass
{
  public:
    gem5::ArmISA::ISA *create() const;
};

template <class CxxClass, class Enable=void>
class DummyArmISAShunt;

/*
 * This version directs to the real Params struct and the
 * default behavior of create if there's an appropriate
 * constructor.
 */
template <class CxxClass>
class DummyArmISAShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass, const ArmISAParams &>>>
{
  public:
    using Params = ArmISAParams;
    static gem5::ArmISA::ISA *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

/*
 * This version diverts to the DummyParamsClass and a dummy
 * implementation of create if the appropriate constructor does
 * not exist.
 */
template <class CxxClass>
class DummyArmISAShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass, const ArmISAParams &>>>
{
  public:
    using Params = DummyArmISAParamsClass;
    static gem5::ArmISA::ISA *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

/*
 * An implementation of either the real Params struct's create
 * method, or the Dummy one. Either an implementation is
 * mandantory since this was shunted off to the dummy class, or
 * one is optional which will override this weak version.
 */
[[maybe_unused]] gem5::ArmISA::ISA *
DummyArmISAShunt<gem5::ArmISA::ISA>::Params::create() const
{
    return DummyArmISAShunt<gem5::ArmISA::ISA>::create(*this);
}

} // namespace gem5
