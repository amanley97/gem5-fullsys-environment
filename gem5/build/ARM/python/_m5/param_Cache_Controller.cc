/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:297
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/Cache_Controller.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "mem/ruby/protocol/Cache_Controller.hh"

#include "base/types.hh"
#include "mem/ruby/structures/CacheMemory.hh"
#include "base/types.hh"
#include "mem/ruby/network/MessageBuffer.hh"
#include "mem/ruby/network/MessageBuffer.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "mem/ruby/network/MessageBuffer.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "mem/ruby/network/MessageBuffer.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "mem/ruby/network/MessageBuffer.hh"
#include "mem/ruby/network/MessageBuffer.hh"
#include "mem/ruby/network/MessageBuffer.hh"
#include "mem/ruby/network/MessageBuffer.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "mem/ruby/network/MessageBuffer.hh"
#include "mem/ruby/network/MessageBuffer.hh"
#include "mem/ruby/network/MessageBuffer.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "mem/ruby/system/Sequencer.hh"
#include "base/types.hh"
#include "mem/ruby/network/MessageBuffer.hh"
#include "mem/ruby/network/MessageBuffer.hh"
#include "mem/ruby/network/MessageBuffer.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "mem/ruby/network/MessageBuffer.hh"
#include "base/types.hh"
#include "base/types.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
py::module_ m = m_internal.def_submodule("param_Cache_Controller");
    py::class_<Cache_ControllerParams, RubyControllerParams, std::unique_ptr<Cache_ControllerParams, py::nodelete>>(m, "Cache_ControllerParams")
        .def(py::init<>())
        .def("create", &Cache_ControllerParams::create)
        .def_readwrite("alloc_on_readonce", &Cache_ControllerParams::alloc_on_readonce)
        .def_readwrite("alloc_on_readshared", &Cache_ControllerParams::alloc_on_readshared)
        .def_readwrite("alloc_on_readunique", &Cache_ControllerParams::alloc_on_readunique)
        .def_readwrite("alloc_on_seq_acc", &Cache_ControllerParams::alloc_on_seq_acc)
        .def_readwrite("alloc_on_seq_line_write", &Cache_ControllerParams::alloc_on_seq_line_write)
        .def_readwrite("alloc_on_writeback", &Cache_ControllerParams::alloc_on_writeback)
        .def_readwrite("allocation_latency", &Cache_ControllerParams::allocation_latency)
        .def_readwrite("allow_SD", &Cache_ControllerParams::allow_SD)
        .def_readwrite("cache", &Cache_ControllerParams::cache)
        .def_readwrite("comp_wu", &Cache_ControllerParams::comp_wu)
        .def_readwrite("comp_wu_latency", &Cache_ControllerParams::comp_wu_latency)
        .def_readwrite("datIn", &Cache_ControllerParams::datIn)
        .def_readwrite("datOut", &Cache_ControllerParams::datOut)
        .def_readwrite("data_channel_size", &Cache_ControllerParams::data_channel_size)
        .def_readwrite("data_latency", &Cache_ControllerParams::data_latency)
        .def_readwrite("dealloc_backinv_shared", &Cache_ControllerParams::dealloc_backinv_shared)
        .def_readwrite("dealloc_backinv_unique", &Cache_ControllerParams::dealloc_backinv_unique)
        .def_readwrite("dealloc_on_shared", &Cache_ControllerParams::dealloc_on_shared)
        .def_readwrite("dealloc_on_unique", &Cache_ControllerParams::dealloc_on_unique)
        .def_readwrite("dealloc_wait_for_tag", &Cache_ControllerParams::dealloc_wait_for_tag)
        .def_readwrite("dvm_ext_tlbi_latency", &Cache_ControllerParams::dvm_ext_tlbi_latency)
        .def_readwrite("enable_DCT", &Cache_ControllerParams::enable_DCT)
        .def_readwrite("enable_DMT", &Cache_ControllerParams::enable_DMT)
        .def_readwrite("enable_DMT_early_dealloc", &Cache_ControllerParams::enable_DMT_early_dealloc)
        .def_readwrite("fill_latency", &Cache_ControllerParams::fill_latency)
        .def_readwrite("fwd_unique_on_readshared", &Cache_ControllerParams::fwd_unique_on_readshared)
        .def_readwrite("is_HN", &Cache_ControllerParams::is_HN)
        .def_readwrite("mandatoryQueue", &Cache_ControllerParams::mandatoryQueue)
        .def_readwrite("number_of_DVM_TBEs", &Cache_ControllerParams::number_of_DVM_TBEs)
        .def_readwrite("number_of_DVM_snoop_TBEs", &Cache_ControllerParams::number_of_DVM_snoop_TBEs)
        .def_readwrite("number_of_repl_TBEs", &Cache_ControllerParams::number_of_repl_TBEs)
        .def_readwrite("number_of_snoop_TBEs", &Cache_ControllerParams::number_of_snoop_TBEs)
        .def_readwrite("prefetchQueue", &Cache_ControllerParams::prefetchQueue)
        .def_readwrite("read_hit_latency", &Cache_ControllerParams::read_hit_latency)
        .def_readwrite("read_miss_latency", &Cache_ControllerParams::read_miss_latency)
        .def_readwrite("replTriggerQueue", &Cache_ControllerParams::replTriggerQueue)
        .def_readwrite("reqIn", &Cache_ControllerParams::reqIn)
        .def_readwrite("reqOut", &Cache_ControllerParams::reqOut)
        .def_readwrite("reqRdy", &Cache_ControllerParams::reqRdy)
        .def_readwrite("request_latency", &Cache_ControllerParams::request_latency)
        .def_readwrite("response_latency", &Cache_ControllerParams::response_latency)
        .def_readwrite("retryTriggerQueue", &Cache_ControllerParams::retryTriggerQueue)
        .def_readwrite("rspIn", &Cache_ControllerParams::rspIn)
        .def_readwrite("rspOut", &Cache_ControllerParams::rspOut)
        .def_readwrite("sc_lock_base_latency_cy", &Cache_ControllerParams::sc_lock_base_latency_cy)
        .def_readwrite("sc_lock_enabled", &Cache_ControllerParams::sc_lock_enabled)
        .def_readwrite("sc_lock_multiplier_decay", &Cache_ControllerParams::sc_lock_multiplier_decay)
        .def_readwrite("sc_lock_multiplier_inc", &Cache_ControllerParams::sc_lock_multiplier_inc)
        .def_readwrite("sc_lock_multiplier_max", &Cache_ControllerParams::sc_lock_multiplier_max)
        .def_readwrite("send_evictions", &Cache_ControllerParams::send_evictions)
        .def_readwrite("sequencer", &Cache_ControllerParams::sequencer)
        .def_readwrite("snoop_latency", &Cache_ControllerParams::snoop_latency)
        .def_readwrite("snpIn", &Cache_ControllerParams::snpIn)
        .def_readwrite("snpOut", &Cache_ControllerParams::snpOut)
        .def_readwrite("snpRdy", &Cache_ControllerParams::snpRdy)
        .def_readwrite("snp_inv_latency", &Cache_ControllerParams::snp_inv_latency)
        .def_readwrite("snp_latency", &Cache_ControllerParams::snp_latency)
        .def_readwrite("stall_recycle_lat", &Cache_ControllerParams::stall_recycle_lat)
        .def_readwrite("throttle_req_on_retry", &Cache_ControllerParams::throttle_req_on_retry)
        .def_readwrite("triggerQueue", &Cache_ControllerParams::triggerQueue)
        .def_readwrite("unify_repl_TBEs", &Cache_ControllerParams::unify_repl_TBEs)
        .def_readwrite("upstream_prefetch_trains_prefetcher", &Cache_ControllerParams::upstream_prefetch_trains_prefetcher)
        .def_readwrite("use_prefetcher", &Cache_ControllerParams::use_prefetcher)
        .def_readwrite("wait_for_cache_wr", &Cache_ControllerParams::wait_for_cache_wr)
        .def_readwrite("write_be_latency", &Cache_ControllerParams::write_be_latency)
        .def_readwrite("write_fe_latency", &Cache_ControllerParams::write_fe_latency)
        ;

    py::class_<gem5::ruby::Cache_Controller, gem5::ruby::AbstractController, std::unique_ptr<gem5::ruby::Cache_Controller, py::nodelete>>(m, "gem5_COLONS_ruby_COLONS_Cache_Controller")
        ;

}

static EmbeddedPyBind embed_obj("Cache_Controller", module_init, "RubyController");

} // namespace gem5
namespace gem5
{

namespace
{

/*
 * If we can't define a default create() method for this params
 * struct because the SimObject doesn't have the right
 * constructor, use template magic to make it so we're actually
 * defining a create method for this class instead.
 */
class DummyCache_ControllerParamsClass
{
  public:
    gem5::ruby::Cache_Controller *create() const;
};

template <class CxxClass, class Enable=void>
class DummyCache_ControllerShunt;

/*
 * This version directs to the real Params struct and the
 * default behavior of create if there's an appropriate
 * constructor.
 */
template <class CxxClass>
class DummyCache_ControllerShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass, const Cache_ControllerParams &>>>
{
  public:
    using Params = Cache_ControllerParams;
    static gem5::ruby::Cache_Controller *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

/*
 * This version diverts to the DummyParamsClass and a dummy
 * implementation of create if the appropriate constructor does
 * not exist.
 */
template <class CxxClass>
class DummyCache_ControllerShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass, const Cache_ControllerParams &>>>
{
  public:
    using Params = DummyCache_ControllerParamsClass;
    static gem5::ruby::Cache_Controller *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

/*
 * An implementation of either the real Params struct's create
 * method, or the Dummy one. Either an implementation is
 * mandantory since this was shunted off to the dummy class, or
 * one is optional which will override this weak version.
 */
[[maybe_unused]] gem5::ruby::Cache_Controller *
DummyCache_ControllerShunt<gem5::ruby::Cache_Controller>::Params::create() const
{
    return DummyCache_ControllerShunt<gem5::ruby::Cache_Controller>::create(*this);
}

} // namespace gem5
