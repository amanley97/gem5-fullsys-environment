/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /home/a599m019/gem5-fullsys-enviroment/gem5/src/mem/slicc/symbols/StateMachine.py:1814
 */

// Cache: Cache coherency protocol

#include <cassert>

#include "base/logging.hh"
#include "base/trace.hh"
#include "debug/ProtocolTrace.hh"
#include "debug/RubyGenerated.hh"
#include "mem/ruby/protocol/Cache_Controller.hh"
#include "mem/ruby/protocol/Cache_Event.hh"
#include "mem/ruby/protocol/Cache_State.hh"
#include "mem/ruby/protocol/Types.hh"
#include "mem/ruby/system/RubySystem.hh"

#define HASH_FUN(state, event)  ((int(state)*Cache_Event_NUM)+int(event))

#define GET_TRANSITION_COMMENT() (Cache_transitionComment.str())
#define CLEAR_TRANSITION_COMMENT() (Cache_transitionComment.str(""))

namespace gem5
{

namespace ruby
{

TransitionResult
Cache_Controller::doTransition(Cache_Event event,
                                  Cache_CacheEntry* m_cache_entry_ptr,
                                  Cache_TBE* m_tbe_ptr,
                                  Addr addr)
{
    Cache_State state = getState(m_tbe_ptr, m_cache_entry_ptr, addr);
    Cache_State next_state = state;

    DPRINTF(RubyGenerated, "%s, Time: %lld, state: %s, event: %s, addr: %#x\n",
            *this, curCycle(), Cache_State_to_string(state),
            Cache_Event_to_string(event), addr);

    TransitionResult result =
    doTransitionWorker(event, state, next_state, m_tbe_ptr, m_cache_entry_ptr, addr);

    if (result == TransitionResult_Valid) {
        DPRINTF(RubyGenerated, "next_state: %s\n",
                Cache_State_to_string(next_state));
        countTransition(state, event);

        DPRINTFR(ProtocolTrace, "%15d %3s %10s%20s %6s>%-6s %#x %s\n",
                 curTick(), m_version, "Cache",
                 Cache_Event_to_string(event),
                 Cache_State_to_string(state),
                 Cache_State_to_string(next_state),
                 printAddress(addr), GET_TRANSITION_COMMENT());

        CLEAR_TRANSITION_COMMENT();
    setState(m_tbe_ptr, m_cache_entry_ptr, addr, next_state);
    setAccessPermission(m_cache_entry_ptr, addr, next_state);
    } else if (result == TransitionResult_ResourceStall) {
        DPRINTFR(ProtocolTrace, "%15s %3s %10s%20s %6s>%-6s %#x %s\n",
                 curTick(), m_version, "Cache",
                 Cache_Event_to_string(event),
                 Cache_State_to_string(state),
                 Cache_State_to_string(next_state),
                 printAddress(addr), "Resource Stall");
    } else if (result == TransitionResult_ProtocolStall) {
        DPRINTF(RubyGenerated, "stalling\n");
        DPRINTFR(ProtocolTrace, "%15s %3s %10s%20s %6s>%-6s %#x %s\n",
                 curTick(), m_version, "Cache",
                 Cache_Event_to_string(event),
                 Cache_State_to_string(state),
                 Cache_State_to_string(next_state),
                 printAddress(addr), "Protocol Stall");
    }

    return result;
}

TransitionResult
Cache_Controller::doTransitionWorker(Cache_Event event,
                                        Cache_State state,
                                        Cache_State& next_state,
                                        Cache_TBE*& m_tbe_ptr,
                                        Cache_CacheEntry*& m_cache_entry_ptr,
                                        Addr addr)
{
    m_curTransitionEvent = event;
    m_curTransitionNextState = next_state;
    switch(HASH_FUN(state, event)) {
  case HASH_FUN(Cache_State_I, Cache_Event_AllocRequest):
  case HASH_FUN(Cache_State_SC, Cache_Event_AllocRequest):
  case HASH_FUN(Cache_State_UC, Cache_Event_AllocRequest):
  case HASH_FUN(Cache_State_SD, Cache_Event_AllocRequest):
  case HASH_FUN(Cache_State_UD, Cache_Event_AllocRequest):
  case HASH_FUN(Cache_State_RU, Cache_Event_AllocRequest):
  case HASH_FUN(Cache_State_RSC, Cache_Event_AllocRequest):
  case HASH_FUN(Cache_State_RSD, Cache_Event_AllocRequest):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_AllocRequest):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_AllocRequest):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_AllocRequest):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_AllocRequest):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_AllocRequest):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_AllocRequest):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_AllocRequest):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_AllocRequest):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_AllocRequest):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_AllocRequest):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_AllocRequest):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_AllocRequest):
    if (!(*m_reqRdy_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    if (!(*m_retryTriggerQueue_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    AllocateTBE_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_I, Cache_Event_AllocRequestWithCredit):
  case HASH_FUN(Cache_State_SC, Cache_Event_AllocRequestWithCredit):
  case HASH_FUN(Cache_State_UC, Cache_Event_AllocRequestWithCredit):
  case HASH_FUN(Cache_State_SD, Cache_Event_AllocRequestWithCredit):
  case HASH_FUN(Cache_State_UD, Cache_Event_AllocRequestWithCredit):
  case HASH_FUN(Cache_State_RU, Cache_Event_AllocRequestWithCredit):
  case HASH_FUN(Cache_State_RSC, Cache_Event_AllocRequestWithCredit):
  case HASH_FUN(Cache_State_RSD, Cache_Event_AllocRequestWithCredit):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_AllocRequestWithCredit):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_AllocRequestWithCredit):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_AllocRequestWithCredit):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_AllocRequestWithCredit):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_AllocRequestWithCredit):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_AllocRequestWithCredit):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_AllocRequestWithCredit):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_AllocRequestWithCredit):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_AllocRequestWithCredit):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_AllocRequestWithCredit):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_AllocRequestWithCredit):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_AllocRequestWithCredit):
    if (!(*m_reqRdy_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    AllocateTBE_Request_WithCredit(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_I, Cache_Event_SendRetryAck):
  case HASH_FUN(Cache_State_SC, Cache_Event_SendRetryAck):
  case HASH_FUN(Cache_State_UC, Cache_Event_SendRetryAck):
  case HASH_FUN(Cache_State_SD, Cache_Event_SendRetryAck):
  case HASH_FUN(Cache_State_UD, Cache_Event_SendRetryAck):
  case HASH_FUN(Cache_State_RU, Cache_Event_SendRetryAck):
  case HASH_FUN(Cache_State_RSC, Cache_Event_SendRetryAck):
  case HASH_FUN(Cache_State_RSD, Cache_Event_SendRetryAck):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_SendRetryAck):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_SendRetryAck):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_SendRetryAck):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_SendRetryAck):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_SendRetryAck):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_SendRetryAck):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_SendRetryAck):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_SendRetryAck):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_SendRetryAck):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_SendRetryAck):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_SendRetryAck):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendRetryAck):
    if (!(*m_rspOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Send_RetryAck(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_RetryTriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_I, Cache_Event_SendPCrdGrant):
  case HASH_FUN(Cache_State_SC, Cache_Event_SendPCrdGrant):
  case HASH_FUN(Cache_State_UC, Cache_Event_SendPCrdGrant):
  case HASH_FUN(Cache_State_SD, Cache_Event_SendPCrdGrant):
  case HASH_FUN(Cache_State_UD, Cache_Event_SendPCrdGrant):
  case HASH_FUN(Cache_State_RU, Cache_Event_SendPCrdGrant):
  case HASH_FUN(Cache_State_RSC, Cache_Event_SendPCrdGrant):
  case HASH_FUN(Cache_State_RSD, Cache_Event_SendPCrdGrant):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_SendPCrdGrant):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_SendPCrdGrant):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_SendPCrdGrant):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_SendPCrdGrant):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_SendPCrdGrant):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_SendPCrdGrant):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_SendPCrdGrant):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_SendPCrdGrant):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_SendPCrdGrant):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_SendPCrdGrant):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_SendPCrdGrant):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendPCrdGrant):
    if (!(*m_rspOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Send_PCrdGrant(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_RetryTriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_I, Cache_Event_AllocSnoop):
  case HASH_FUN(Cache_State_SC, Cache_Event_AllocSnoop):
  case HASH_FUN(Cache_State_UC, Cache_Event_AllocSnoop):
  case HASH_FUN(Cache_State_SD, Cache_Event_AllocSnoop):
  case HASH_FUN(Cache_State_UD, Cache_Event_AllocSnoop):
  case HASH_FUN(Cache_State_UD_T, Cache_Event_AllocSnoop):
  case HASH_FUN(Cache_State_RU, Cache_Event_AllocSnoop):
  case HASH_FUN(Cache_State_RSC, Cache_Event_AllocSnoop):
  case HASH_FUN(Cache_State_RSD, Cache_Event_AllocSnoop):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_AllocSnoop):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_AllocSnoop):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_AllocSnoop):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_AllocSnoop):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_AllocSnoop):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_AllocSnoop):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_AllocSnoop):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_AllocSnoop):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_AllocSnoop):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_AllocSnoop):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_AllocSnoop):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_AllocSnoop):
    if (!(*m_snpRdy_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    if (!(*m_storSnpTBEs_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    AllocateTBE_Snoop(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_I, Cache_Event_AllocDvmSnoop):
    if (!(*m_snpRdy_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    if (!(*m_storDvmSnpTBEs_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    AllocateTBE_DvmSnoop(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD, Cache_Event_AllocSeqRequest):
  case HASH_FUN(Cache_State_UD_T, Cache_Event_AllocSeqRequest):
  case HASH_FUN(Cache_State_SD, Cache_Event_AllocSeqRequest):
  case HASH_FUN(Cache_State_UC, Cache_Event_AllocSeqRequest):
  case HASH_FUN(Cache_State_SC, Cache_Event_AllocSeqRequest):
  case HASH_FUN(Cache_State_I, Cache_Event_AllocSeqRequest):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_AllocSeqRequest):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_AllocSeqRequest):
    if (!(*m_reqRdy_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    if (!(*m_storTBEs_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    AllocateTBE_SeqRequest(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_I, Cache_Event_AllocSeqDvmRequest):
    if (!(*m_reqRdy_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    if (!(*m_storDvmTBEs_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    AllocateTBE_SeqDvmRequest(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_I, Cache_Event_AllocPfRequest):
  case HASH_FUN(Cache_State_SC, Cache_Event_AllocPfRequest):
  case HASH_FUN(Cache_State_UC, Cache_Event_AllocPfRequest):
  case HASH_FUN(Cache_State_SD, Cache_Event_AllocPfRequest):
  case HASH_FUN(Cache_State_UD, Cache_Event_AllocPfRequest):
  case HASH_FUN(Cache_State_UD_T, Cache_Event_AllocPfRequest):
  case HASH_FUN(Cache_State_RU, Cache_Event_AllocPfRequest):
  case HASH_FUN(Cache_State_RSC, Cache_Event_AllocPfRequest):
  case HASH_FUN(Cache_State_RSD, Cache_Event_AllocPfRequest):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_AllocPfRequest):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_AllocPfRequest):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_AllocPfRequest):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_AllocPfRequest):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_AllocPfRequest):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_AllocPfRequest):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_AllocPfRequest):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_AllocPfRequest):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_AllocPfRequest):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_AllocPfRequest):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_AllocPfRequest):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_AllocPfRequest):
    if (!(*m_reqRdy_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    if (!(*m_storTBEs_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    AllocateTBE_PfRequest(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_TagArrayRead):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_TagArrayRead):
    if (!checkResourceAvailable(Cache_RequestType_TagArrayRead, addr)) {
        return TransitionResult_ResourceStall;
    }
    recordRequestType(Cache_RequestType_TagArrayRead, addr);
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    TagArrayRead(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_TagArrayWrite):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_TagArrayWrite):
    if (!checkResourceAvailable(Cache_RequestType_TagArrayWrite, addr)) {
        return TransitionResult_ResourceStall;
    }
    recordRequestType(Cache_RequestType_TagArrayWrite, addr);
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    TagArrayWrite(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_DataArrayRead):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_DataArrayRead):
    if (!checkResourceAvailable(Cache_RequestType_DataArrayRead, addr)) {
        return TransitionResult_ResourceStall;
    }
    recordRequestType(Cache_RequestType_DataArrayRead, addr);
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    DataArrayRead(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_CheckCacheFill):
    if (!(*m_replTriggerQueue_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    CheckCacheFill(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_CheckCacheFill):
    next_state = Cache_State_BUSY_INTR; m_curTransitionNextState = next_state;
    if (!(*m_replTriggerQueue_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    CheckCacheFill(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_DataArrayWrite):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_DataArrayWrite):
    if (!checkResourceAvailable(Cache_RequestType_DataArrayWrite, addr)) {
        return TransitionResult_ResourceStall;
    }
    recordRequestType(Cache_RequestType_DataArrayWrite, addr);
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    DataArrayWrite(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_DataArrayWriteOnFill):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_DataArrayWriteOnFill):
    if (!checkResourceAvailable(Cache_RequestType_DataArrayWrite, addr)) {
        return TransitionResult_ResourceStall;
    }
    recordRequestType(Cache_RequestType_DataArrayWrite, addr);
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Fill(m_tbe_ptr, m_cache_entry_ptr, addr);
    DataArrayWrite(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_ReadHitPipe):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_ReadHitPipe):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ReadHitPipe(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_ReadMissPipe):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_ReadMissPipe):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ReadMissPipe(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_WriteFEPipe):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_WriteFEPipe):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    WriteFEPipe(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_WriteBEPipe):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_WriteBEPipe):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    WriteBEPipe(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_FillPipe):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_FillPipe):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    FillPipe(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_SnpSharedPipe):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpSharedPipe):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    SnpSharedPipe(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_SnpInvPipe):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpInvPipe):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    SnpInvPipe(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_SnpOncePipe):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpOncePipe):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    SnpOncePipe(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_I, Cache_Event_ReadShared):
  case HASH_FUN(Cache_State_I, Cache_Event_ReadNotSharedDirty):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_ReadShared_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Allocate_DirEntry(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_RSC, Cache_Event_ReadShared):
  case HASH_FUN(Cache_State_RSC, Cache_Event_ReadNotSharedDirty):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_ReadShared):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_ReadNotSharedDirty):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_ReadShared_HitUpstream_NoOwner(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD, Cache_Event_ReadShared):
  case HASH_FUN(Cache_State_UD, Cache_Event_ReadNotSharedDirty):
  case HASH_FUN(Cache_State_SD, Cache_Event_ReadShared):
  case HASH_FUN(Cache_State_SD, Cache_Event_ReadNotSharedDirty):
  case HASH_FUN(Cache_State_UC, Cache_Event_ReadShared):
  case HASH_FUN(Cache_State_UC, Cache_Event_ReadNotSharedDirty):
  case HASH_FUN(Cache_State_SC, Cache_Event_ReadShared):
  case HASH_FUN(Cache_State_SC, Cache_Event_ReadNotSharedDirty):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_ReadShared_Hit(m_tbe_ptr, m_cache_entry_ptr, addr);
    Allocate_DirEntry(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Hit(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_ReadShared):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_ReadNotSharedDirty):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_ReadShared):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_ReadNotSharedDirty):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_ReadShared):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_ReadNotSharedDirty):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_ReadShared):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_ReadNotSharedDirty):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_ReadShared):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_ReadNotSharedDirty):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_ReadShared):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_ReadNotSharedDirty):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_ReadShared_Hit(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Hit(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD_RU, Cache_Event_ReadShared):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_ReadNotSharedDirty):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_ReadShared):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_ReadNotSharedDirty):
  case HASH_FUN(Cache_State_RU, Cache_Event_ReadShared):
  case HASH_FUN(Cache_State_RU, Cache_Event_ReadNotSharedDirty):
  case HASH_FUN(Cache_State_RSD, Cache_Event_ReadShared):
  case HASH_FUN(Cache_State_RSD, Cache_Event_ReadNotSharedDirty):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_ReadShared):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_ReadNotSharedDirty):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_ReadShared_HitUpstream(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_I, Cache_Event_ReadOnce):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_ReadOnce_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD, Cache_Event_ReadOnce):
  case HASH_FUN(Cache_State_SD, Cache_Event_ReadOnce):
  case HASH_FUN(Cache_State_UC, Cache_Event_ReadOnce):
  case HASH_FUN(Cache_State_SC, Cache_Event_ReadOnce):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_ReadOnce):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_ReadOnce):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_ReadOnce):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_ReadOnce):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_ReadOnce):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_ReadOnce):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_ReadOnce_Hit(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Hit(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD_RU, Cache_Event_ReadOnce):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_ReadOnce):
  case HASH_FUN(Cache_State_RU, Cache_Event_ReadOnce):
  case HASH_FUN(Cache_State_RSD, Cache_Event_ReadOnce):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_ReadOnce):
  case HASH_FUN(Cache_State_RSC, Cache_Event_ReadOnce):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_ReadOnce):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_ReadOnce_HitUpstream(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_I, Cache_Event_ReadUnique):
  case HASH_FUN(Cache_State_I, Cache_Event_ReadUnique_PoC):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_ReadUnique_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Allocate_DirEntry(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD, Cache_Event_ReadUnique):
  case HASH_FUN(Cache_State_UD, Cache_Event_ReadUnique_PoC):
  case HASH_FUN(Cache_State_UC, Cache_Event_ReadUnique):
  case HASH_FUN(Cache_State_UC, Cache_Event_ReadUnique_PoC):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_ReadUnique_Hit(m_tbe_ptr, m_cache_entry_ptr, addr);
    Allocate_DirEntry(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Hit(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_ReadUnique):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_ReadUnique_PoC):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_ReadUnique):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_ReadUnique_PoC):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_ReadUnique):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_ReadUnique_PoC):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_ReadUnique_Hit_InvUpstream(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Hit(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD_RU, Cache_Event_ReadUnique):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_ReadUnique_PoC):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_ReadUnique):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_ReadUnique_PoC):
  case HASH_FUN(Cache_State_RU, Cache_Event_ReadUnique):
  case HASH_FUN(Cache_State_RU, Cache_Event_ReadUnique_PoC):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_ReadUnique):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_ReadUnique_PoC):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_ReadUnique):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_ReadUnique_PoC):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_ReadUnique_HitUpstream(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_SC, Cache_Event_ReadUnique_PoC):
  case HASH_FUN(Cache_State_SD, Cache_Event_ReadUnique_PoC):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_ReadUnique_AutoUpgrade(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_ReadUnique_Hit(m_tbe_ptr, m_cache_entry_ptr, addr);
    Allocate_DirEntry(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Hit(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_ReadUnique_PoC):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_ReadUnique_PoC):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_ReadUnique_PoC):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_ReadUnique_AutoUpgrade(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_ReadUnique_Hit_InvUpstream(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Hit(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_RSC, Cache_Event_ReadUnique_PoC):
  case HASH_FUN(Cache_State_RSD, Cache_Event_ReadUnique_PoC):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_ReadUnique_AutoUpgrade(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_ReadUnique_HitUpstream(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_SC, Cache_Event_ReadUnique):
  case HASH_FUN(Cache_State_SD, Cache_Event_ReadUnique):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_ReadUnique_Upgrade(m_tbe_ptr, m_cache_entry_ptr, addr);
    Allocate_DirEntry(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_ReadUnique):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_ReadUnique):
  case HASH_FUN(Cache_State_RSC, Cache_Event_ReadUnique):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_ReadUnique):
  case HASH_FUN(Cache_State_RSD, Cache_Event_ReadUnique):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_ReadUnique_Upgrade(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_I, Cache_Event_CleanUnique):
  case HASH_FUN(Cache_State_SC, Cache_Event_CleanUnique):
  case HASH_FUN(Cache_State_UC, Cache_Event_CleanUnique):
  case HASH_FUN(Cache_State_SD, Cache_Event_CleanUnique):
  case HASH_FUN(Cache_State_UD, Cache_Event_CleanUnique):
  case HASH_FUN(Cache_State_RU, Cache_Event_CleanUnique):
  case HASH_FUN(Cache_State_RSC, Cache_Event_CleanUnique):
  case HASH_FUN(Cache_State_RSD, Cache_Event_CleanUnique):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_CleanUnique):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_CleanUnique):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_CleanUnique):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_CleanUnique):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_CleanUnique):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_CleanUnique):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_CleanUnique):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_CleanUnique):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_CleanUnique):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_CleanUnique):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_CleanUnique(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_I, Cache_Event_CleanUnique_Stale):
  case HASH_FUN(Cache_State_SC, Cache_Event_CleanUnique_Stale):
  case HASH_FUN(Cache_State_UC, Cache_Event_CleanUnique_Stale):
  case HASH_FUN(Cache_State_SD, Cache_Event_CleanUnique_Stale):
  case HASH_FUN(Cache_State_UD, Cache_Event_CleanUnique_Stale):
  case HASH_FUN(Cache_State_RU, Cache_Event_CleanUnique_Stale):
  case HASH_FUN(Cache_State_RSC, Cache_Event_CleanUnique_Stale):
  case HASH_FUN(Cache_State_RSD, Cache_Event_CleanUnique_Stale):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_CleanUnique_Stale):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_CleanUnique_Stale):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_CleanUnique_Stale):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_CleanUnique_Stale):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_CleanUnique_Stale):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_CleanUnique_Stale):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_CleanUnique_Stale):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_CleanUnique_Stale):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_CleanUnique_Stale):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_CleanUnique_Stale):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request_Stale(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_CleanUnique_Stale(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD, Cache_Event_WriteUnique):
  case HASH_FUN(Cache_State_UD, Cache_Event_WriteUniquePtl_PoC):
  case HASH_FUN(Cache_State_UD, Cache_Event_WriteUniqueFull_PoC):
  case HASH_FUN(Cache_State_UD, Cache_Event_WriteUniqueFull_PoC_Alloc):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_WriteUnique):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_WriteUniquePtl_PoC):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_WriteUniqueFull_PoC):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_WriteUniqueFull_PoC_Alloc):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_WriteUnique):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_WriteUniquePtl_PoC):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_WriteUniqueFull_PoC):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_WriteUniqueFull_PoC_Alloc):
  case HASH_FUN(Cache_State_UC, Cache_Event_WriteUnique):
  case HASH_FUN(Cache_State_UC, Cache_Event_WriteUniquePtl_PoC):
  case HASH_FUN(Cache_State_UC, Cache_Event_WriteUniqueFull_PoC):
  case HASH_FUN(Cache_State_UC, Cache_Event_WriteUniqueFull_PoC_Alloc):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_WriteUnique):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_WriteUniquePtl_PoC):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_WriteUniqueFull_PoC):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_WriteUniqueFull_PoC_Alloc):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_WriteUnique_LocalWrite(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Hit(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD_RU, Cache_Event_WriteUnique):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_WriteUniquePtl_PoC):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_WriteUniqueFull_PoC):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_WriteUniqueFull_PoC_Alloc):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_WriteUnique):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_WriteUniquePtl_PoC):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_WriteUniqueFull_PoC):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_WriteUniqueFull_PoC_Alloc):
  case HASH_FUN(Cache_State_SD, Cache_Event_WriteUniquePtl_PoC):
  case HASH_FUN(Cache_State_SD, Cache_Event_WriteUniqueFull_PoC):
  case HASH_FUN(Cache_State_SD, Cache_Event_WriteUniqueFull_PoC_Alloc):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_WriteUniquePtl_PoC):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_WriteUniqueFull_PoC):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_WriteUniqueFull_PoC_Alloc):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_WriteUniquePtl_PoC):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_WriteUniqueFull_PoC):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_WriteUniqueFull_PoC_Alloc):
  case HASH_FUN(Cache_State_SC, Cache_Event_WriteUniquePtl_PoC):
  case HASH_FUN(Cache_State_SC, Cache_Event_WriteUniqueFull_PoC):
  case HASH_FUN(Cache_State_SC, Cache_Event_WriteUniqueFull_PoC_Alloc):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_WriteUniquePtl_PoC):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_WriteUniqueFull_PoC):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_WriteUniqueFull_PoC_Alloc):
  case HASH_FUN(Cache_State_RSC, Cache_Event_WriteUniqueFull_PoC_Alloc):
  case HASH_FUN(Cache_State_RSD, Cache_Event_WriteUniqueFull_PoC_Alloc):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_WriteUniqueFull_PoC_Alloc):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_WriteUniqueFull_PoC_Alloc):
  case HASH_FUN(Cache_State_RU, Cache_Event_WriteUniqueFull_PoC_Alloc):
  case HASH_FUN(Cache_State_I, Cache_Event_WriteUniqueFull_PoC_Alloc):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_WriteUnique_LocalWrite(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_SD, Cache_Event_WriteUnique):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_WriteUnique):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_WriteUnique):
  case HASH_FUN(Cache_State_SC, Cache_Event_WriteUnique):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_WriteUnique):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_WriteUnique_LocalWrite_AfterUpgrade(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_RSD, Cache_Event_WriteUniquePtl_PoC):
  case HASH_FUN(Cache_State_RSD, Cache_Event_WriteUniqueFull_PoC):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_WriteUniquePtl_PoC):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_WriteUniqueFull_PoC):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_WriteUniquePtl_PoC):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_WriteUniqueFull_PoC):
  case HASH_FUN(Cache_State_RU, Cache_Event_WriteUniquePtl_PoC):
  case HASH_FUN(Cache_State_RU, Cache_Event_WriteUniqueFull_PoC):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_WriteUnique_Writeback(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_RSC, Cache_Event_WriteUniquePtl_PoC):
  case HASH_FUN(Cache_State_RSC, Cache_Event_WriteUniqueFull_PoC):
  case HASH_FUN(Cache_State_I, Cache_Event_WriteUniquePtl_PoC):
  case HASH_FUN(Cache_State_I, Cache_Event_WriteUniqueFull_PoC):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_WriteUnique_PartialWrite(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_RSC, Cache_Event_WriteUnique):
  case HASH_FUN(Cache_State_RSD, Cache_Event_WriteUnique):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_WriteUnique):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_WriteUnique):
  case HASH_FUN(Cache_State_RU, Cache_Event_WriteUnique):
  case HASH_FUN(Cache_State_I, Cache_Event_WriteUnique):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_WriteUnique_Forward(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD, Cache_Event_Load):
  case HASH_FUN(Cache_State_UD_T, Cache_Event_Load):
  case HASH_FUN(Cache_State_SD, Cache_Event_Load):
  case HASH_FUN(Cache_State_UC, Cache_Event_Load):
  case HASH_FUN(Cache_State_SC, Cache_Event_Load):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_LoadHit(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Hit(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD, Cache_Event_Prefetch):
  case HASH_FUN(Cache_State_UD_T, Cache_Event_Prefetch):
  case HASH_FUN(Cache_State_SD, Cache_Event_Prefetch):
  case HASH_FUN(Cache_State_UC, Cache_Event_Prefetch):
  case HASH_FUN(Cache_State_SC, Cache_Event_Prefetch):
  case HASH_FUN(Cache_State_RU, Cache_Event_Prefetch):
  case HASH_FUN(Cache_State_RSC, Cache_Event_Prefetch):
  case HASH_FUN(Cache_State_RSD, Cache_Event_Prefetch):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_Prefetch):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_Prefetch):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_Prefetch):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_Prefetch):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_Prefetch):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_Prefetch):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_Prefetch):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_Prefetch):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_Prefetch):
    Callback_ExpressPrefetchHit(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_LoadHit):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Callback_LoadHit(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD, Cache_Event_Store):
  case HASH_FUN(Cache_State_UD_T, Cache_Event_Store):
  case HASH_FUN(Cache_State_UC, Cache_Event_Store):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_StoreHit(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Hit(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_StoreHit):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Callback_StoreHit(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_I, Cache_Event_Load):
  case HASH_FUN(Cache_State_I, Cache_Event_Prefetch):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_LoadMiss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_I, Cache_Event_Store):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_StoreMiss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_SD, Cache_Event_Store):
  case HASH_FUN(Cache_State_SC, Cache_Event_Store):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_StoreUpgrade(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD_T, Cache_Event_UseTimeout):
    next_state = Cache_State_UD; m_curTransitionNextState = next_state;
    Unset_Timeout_Cache(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_UseTimeout):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_UseTimeout):
    Unset_Timeout_TBE(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_Evict):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_Evict):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_Evict):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_Evict):
  case HASH_FUN(Cache_State_RSC, Cache_Event_Evict):
  case HASH_FUN(Cache_State_RSD, Cache_Event_Evict):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_Evict):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_Evict):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_Evict):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_Evict):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_Evict(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD, Cache_Event_Evict_Stale):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_Evict_Stale):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_Evict_Stale):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_Evict_Stale):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_Evict_Stale):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_Evict_Stale):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_Evict_Stale):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_Evict_Stale):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_Evict_Stale):
  case HASH_FUN(Cache_State_RU, Cache_Event_Evict_Stale):
  case HASH_FUN(Cache_State_RSC, Cache_Event_Evict_Stale):
  case HASH_FUN(Cache_State_RSD, Cache_Event_Evict_Stale):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_Evict_Stale):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_Evict_Stale):
  case HASH_FUN(Cache_State_SD, Cache_Event_Evict_Stale):
  case HASH_FUN(Cache_State_UC, Cache_Event_Evict_Stale):
  case HASH_FUN(Cache_State_SC, Cache_Event_Evict_Stale):
  case HASH_FUN(Cache_State_I, Cache_Event_Evict_Stale):
    if (!(*m_rspOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Initiate_Request_Stale(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_CompI_Stale(m_tbe_ptr, m_cache_entry_ptr, addr);
    Finalize_DeallocateRequest(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD_RU, Cache_Event_WriteBackFull):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_WriteCleanFull):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_WriteBackFull):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_WriteCleanFull):
  case HASH_FUN(Cache_State_RU, Cache_Event_WriteBackFull):
  case HASH_FUN(Cache_State_RU, Cache_Event_WriteCleanFull):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_WriteBackFull):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_WriteCleanFull):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_WriteBackFull):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_WriteCleanFull):
  case HASH_FUN(Cache_State_RSD, Cache_Event_WriteBackFull):
  case HASH_FUN(Cache_State_RSD, Cache_Event_WriteCleanFull):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_WriteBackFull):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_WriteCleanFull):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_WriteEvictFull):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_WriteEvictFull):
  case HASH_FUN(Cache_State_RU, Cache_Event_WriteEvictFull):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_CopyBack(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_WriteBackFull_Stale):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_WriteEvictFull_Stale):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_WriteCleanFull_Stale):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_WriteBackFull_Stale):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_WriteEvictFull_Stale):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_WriteCleanFull_Stale):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_WriteBackFull_Stale):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_WriteEvictFull_Stale):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_WriteCleanFull_Stale):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_WriteBackFull_Stale):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_WriteEvictFull_Stale):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_WriteCleanFull_Stale):
  case HASH_FUN(Cache_State_UD, Cache_Event_WriteBackFull_Stale):
  case HASH_FUN(Cache_State_UD, Cache_Event_WriteEvictFull_Stale):
  case HASH_FUN(Cache_State_UD, Cache_Event_WriteCleanFull_Stale):
  case HASH_FUN(Cache_State_RU, Cache_Event_WriteBackFull_Stale):
  case HASH_FUN(Cache_State_RU, Cache_Event_WriteEvictFull_Stale):
  case HASH_FUN(Cache_State_RU, Cache_Event_WriteCleanFull_Stale):
  case HASH_FUN(Cache_State_RSD, Cache_Event_WriteBackFull_Stale):
  case HASH_FUN(Cache_State_RSD, Cache_Event_WriteEvictFull_Stale):
  case HASH_FUN(Cache_State_RSD, Cache_Event_WriteCleanFull_Stale):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_WriteBackFull_Stale):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_WriteEvictFull_Stale):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_WriteCleanFull_Stale):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_WriteBackFull_Stale):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_WriteEvictFull_Stale):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_WriteCleanFull_Stale):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_WriteBackFull_Stale):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_WriteEvictFull_Stale):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_WriteCleanFull_Stale):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_WriteBackFull_Stale):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_WriteEvictFull_Stale):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_WriteCleanFull_Stale):
  case HASH_FUN(Cache_State_RSC, Cache_Event_WriteBackFull_Stale):
  case HASH_FUN(Cache_State_RSC, Cache_Event_WriteEvictFull_Stale):
  case HASH_FUN(Cache_State_RSC, Cache_Event_WriteCleanFull_Stale):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_WriteBackFull_Stale):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_WriteEvictFull_Stale):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_WriteCleanFull_Stale):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_WriteBackFull_Stale):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_WriteEvictFull_Stale):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_WriteCleanFull_Stale):
  case HASH_FUN(Cache_State_SD, Cache_Event_WriteBackFull_Stale):
  case HASH_FUN(Cache_State_SD, Cache_Event_WriteEvictFull_Stale):
  case HASH_FUN(Cache_State_SD, Cache_Event_WriteCleanFull_Stale):
  case HASH_FUN(Cache_State_UC, Cache_Event_WriteBackFull_Stale):
  case HASH_FUN(Cache_State_UC, Cache_Event_WriteEvictFull_Stale):
  case HASH_FUN(Cache_State_UC, Cache_Event_WriteCleanFull_Stale):
  case HASH_FUN(Cache_State_SC, Cache_Event_WriteBackFull_Stale):
  case HASH_FUN(Cache_State_SC, Cache_Event_WriteEvictFull_Stale):
  case HASH_FUN(Cache_State_SC, Cache_Event_WriteCleanFull_Stale):
  case HASH_FUN(Cache_State_I, Cache_Event_WriteBackFull_Stale):
  case HASH_FUN(Cache_State_I, Cache_Event_WriteEvictFull_Stale):
  case HASH_FUN(Cache_State_I, Cache_Event_WriteCleanFull_Stale):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Request_Stale(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_CopyBack_Stale(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_SC, Cache_Event_LocalHN_Eviction):
  case HASH_FUN(Cache_State_UC, Cache_Event_LocalHN_Eviction):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_LocalHN_Eviction):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_LocalHN_Eviction):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_LocalHN_Eviction):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_LocalHN_Eviction):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_LocalHN_Eviction):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_LocalHN_Eviction):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_Local_Eviction):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_Local_Eviction):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_Local_Eviction):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_Local_Eviction):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_Local_Eviction):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_Local_Eviction):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    if (!checkResourceAvailable(Cache_RequestType_ReplTBEAvailable, addr)) {
        return TransitionResult_ResourceStall;
    }
    recordRequestType(Cache_RequestType_ReplTBEAvailable, addr);
    Initiate_Replacement(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_Replacement_JustDrop(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Eviction(m_tbe_ptr, m_cache_entry_ptr, addr);
    Deallocate_CacheBlock(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReplTriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD, Cache_Event_LocalHN_Eviction):
  case HASH_FUN(Cache_State_SD, Cache_Event_LocalHN_Eviction):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_LocalHN_Eviction):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_LocalHN_Eviction):
  case HASH_FUN(Cache_State_UD, Cache_Event_Local_Eviction):
  case HASH_FUN(Cache_State_SD, Cache_Event_Local_Eviction):
  case HASH_FUN(Cache_State_UC, Cache_Event_Local_Eviction):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_Local_Eviction):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_Local_Eviction):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    if (!checkResourceAvailable(Cache_RequestType_ReplTBEAvailable, addr)) {
        return TransitionResult_ResourceStall;
    }
    recordRequestType(Cache_RequestType_ReplTBEAvailable, addr);
    Initiate_Replacement(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_Replacement_WB(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Eviction(m_tbe_ptr, m_cache_entry_ptr, addr);
    Deallocate_CacheBlock(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReplTriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_SC, Cache_Event_Local_Eviction):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    if (!checkResourceAvailable(Cache_RequestType_ReplTBEAvailable, addr)) {
        return TransitionResult_ResourceStall;
    }
    recordRequestType(Cache_RequestType_ReplTBEAvailable, addr);
    Initiate_Replacement(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_Replacement_Evict(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Eviction(m_tbe_ptr, m_cache_entry_ptr, addr);
    Deallocate_CacheBlock(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReplTriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_Global_Eviction):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_Global_Eviction):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_Global_Eviction):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_Global_Eviction):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_Global_Eviction):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_Global_Eviction):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    if (!checkResourceAvailable(Cache_RequestType_ReplTBEAvailable, addr)) {
        return TransitionResult_ResourceStall;
    }
    recordRequestType(Cache_RequestType_ReplTBEAvailable, addr);
    Initiate_Replacement(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_Replacement_WB_BackInvalidate(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Eviction(m_tbe_ptr, m_cache_entry_ptr, addr);
    Deallocate_CacheBlock(m_tbe_ptr, m_cache_entry_ptr, addr);
    Deallocate_DirEntry(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReplTriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_Global_Eviction):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    if (!checkResourceAvailable(Cache_RequestType_ReplTBEAvailable, addr)) {
        return TransitionResult_ResourceStall;
    }
    recordRequestType(Cache_RequestType_ReplTBEAvailable, addr);
    Initiate_Replacement(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_Replacement_Evict_BackInvalidte(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Eviction(m_tbe_ptr, m_cache_entry_ptr, addr);
    Deallocate_CacheBlock(m_tbe_ptr, m_cache_entry_ptr, addr);
    Deallocate_DirEntry(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReplTriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_RU, Cache_Event_Local_Eviction):
  case HASH_FUN(Cache_State_RU, Cache_Event_LocalHN_Eviction):
  case HASH_FUN(Cache_State_RSC, Cache_Event_Local_Eviction):
  case HASH_FUN(Cache_State_RSC, Cache_Event_LocalHN_Eviction):
  case HASH_FUN(Cache_State_RSD, Cache_Event_Local_Eviction):
  case HASH_FUN(Cache_State_RSD, Cache_Event_LocalHN_Eviction):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_Local_Eviction):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_LocalHN_Eviction):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_Local_Eviction):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_LocalHN_Eviction):
  case HASH_FUN(Cache_State_I, Cache_Event_Local_Eviction):
  case HASH_FUN(Cache_State_I, Cache_Event_LocalHN_Eviction):
  case HASH_FUN(Cache_State_I, Cache_Event_Global_Eviction):
    Pop_ReplTriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD, Cache_Event_SnpUnique):
  case HASH_FUN(Cache_State_UD, Cache_Event_SnpUniqueFwd):
  case HASH_FUN(Cache_State_UD, Cache_Event_SnpCleanInvalid):
  case HASH_FUN(Cache_State_SD, Cache_Event_SnpUnique):
  case HASH_FUN(Cache_State_SD, Cache_Event_SnpUniqueFwd):
  case HASH_FUN(Cache_State_SD, Cache_Event_SnpCleanInvalid):
  case HASH_FUN(Cache_State_UC, Cache_Event_SnpUnique):
  case HASH_FUN(Cache_State_UC, Cache_Event_SnpUniqueFwd):
  case HASH_FUN(Cache_State_UC, Cache_Event_SnpCleanInvalid):
  case HASH_FUN(Cache_State_SC, Cache_Event_SnpUnique):
  case HASH_FUN(Cache_State_SC, Cache_Event_SnpUniqueFwd):
  case HASH_FUN(Cache_State_SC, Cache_Event_SnpCleanInvalid):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_SnpUnique):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_SnpUniqueFwd):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_SnpCleanInvalid):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_SnpUnique):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_SnpUniqueFwd):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_SnpCleanInvalid):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_SnpUnique):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_SnpUniqueFwd):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_SnpCleanInvalid):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_SnpUnique):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_SnpUniqueFwd):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_SnpCleanInvalid):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_SnpUnique):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_SnpUniqueFwd):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_SnpCleanInvalid):
  case HASH_FUN(Cache_State_RU, Cache_Event_SnpUnique):
  case HASH_FUN(Cache_State_RU, Cache_Event_SnpUniqueFwd):
  case HASH_FUN(Cache_State_RU, Cache_Event_SnpCleanInvalid):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_SnpUnique):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_SnpUniqueFwd):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_SnpCleanInvalid):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_SnpUnique):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_SnpUniqueFwd):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_SnpCleanInvalid):
  case HASH_FUN(Cache_State_RSD, Cache_Event_SnpUnique):
  case HASH_FUN(Cache_State_RSD, Cache_Event_SnpUniqueFwd):
  case HASH_FUN(Cache_State_RSD, Cache_Event_SnpCleanInvalid):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_SnpUnique):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_SnpUniqueFwd):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_SnpCleanInvalid):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_SnpUnique):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_SnpUniqueFwd):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_SnpCleanInvalid):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_SnpUnique):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_SnpUniqueFwd):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_SnpCleanInvalid):
  case HASH_FUN(Cache_State_RSC, Cache_Event_SnpUnique):
  case HASH_FUN(Cache_State_RSC, Cache_Event_SnpUniqueFwd):
  case HASH_FUN(Cache_State_RSC, Cache_Event_SnpCleanInvalid):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Snoop(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_InvalidationSnoop(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Eviction(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_SnoopRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_SnpUnique):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_SnpUniqueFwd):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_SnpCleanInvalid):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Snoop_Hazard(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_InvalidationSnoop(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_Eviction(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_SnoopRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD, Cache_Event_SnpShared):
  case HASH_FUN(Cache_State_UD, Cache_Event_SnpSharedFwd):
  case HASH_FUN(Cache_State_UD, Cache_Event_SnpNotSharedDirtyFwd):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_SnpShared):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_SnpSharedFwd):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_SnpNotSharedDirtyFwd):
  case HASH_FUN(Cache_State_SD, Cache_Event_SnpShared):
  case HASH_FUN(Cache_State_SD, Cache_Event_SnpSharedFwd):
  case HASH_FUN(Cache_State_SD, Cache_Event_SnpNotSharedDirtyFwd):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_SnpShared):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_SnpSharedFwd):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_SnpNotSharedDirtyFwd):
  case HASH_FUN(Cache_State_UC, Cache_Event_SnpShared):
  case HASH_FUN(Cache_State_UC, Cache_Event_SnpSharedFwd):
  case HASH_FUN(Cache_State_UC, Cache_Event_SnpNotSharedDirtyFwd):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_SnpShared):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_SnpSharedFwd):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_SnpNotSharedDirtyFwd):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_SnpShared):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_SnpSharedFwd):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_SnpNotSharedDirtyFwd):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_SnpShared):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_SnpSharedFwd):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_SnpNotSharedDirtyFwd):
  case HASH_FUN(Cache_State_RU, Cache_Event_SnpShared):
  case HASH_FUN(Cache_State_RU, Cache_Event_SnpSharedFwd):
  case HASH_FUN(Cache_State_RU, Cache_Event_SnpNotSharedDirtyFwd):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_SnpShared):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_SnpSharedFwd):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_SnpNotSharedDirtyFwd):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_SnpShared):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_SnpSharedFwd):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_SnpNotSharedDirtyFwd):
  case HASH_FUN(Cache_State_RSD, Cache_Event_SnpShared):
  case HASH_FUN(Cache_State_RSD, Cache_Event_SnpSharedFwd):
  case HASH_FUN(Cache_State_RSD, Cache_Event_SnpNotSharedDirtyFwd):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_SnpShared):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_SnpSharedFwd):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_SnpNotSharedDirtyFwd):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_SnpShared):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_SnpSharedFwd):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_SnpNotSharedDirtyFwd):
  case HASH_FUN(Cache_State_SC, Cache_Event_SnpSharedFwd):
  case HASH_FUN(Cache_State_SC, Cache_Event_SnpNotSharedDirtyFwd):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_SnpSharedFwd):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_SnpNotSharedDirtyFwd):
  case HASH_FUN(Cache_State_RSC, Cache_Event_SnpSharedFwd):
  case HASH_FUN(Cache_State_RSC, Cache_Event_SnpNotSharedDirtyFwd):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Snoop(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_SnpShared(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_SnoopRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_SnpShared):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_SnpSharedFwd):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_SnpNotSharedDirtyFwd):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Snoop_Hazard(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_SnpShared(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_SnoopRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD, Cache_Event_SnpOnce):
  case HASH_FUN(Cache_State_UD, Cache_Event_SnpOnceFwd):
  case HASH_FUN(Cache_State_UD_T, Cache_Event_SnpOnce):
  case HASH_FUN(Cache_State_UD_T, Cache_Event_SnpOnceFwd):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_SnpOnce):
  case HASH_FUN(Cache_State_UD_RSC, Cache_Event_SnpOnceFwd):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_SnpOnce):
  case HASH_FUN(Cache_State_UD_RU, Cache_Event_SnpOnceFwd):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_SnpOnce):
  case HASH_FUN(Cache_State_UD_RSD, Cache_Event_SnpOnceFwd):
  case HASH_FUN(Cache_State_SD, Cache_Event_SnpOnce):
  case HASH_FUN(Cache_State_SD, Cache_Event_SnpOnceFwd):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_SnpOnce):
  case HASH_FUN(Cache_State_SD_RSC, Cache_Event_SnpOnceFwd):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_SnpOnce):
  case HASH_FUN(Cache_State_SD_RSD, Cache_Event_SnpOnceFwd):
  case HASH_FUN(Cache_State_UC, Cache_Event_SnpOnce):
  case HASH_FUN(Cache_State_UC, Cache_Event_SnpOnceFwd):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_SnpOnce):
  case HASH_FUN(Cache_State_UC_RSC, Cache_Event_SnpOnceFwd):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_SnpOnce):
  case HASH_FUN(Cache_State_UC_RU, Cache_Event_SnpOnceFwd):
  case HASH_FUN(Cache_State_SC, Cache_Event_SnpOnce):
  case HASH_FUN(Cache_State_SC, Cache_Event_SnpOnceFwd):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_SnpOnce):
  case HASH_FUN(Cache_State_SC_RSC, Cache_Event_SnpOnceFwd):
  case HASH_FUN(Cache_State_RU, Cache_Event_SnpOnce):
  case HASH_FUN(Cache_State_RU, Cache_Event_SnpOnceFwd):
  case HASH_FUN(Cache_State_RSC, Cache_Event_SnpOnce):
  case HASH_FUN(Cache_State_RSC, Cache_Event_SnpOnceFwd):
  case HASH_FUN(Cache_State_RSD, Cache_Event_SnpOnce):
  case HASH_FUN(Cache_State_RSD, Cache_Event_SnpOnceFwd):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_SnpOnce):
  case HASH_FUN(Cache_State_RUSD, Cache_Event_SnpOnceFwd):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_SnpOnce):
  case HASH_FUN(Cache_State_RUSC, Cache_Event_SnpOnceFwd):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Snoop(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_SnpOnce(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_SnoopRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_SnpOnce):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_SnpOnceFwd):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Initiate_Snoop_Hazard(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_SnpOnce(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_SnoopRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_ReadShared):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_ReadNotSharedDirty):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_ReadUnique):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_ReadUnique_PoC):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_ReadOnce):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_CleanUnique):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_CleanUnique_Stale):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_Load):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_Store):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_Prefetch):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_WriteBackFull):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_WriteBackFull_Stale):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_WriteEvictFull):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_WriteEvictFull_Stale):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_WriteCleanFull):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_WriteCleanFull_Stale):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_Evict):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_Evict_Stale):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_WriteUnique):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_WriteUniquePtl_PoC):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_WriteUniqueFull_PoC):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_WriteUniqueFull_PoC_Alloc):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_ReadShared):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_ReadNotSharedDirty):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_ReadUnique):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_ReadUnique_PoC):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_ReadOnce):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_CleanUnique):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_CleanUnique_Stale):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_Load):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_Store):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_Prefetch):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_WriteBackFull):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_WriteBackFull_Stale):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_WriteEvictFull):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_WriteEvictFull_Stale):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_WriteCleanFull):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_WriteCleanFull_Stale):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_Evict):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_Evict_Stale):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_WriteUnique):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_WriteUniquePtl_PoC):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_WriteUniqueFull_PoC):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_WriteUniqueFull_PoC_Alloc):
    StallRequest(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_Global_Eviction):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_Local_Eviction):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_LocalHN_Eviction):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_Global_Eviction):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_Local_Eviction):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_LocalHN_Eviction):
    StallLocalEviction(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD_T, Cache_Event_Global_Eviction):
  case HASH_FUN(Cache_State_UD_T, Cache_Event_Local_Eviction):
  case HASH_FUN(Cache_State_UD_T, Cache_Event_LocalHN_Eviction):
    next_state = Cache_State_UD; m_curTransitionNextState = next_state;
    Unset_Timeout_Cache(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReplTriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpCleanInvalid):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpShared):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpUnique):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpSharedFwd):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpUniqueFwd):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpOnce):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpOnceFwd):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpNotSharedDirtyFwd):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpStalled):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_SnpStalled):
    StallSnoop(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_UD_T, Cache_Event_SnpCleanInvalid):
  case HASH_FUN(Cache_State_UD_T, Cache_Event_SnpShared):
  case HASH_FUN(Cache_State_UD_T, Cache_Event_SnpUnique):
  case HASH_FUN(Cache_State_UD_T, Cache_Event_SnpSharedFwd):
  case HASH_FUN(Cache_State_UD_T, Cache_Event_SnpUniqueFwd):
  case HASH_FUN(Cache_State_UD_T, Cache_Event_SnpNotSharedDirtyFwd):
    StallSnoop_NoTBE(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_ActionStalledOnHazard):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_ActionStalledOnHazard):
    StallActionOnHazard(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendWriteBackOrWriteEvict):
    next_state = Cache_State_BUSY_INTR; m_curTransitionNextState = next_state;
    if (!(*m_reqOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    if (!checkResourceAvailable(Cache_RequestType_DestinationAvailable, addr)) {
        return TransitionResult_ResourceStall;
    }
    recordRequestType(Cache_RequestType_DestinationAvailable, addr);
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_WriteBackOrWriteEvict(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_OutgoingStart(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendWriteClean):
    next_state = Cache_State_BUSY_INTR; m_curTransitionNextState = next_state;
    if (!(*m_reqOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    if (!checkResourceAvailable(Cache_RequestType_DestinationAvailable, addr)) {
        return TransitionResult_ResourceStall;
    }
    recordRequestType(Cache_RequestType_DestinationAvailable, addr);
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_WriteCleanFull(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_OutgoingStart(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendWriteUnique):
    next_state = Cache_State_BUSY_INTR; m_curTransitionNextState = next_state;
    if (!(*m_reqOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    if (!checkResourceAvailable(Cache_RequestType_DestinationAvailable, addr)) {
        return TransitionResult_ResourceStall;
    }
    recordRequestType(Cache_RequestType_DestinationAvailable, addr);
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_WriteUnique(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_OutgoingStart(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendWriteNoSnp):
    next_state = Cache_State_BUSY_INTR; m_curTransitionNextState = next_state;
    if (!(*m_reqOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    if (!checkResourceAvailable(Cache_RequestType_DestinationAvailable, addr)) {
        return TransitionResult_ResourceStall;
    }
    recordRequestType(Cache_RequestType_DestinationAvailable, addr);
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_WriteNoSnp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_OutgoingStart(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendWriteNoSnpPartial):
    next_state = Cache_State_BUSY_INTR; m_curTransitionNextState = next_state;
    if (!(*m_reqOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    if (!checkResourceAvailable(Cache_RequestType_DestinationAvailable, addr)) {
        return TransitionResult_ResourceStall;
    }
    recordRequestType(Cache_RequestType_DestinationAvailable, addr);
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_WriteNoSnp_Partial(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_OutgoingStart(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendEvict):
    next_state = Cache_State_BUSY_INTR; m_curTransitionNextState = next_state;
    if (!(*m_reqOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    if (!checkResourceAvailable(Cache_RequestType_DestinationAvailable, addr)) {
        return TransitionResult_ResourceStall;
    }
    recordRequestType(Cache_RequestType_DestinationAvailable, addr);
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_Evict(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_OutgoingStart(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendCompData):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_CompData(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_SendCompData):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_CompData(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendWBData):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_WBData(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendWUData):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_WUData(m_tbe_ptr, m_cache_entry_ptr, addr);
    CheckWUComp(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendWUDataCB):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Callback_WriteUnique(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_WUData(m_tbe_ptr, m_cache_entry_ptr, addr);
    CheckWUComp(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendInvSnpResp):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_InvSnpResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendSnpData):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_SnpRespData(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendSnpUniqueFwdCompData):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_CompData_SnpUniqueFwd(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendSnpSharedFwdCompData):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_CompData_SnpSharedFwd(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendSnpNotSharedDirtyFwdCompData):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_CompData_SnpNSDFwd(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendSnpOnceFwdCompData):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_CompData_SnpOnceFwd(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendSnpFwdedData):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_SnpRespDataFwded(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendSnpFwdedResp):
    if (!(*m_rspOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_FwdSnpResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendCompAck):
    if (!(*m_rspOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_CompAck(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendSnpIResp):
    if (!(*m_rspOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_SnpRespI(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendCompIResp):
    if (!(*m_rspOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_CompI(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendCompUCResp):
    if (!(*m_rspOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_CompUC(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendCompUCRespStale):
    if (!(*m_rspOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_CompUC_Stale(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendRespSepData):
    if (!(*m_rspOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_RespSepData(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_WaitCompAck):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_WaitCompAck):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ExpectCompAck(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_RestoreFromHazard):
    next_state = Cache_State_BUSY_INTR; m_curTransitionNextState = next_state;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    RestoreFromHazard(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendReadShared):
    next_state = Cache_State_BUSY_INTR; m_curTransitionNextState = next_state;
    if (!(*m_reqOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    if (!checkResourceAvailable(Cache_RequestType_DestinationAvailable, addr)) {
        return TransitionResult_ResourceStall;
    }
    recordRequestType(Cache_RequestType_DestinationAvailable, addr);
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_ReadShared(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_OutgoingStart(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendReadOnce):
    next_state = Cache_State_BUSY_INTR; m_curTransitionNextState = next_state;
    if (!(*m_reqOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    if (!checkResourceAvailable(Cache_RequestType_DestinationAvailable, addr)) {
        return TransitionResult_ResourceStall;
    }
    recordRequestType(Cache_RequestType_DestinationAvailable, addr);
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_ReadOnce(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_OutgoingStart(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendReadUnique):
    next_state = Cache_State_BUSY_INTR; m_curTransitionNextState = next_state;
    if (!(*m_reqOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    if (!checkResourceAvailable(Cache_RequestType_DestinationAvailable, addr)) {
        return TransitionResult_ResourceStall;
    }
    recordRequestType(Cache_RequestType_DestinationAvailable, addr);
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_ReadUnique(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_OutgoingStart(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendCleanUnique):
    next_state = Cache_State_BUSY_INTR; m_curTransitionNextState = next_state;
    if (!(*m_reqOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    if (!checkResourceAvailable(Cache_RequestType_DestinationAvailable, addr)) {
        return TransitionResult_ResourceStall;
    }
    recordRequestType(Cache_RequestType_DestinationAvailable, addr);
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_CleanUnique(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_OutgoingStart(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendReadNoSnp):
    next_state = Cache_State_BUSY_INTR; m_curTransitionNextState = next_state;
    if (!(*m_reqOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    if (!checkResourceAvailable(Cache_RequestType_DestinationAvailable, addr)) {
        return TransitionResult_ResourceStall;
    }
    recordRequestType(Cache_RequestType_DestinationAvailable, addr);
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_ReadNoSnp(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendReadNoSnpDMT):
    next_state = Cache_State_BUSY_INTR; m_curTransitionNextState = next_state;
    if (!(*m_reqOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    if (!checkResourceAvailable(Cache_RequestType_DestinationAvailable, addr)) {
        return TransitionResult_ResourceStall;
    }
    recordRequestType(Cache_RequestType_DestinationAvailable, addr);
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_ReadNoSnpDMT(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendSnpShared):
    if (!(*m_snpOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_SnpShared(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendSnpSharedFwdToOwner):
    if (!(*m_snpOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_SnpSharedFwd_ToOwner(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendSnpSharedFwdToSharer):
    if (!(*m_snpOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_SnpSharedFwd_ToSharer(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendSnpOnceFwd):
    if (!(*m_snpOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_SnpOnceFwd(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendSnpOnce):
    if (!(*m_snpOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_SnpOnce(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendSnpUnique):
    if (!(*m_snpOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_SnpUnique(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendSnpUniqueRetToSrc):
    if (!(*m_snpOut_ptr).areNSlotsAvailable(2, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_SnpUnique_RetToSrc(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendSnpUniqueFwd):
    if (!(*m_snpOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_SnpUniqueFwd(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendSnpCleanInvalid):
    if (!(*m_snpOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_SnpCleanInvalid(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendSnpCleanInvalidNoReq):
    if (!(*m_snpOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_SnpCleanInvalid_NoReq(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendCompDBIDResp):
    if (!(*m_rspOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_CompDBIDResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendCompDBIDResp_WU):
    if (!(*m_rspOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ExpectNCBWrData(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_CompDBIDResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendDBIDResp_WU):
    if (!(*m_rspOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ExpectNCBWrData(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_DBIDResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendComp_WU):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_SendComp_WU):
    if (!(*m_rspOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_Comp_WU(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SendCompDBIDRespStale):
    if (!(*m_rspOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_CompDBIDResp_Stale(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_MaintainCoherence):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Initiate_MaintainCoherence(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_FinishCleanUnique):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Finish_CleanUnique(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_FinishCopyBack_Stale):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Finish_CopyBack_Stale(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_CheckUpgrade_FromStore):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Callback_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    CheckUpgrade_FromStoreOrRU(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_CheckUpgrade_FromCU):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    CheckUpgrade_FromCU(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_CheckUpgrade_FromRU):
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    CheckUpgrade_FromStoreOrRU(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_CBWrData_I):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_CBWrData_SC):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_CBWrData_SD_PD):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_CBWrData_UC):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_CBWrData_UD_PD):
    Receive_ReqDataResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    UpdateDirState_FromReqDataResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    UpdateDataState_FromReqDataResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_DataInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_NCBWrData):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_NCBWrData):
    Receive_ReqDataResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    UpdateDataState_FromWUDataResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_DataInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpRespData_I_PD):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpRespData_I):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpRespData_SC_PD):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpRespData_SC):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpRespData_SD):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpRespData_UC):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpRespData_UD):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpRespData_SC_Fwded_SC):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpRespData_SC_Fwded_SD_PD):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpRespData_SC_PD_Fwded_SC):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpRespData_I_Fwded_SD_PD):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpRespData_I_PD_Fwded_SC):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpRespData_I_Fwded_SC):
    Receive_SnpDataResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    UpdateDirState_FromSnpDataResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    UpdateDataState_FromSnpDataResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_DataInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_RespSepData):
    Receive_RespSepData(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_RespInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_RespSepData):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Receive_RespSepData(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_RespInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_DataSepResp_UC):
    Receive_ReqDataResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    UpdateDataState_FromReqDataResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Callback_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_OutgoingEnd_DataResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_DataInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_DataSepResp_UC):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Receive_ReqDataResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    UpdateDataState_FromReqDataResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Callback_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_OutgoingEnd_DataResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_DataInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_CompData_I):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_CompData_SC):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_CompData_SD_PD):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_CompData_UC):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_CompData_UD_PD):
    Receive_RespSepDataFromCompData(m_tbe_ptr, m_cache_entry_ptr, addr);
    Receive_ReqDataResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    UpdateDataState_FromReqDataResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Callback_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_OutgoingEnd_DataResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_DataInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_CompData_I):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_CompData_SC):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_CompData_SD_PD):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_CompData_UC):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_CompData_UD_PD):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Receive_RespSepDataFromCompData(m_tbe_ptr, m_cache_entry_ptr, addr);
    Receive_ReqDataResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    UpdateDataState_FromReqDataResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Callback_Miss(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_OutgoingEnd_DataResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_DataInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_ReadReceipt):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Receive_ReadReceipt(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_RespInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_RetryAck):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_RetryAck_PoC):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_RetryAck_PoC):
  case HASH_FUN(Cache_State_DvmTlbi_Unconfirmed, Cache_Event_RetryAck):
  case HASH_FUN(Cache_State_DvmSync_Unconfirmed, Cache_Event_RetryAck):
    Receive_RetryAck(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_RespInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_PCrdGrant):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_PCrdGrant_PoC):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_PCrdGrant_PoC):
  case HASH_FUN(Cache_State_DvmTlbi_Unconfirmed, Cache_Event_PCrdGrant):
  case HASH_FUN(Cache_State_DvmSync_Unconfirmed, Cache_Event_PCrdGrant):
    Receive_PCrdGrant(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_RespInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_RetryAck_Hazard):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_RetryAck_PoC_Hazard):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_RetryAck_Hazard):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_RetryAck_PoC_Hazard):
    Receive_RetryAck_Hazard(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_RespInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_PCrdGrant_Hazard):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_PCrdGrant_PoC_Hazard):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_PCrdGrant_Hazard):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_PCrdGrant_PoC_Hazard):
    Receive_PCrdGrant_Hazard(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_RespInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_DoRetry):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_DoRetry):
    if (!(*m_reqOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Send_Retry(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_RetryTriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_DoRetry_Hazard):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_DoRetry_Hazard):
    if (!(*m_reqOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Send_Retry_Hazard(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_RetryTriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_CompAck):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_CompAck):
    Receive_ReqResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    UpdateDirState_FromReqResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_RespInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpResp_I):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpResp_SC):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpResp_I_Fwded_UC):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpResp_I_Fwded_UD_PD):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpResp_SC_Fwded_SC):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpResp_SC_Fwded_SD_PD):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpResp_UC_Fwded_I):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpResp_UD_Fwded_I):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpResp_SC_Fwded_I):
  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_SnpResp_SD_Fwded_I):
    Receive_SnpResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    UpdateDirState_FromSnpResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_RespInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_CompDBIDResp):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_Comp_I):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Receive_ReqResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_OutgoingEnd_DatalessResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_RespInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_Comp_UC):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Receive_ReqResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    UpdateDataState_FromCUResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_OutgoingEnd_DatalessResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_RespInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_DBIDResp):
    next_state = Cache_State_BUSY_BLKD; m_curTransitionNextState = next_state;
    Receive_ReqResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Receive_ReqResp_WUNeedComp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_RespInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_Comp):
    Receive_ReqResp_WUComp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_OutgoingEnd_DatalessResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_RespInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_TX_Data):
    if (!(*m_datOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_Data(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_BUSY_BLKD, Cache_Event_Final):
  case HASH_FUN(Cache_State_BUSY_INTR, Cache_Event_Final):
    next_state = getNextState(addr); m_curTransitionNextState = next_state;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Finalize_UpdateCacheFromTBE(m_tbe_ptr, m_cache_entry_ptr, addr);
    Finalize_UpdateDirectoryFromTBE(m_tbe_ptr, m_cache_entry_ptr, addr);
    Finalize_DeallocateRequest(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_I, Cache_Event_DvmTlbi_Initiate):
    next_state = Cache_State_DvmTlbi_Unconfirmed; m_curTransitionNextState = next_state;
    if (!(*m_reqOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Initiate_Request_DVM(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_DvmTlbi(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_OutgoingStart_DVM(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_I, Cache_Event_DvmSync_Initiate):
    next_state = Cache_State_DvmSync_Unsent; m_curTransitionNextState = next_state;
    Initiate_Request_DVM(m_tbe_ptr, m_cache_entry_ptr, addr);
    Try_Send_DvmSync(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_OutgoingStart_DVM(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_ReqRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_DvmSync_Unsent, Cache_Event_DvmSync_Send):
    next_state = Cache_State_DvmSync_Unconfirmed; m_curTransitionNextState = next_state;
    if (!(*m_reqOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_DvmSync(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_DvmTlbi_Unconfirmed, Cache_Event_DoRetry):
  case HASH_FUN(Cache_State_DvmSync_Unconfirmed, Cache_Event_DoRetry):
    if (!(*m_reqOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Send_Retry_DVM(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_RetryTriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_DvmTlbi_Unconfirmed, Cache_Event_DBIDResp):
    next_state = Cache_State_DvmTlbi_Waiting; m_curTransitionNextState = next_state;
    if (!(*m_datOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Receive_ReqResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_RespInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_DvmTlbi_NCBWrData(m_tbe_ptr, m_cache_entry_ptr, addr);
    ExpectComp(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_DvmSync_Unconfirmed, Cache_Event_DBIDResp):
    next_state = Cache_State_DvmSync_Waiting; m_curTransitionNextState = next_state;
    if (!(*m_datOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Receive_ReqResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_RespInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_DvmSync_NCBWrData(m_tbe_ptr, m_cache_entry_ptr, addr);
    ExpectComp(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_DvmTlbi_Unconfirmed, Cache_Event_CompDBIDResp):
    next_state = Cache_State_DvmOp_Finished; m_curTransitionNextState = next_state;
    if (!(*m_datOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Receive_ReqResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_RespInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_DvmTlbi_NCBWrData(m_tbe_ptr, m_cache_entry_ptr, addr);
    DvmTlbi_CompCallback(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_OutgoingEnd_DVM(m_tbe_ptr, m_cache_entry_ptr, addr);
    Try_Send_Pending_DvmSync(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_DvmTlbi_Waiting, Cache_Event_Comp):
    next_state = Cache_State_DvmOp_Finished; m_curTransitionNextState = next_state;
    Receive_ReqResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_RespInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    DvmTlbi_CompCallback(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_OutgoingEnd_DVM(m_tbe_ptr, m_cache_entry_ptr, addr);
    Try_Send_Pending_DvmSync(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_DvmSync_Waiting, Cache_Event_Comp):
    next_state = Cache_State_DvmOp_Finished; m_curTransitionNextState = next_state;
    Receive_ReqResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_RespInQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    DvmSync_CompCallback(m_tbe_ptr, m_cache_entry_ptr, addr);
    Profile_OutgoingEnd_DVM(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_DvmOp_Finished, Cache_Event_Final):
    next_state = Cache_State_I; m_curTransitionNextState = next_state;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Finalize_DeallocateDvmRequest(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_I, Cache_Event_SnpDvmOpNonSync_P1):
  case HASH_FUN(Cache_State_I, Cache_Event_SnpDvmOpNonSync_P2):
    next_state = Cache_State_DvmExtTlbi_Partial; m_curTransitionNextState = next_state;
    Initiate_DvmSnoop(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_SnoopRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_I, Cache_Event_SnpDvmOpSync_P1):
  case HASH_FUN(Cache_State_I, Cache_Event_SnpDvmOpSync_P2):
    next_state = Cache_State_DvmExtSync_Partial; m_curTransitionNextState = next_state;
    Initiate_DvmSnoop(m_tbe_ptr, m_cache_entry_ptr, addr);
    Pop_SnoopRdyQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_DvmExtTlbi_Partial, Cache_Event_SnpDvmOpNonSync_P1):
  case HASH_FUN(Cache_State_DvmExtTlbi_Partial, Cache_Event_SnpDvmOpNonSync_P2):
    next_state = Cache_State_DvmExtTlbi_Executing; m_curTransitionNextState = next_state;
    Pop_SnpInPort(m_tbe_ptr, m_cache_entry_ptr, addr);
    DvmExtTlbi_EnqueueSnpResp(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_DvmExtSync_Partial, Cache_Event_SnpDvmOpSync_P1):
  case HASH_FUN(Cache_State_DvmExtSync_Partial, Cache_Event_SnpDvmOpSync_P2):
    next_state = Cache_State_DvmExtSync_Executing; m_curTransitionNextState = next_state;
    Pop_SnpInPort(m_tbe_ptr, m_cache_entry_ptr, addr);
    DvmExtSync_TriggerCallback(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_DvmExtTlbi_Executing, Cache_Event_SendSnpIResp):
    next_state = Cache_State_DvmExtOp_Finished; m_curTransitionNextState = next_state;
    if (!(*m_rspOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_SnpRespI(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_DvmExtSync_Executing, Cache_Event_DvmSync_ExternCompleted):
    next_state = Cache_State_DvmExtOp_Finished; m_curTransitionNextState = next_state;
    if (!(*m_rspOut_ptr).areNSlotsAvailable(1, clockEdge()))
        return TransitionResult_ResourceStall;
    Pop_SeqInPort(m_tbe_ptr, m_cache_entry_ptr, addr);
    Send_SnpRespI(m_tbe_ptr, m_cache_entry_ptr, addr);
    ProcessNextState_ClearPending(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

  case HASH_FUN(Cache_State_DvmExtOp_Finished, Cache_Event_Final):
    next_state = Cache_State_I; m_curTransitionNextState = next_state;
    Pop_TriggerQueue(m_tbe_ptr, m_cache_entry_ptr, addr);
    Finalize_DeallocateDvmSnoop(m_tbe_ptr, m_cache_entry_ptr, addr);
    return TransitionResult_Valid;

      default:
        panic("Invalid transition\n"
              "%s time: %d addr: %#x event: %s state: %s\n",
              name(), curCycle(), addr, event, state);
    }

    return TransitionResult_Valid;
}

} // namespace ruby
} // namespace gem5
