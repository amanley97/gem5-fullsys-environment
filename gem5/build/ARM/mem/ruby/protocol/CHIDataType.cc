/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /home/a599m019/gem5-fullsys-enviroment/gem5/src/mem/slicc/symbols/Type.py:935
 */

#include <cassert>
#include <iostream>
#include <string>

#include "base/logging.hh"
#include "mem/ruby/protocol/CHIDataType.hh"

namespace gem5
{

namespace ruby
{

// Code for output operator
::std::ostream&
operator<<(::std::ostream& out, const CHIDataType& obj)
{
    out << CHIDataType_to_string(obj);
    out << ::std::flush;
    return out;
}

// Code to convert state to a string
std::string
CHIDataType_to_string(const CHIDataType& obj)
{
    switch(obj) {
      case CHIDataType_CompData_I:
        return "CompData_I";
      case CHIDataType_CompData_UC:
        return "CompData_UC";
      case CHIDataType_CompData_SC:
        return "CompData_SC";
      case CHIDataType_CompData_UD_PD:
        return "CompData_UD_PD";
      case CHIDataType_CompData_SD_PD:
        return "CompData_SD_PD";
      case CHIDataType_DataSepResp_UC:
        return "DataSepResp_UC";
      case CHIDataType_CBWrData_UC:
        return "CBWrData_UC";
      case CHIDataType_CBWrData_SC:
        return "CBWrData_SC";
      case CHIDataType_CBWrData_UD_PD:
        return "CBWrData_UD_PD";
      case CHIDataType_CBWrData_SD_PD:
        return "CBWrData_SD_PD";
      case CHIDataType_CBWrData_I:
        return "CBWrData_I";
      case CHIDataType_NCBWrData:
        return "NCBWrData";
      case CHIDataType_SnpRespData_I:
        return "SnpRespData_I";
      case CHIDataType_SnpRespData_I_PD:
        return "SnpRespData_I_PD";
      case CHIDataType_SnpRespData_SC:
        return "SnpRespData_SC";
      case CHIDataType_SnpRespData_SC_PD:
        return "SnpRespData_SC_PD";
      case CHIDataType_SnpRespData_SD:
        return "SnpRespData_SD";
      case CHIDataType_SnpRespData_UC:
        return "SnpRespData_UC";
      case CHIDataType_SnpRespData_UD:
        return "SnpRespData_UD";
      case CHIDataType_SnpRespData_SC_Fwded_SC:
        return "SnpRespData_SC_Fwded_SC";
      case CHIDataType_SnpRespData_SC_Fwded_SD_PD:
        return "SnpRespData_SC_Fwded_SD_PD";
      case CHIDataType_SnpRespData_SC_PD_Fwded_SC:
        return "SnpRespData_SC_PD_Fwded_SC";
      case CHIDataType_SnpRespData_I_Fwded_SD_PD:
        return "SnpRespData_I_Fwded_SD_PD";
      case CHIDataType_SnpRespData_I_PD_Fwded_SC:
        return "SnpRespData_I_PD_Fwded_SC";
      case CHIDataType_SnpRespData_I_Fwded_SC:
        return "SnpRespData_I_Fwded_SC";
      case CHIDataType_null:
        return "null";
      default:
        panic("Invalid range for type CHIDataType");
    }
    // Appease the compiler since this function has a return value
    return "";
}

// Code to convert from a string to the enumeration
CHIDataType
string_to_CHIDataType(const std::string& str)
{
    if (str == "CompData_I") {
        return CHIDataType_CompData_I;
    } else if (str == "CompData_UC") {
        return CHIDataType_CompData_UC;
    } else if (str == "CompData_SC") {
        return CHIDataType_CompData_SC;
    } else if (str == "CompData_UD_PD") {
        return CHIDataType_CompData_UD_PD;
    } else if (str == "CompData_SD_PD") {
        return CHIDataType_CompData_SD_PD;
    } else if (str == "DataSepResp_UC") {
        return CHIDataType_DataSepResp_UC;
    } else if (str == "CBWrData_UC") {
        return CHIDataType_CBWrData_UC;
    } else if (str == "CBWrData_SC") {
        return CHIDataType_CBWrData_SC;
    } else if (str == "CBWrData_UD_PD") {
        return CHIDataType_CBWrData_UD_PD;
    } else if (str == "CBWrData_SD_PD") {
        return CHIDataType_CBWrData_SD_PD;
    } else if (str == "CBWrData_I") {
        return CHIDataType_CBWrData_I;
    } else if (str == "NCBWrData") {
        return CHIDataType_NCBWrData;
    } else if (str == "SnpRespData_I") {
        return CHIDataType_SnpRespData_I;
    } else if (str == "SnpRespData_I_PD") {
        return CHIDataType_SnpRespData_I_PD;
    } else if (str == "SnpRespData_SC") {
        return CHIDataType_SnpRespData_SC;
    } else if (str == "SnpRespData_SC_PD") {
        return CHIDataType_SnpRespData_SC_PD;
    } else if (str == "SnpRespData_SD") {
        return CHIDataType_SnpRespData_SD;
    } else if (str == "SnpRespData_UC") {
        return CHIDataType_SnpRespData_UC;
    } else if (str == "SnpRespData_UD") {
        return CHIDataType_SnpRespData_UD;
    } else if (str == "SnpRespData_SC_Fwded_SC") {
        return CHIDataType_SnpRespData_SC_Fwded_SC;
    } else if (str == "SnpRespData_SC_Fwded_SD_PD") {
        return CHIDataType_SnpRespData_SC_Fwded_SD_PD;
    } else if (str == "SnpRespData_SC_PD_Fwded_SC") {
        return CHIDataType_SnpRespData_SC_PD_Fwded_SC;
    } else if (str == "SnpRespData_I_Fwded_SD_PD") {
        return CHIDataType_SnpRespData_I_Fwded_SD_PD;
    } else if (str == "SnpRespData_I_PD_Fwded_SC") {
        return CHIDataType_SnpRespData_I_PD_Fwded_SC;
    } else if (str == "SnpRespData_I_Fwded_SC") {
        return CHIDataType_SnpRespData_I_Fwded_SC;
    } else if (str == "null") {
        return CHIDataType_null;
    } else {
        panic("Invalid string conversion for %s, type CHIDataType", str);
    }
}

// Code to increment an enumeration type
CHIDataType&
operator++(CHIDataType& e)
{
    assert(e < CHIDataType_NUM);
    return e = CHIDataType(e+1);
}
} // namespace ruby
} // namespace gem5
