/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /home/a599m019/gem5-fullsys-enviroment/gem5/src/mem/slicc/symbols/Type.py:443
 */

#ifndef __CHIRequestMsg_HH__
#define __CHIRequestMsg_HH__

#include <iostream>

#include "mem/ruby/slicc_interface/RubySlicc_Util.hh"

#include "mem/ruby/protocol/CHIRequestType.hh"
#include "mem/ruby/protocol/MachineID.hh"
#include "mem/ruby/protocol/MachineID.hh"
#include "mem/ruby/protocol/NetDest.hh"
#include "mem/ruby/protocol/MessageSizeType.hh"
#include "mem/ruby/protocol/Message.hh"
namespace gem5
{

namespace ruby
{

class CHIRequestMsg :  public Message
{
  public:
    CHIRequestMsg
(Tick curTime) : Message(curTime) {
        // m_addr has no default
        // m_accAddr has no default
        m_accSize = 0;
         // default value of int
        m_type = CHIRequestType_NUM;
         // default value of CHIRequestType
        // m_requestor has no default
        // m_fwdRequestor has no default
        m_dataToFwdRequestor = false;
         // default value of bool
        m_retToSrc = false;
         // default value of bool
        m_allowRetry = false;
         // default value of bool
        // m_Destination has no default
        m_seqReq = nullptr; // default for this field
        m_isSeqReqValid = false; // default for this field
        m_is_local_pf = false;
         // default value of bool
        m_is_remote_pf = false;
         // default value of bool
        m_usesTxnId = false; // default for this field
        m_txnId = 0; // default for this field
        m_MessageSize = MessageSizeType_Control; // default for this field
    }
    CHIRequestMsg(const CHIRequestMsg&) = default;
    CHIRequestMsg
    &operator=(const CHIRequestMsg&) = default;
    CHIRequestMsg(const Tick curTime, const Addr& local_addr, const Addr& local_accAddr, const int& local_accSize, const CHIRequestType& local_type, const MachineID& local_requestor, const MachineID& local_fwdRequestor, const bool& local_dataToFwdRequestor, const bool& local_retToSrc, const bool& local_allowRetry, const NetDest& local_Destination, const RequestPtr& local_seqReq, const bool& local_isSeqReqValid, const bool& local_is_local_pf, const bool& local_is_remote_pf, const bool& local_usesTxnId, const Addr& local_txnId, const MessageSizeType& local_MessageSize)
        : Message(curTime)
    {
        m_addr = local_addr;
        m_accAddr = local_accAddr;
        m_accSize = local_accSize;
        m_type = local_type;
        m_requestor = local_requestor;
        m_fwdRequestor = local_fwdRequestor;
        m_dataToFwdRequestor = local_dataToFwdRequestor;
        m_retToSrc = local_retToSrc;
        m_allowRetry = local_allowRetry;
        m_Destination = local_Destination;
        m_seqReq = local_seqReq;
        m_isSeqReqValid = local_isSeqReqValid;
        m_is_local_pf = local_is_local_pf;
        m_is_remote_pf = local_is_remote_pf;
        m_usesTxnId = local_usesTxnId;
        m_txnId = local_txnId;
        m_MessageSize = local_MessageSize;
    }
    MsgPtr
    clone() const
    {
         return std::shared_ptr<Message>(new CHIRequestMsg(*this));
    }
    // Const accessors methods for each field
    /** \brief Const accessor method for addr field.
     *  \return addr field
     */
    const Addr&
    getaddr() const
    {
        return m_addr;
    }
    /** \brief Const accessor method for accAddr field.
     *  \return accAddr field
     */
    const Addr&
    getaccAddr() const
    {
        return m_accAddr;
    }
    /** \brief Const accessor method for accSize field.
     *  \return accSize field
     */
    const int&
    getaccSize() const
    {
        return m_accSize;
    }
    /** \brief Const accessor method for type field.
     *  \return type field
     */
    const CHIRequestType&
    gettype() const
    {
        return m_type;
    }
    /** \brief Const accessor method for requestor field.
     *  \return requestor field
     */
    const MachineID&
    getrequestor() const
    {
        return m_requestor;
    }
    /** \brief Const accessor method for fwdRequestor field.
     *  \return fwdRequestor field
     */
    const MachineID&
    getfwdRequestor() const
    {
        return m_fwdRequestor;
    }
    /** \brief Const accessor method for dataToFwdRequestor field.
     *  \return dataToFwdRequestor field
     */
    const bool&
    getdataToFwdRequestor() const
    {
        return m_dataToFwdRequestor;
    }
    /** \brief Const accessor method for retToSrc field.
     *  \return retToSrc field
     */
    const bool&
    getretToSrc() const
    {
        return m_retToSrc;
    }
    /** \brief Const accessor method for allowRetry field.
     *  \return allowRetry field
     */
    const bool&
    getallowRetry() const
    {
        return m_allowRetry;
    }
    /** \brief Const accessor method for Destination field.
     *  \return Destination field
     */
    const NetDest&
    getDestination() const
    {
        return m_Destination;
    }
    /** \brief Const accessor method for seqReq field.
     *  \return seqReq field
     */
    const RequestPtr&
    getseqReq() const
    {
        return m_seqReq;
    }
    /** \brief Const accessor method for isSeqReqValid field.
     *  \return isSeqReqValid field
     */
    const bool&
    getisSeqReqValid() const
    {
        return m_isSeqReqValid;
    }
    /** \brief Const accessor method for is_local_pf field.
     *  \return is_local_pf field
     */
    const bool&
    getis_local_pf() const
    {
        return m_is_local_pf;
    }
    /** \brief Const accessor method for is_remote_pf field.
     *  \return is_remote_pf field
     */
    const bool&
    getis_remote_pf() const
    {
        return m_is_remote_pf;
    }
    /** \brief Const accessor method for usesTxnId field.
     *  \return usesTxnId field
     */
    const bool&
    getusesTxnId() const
    {
        return m_usesTxnId;
    }
    /** \brief Const accessor method for txnId field.
     *  \return txnId field
     */
    const Addr&
    gettxnId() const
    {
        return m_txnId;
    }
    /** \brief Const accessor method for MessageSize field.
     *  \return MessageSize field
     */
    const MessageSizeType&
    getMessageSize() const
    {
        return m_MessageSize;
    }
    // Non const Accessors methods for each field
    /** \brief Non-const accessor method for addr field.
     *  \return addr field
     */
    Addr&
    getaddr()
    {
        return m_addr;
    }
    /** \brief Non-const accessor method for accAddr field.
     *  \return accAddr field
     */
    Addr&
    getaccAddr()
    {
        return m_accAddr;
    }
    /** \brief Non-const accessor method for accSize field.
     *  \return accSize field
     */
    int&
    getaccSize()
    {
        return m_accSize;
    }
    /** \brief Non-const accessor method for type field.
     *  \return type field
     */
    CHIRequestType&
    gettype()
    {
        return m_type;
    }
    /** \brief Non-const accessor method for requestor field.
     *  \return requestor field
     */
    MachineID&
    getrequestor()
    {
        return m_requestor;
    }
    /** \brief Non-const accessor method for fwdRequestor field.
     *  \return fwdRequestor field
     */
    MachineID&
    getfwdRequestor()
    {
        return m_fwdRequestor;
    }
    /** \brief Non-const accessor method for dataToFwdRequestor field.
     *  \return dataToFwdRequestor field
     */
    bool&
    getdataToFwdRequestor()
    {
        return m_dataToFwdRequestor;
    }
    /** \brief Non-const accessor method for retToSrc field.
     *  \return retToSrc field
     */
    bool&
    getretToSrc()
    {
        return m_retToSrc;
    }
    /** \brief Non-const accessor method for allowRetry field.
     *  \return allowRetry field
     */
    bool&
    getallowRetry()
    {
        return m_allowRetry;
    }
    /** \brief Non-const accessor method for Destination field.
     *  \return Destination field
     */
    NetDest&
    getDestination()
    {
        return m_Destination;
    }
    /** \brief Non-const accessor method for seqReq field.
     *  \return seqReq field
     */
    RequestPtr&
    getseqReq()
    {
        return m_seqReq;
    }
    /** \brief Non-const accessor method for isSeqReqValid field.
     *  \return isSeqReqValid field
     */
    bool&
    getisSeqReqValid()
    {
        return m_isSeqReqValid;
    }
    /** \brief Non-const accessor method for is_local_pf field.
     *  \return is_local_pf field
     */
    bool&
    getis_local_pf()
    {
        return m_is_local_pf;
    }
    /** \brief Non-const accessor method for is_remote_pf field.
     *  \return is_remote_pf field
     */
    bool&
    getis_remote_pf()
    {
        return m_is_remote_pf;
    }
    /** \brief Non-const accessor method for usesTxnId field.
     *  \return usesTxnId field
     */
    bool&
    getusesTxnId()
    {
        return m_usesTxnId;
    }
    /** \brief Non-const accessor method for txnId field.
     *  \return txnId field
     */
    Addr&
    gettxnId()
    {
        return m_txnId;
    }
    /** \brief Non-const accessor method for MessageSize field.
     *  \return MessageSize field
     */
    MessageSizeType&
    getMessageSize()
    {
        return m_MessageSize;
    }
    // Mutator methods for each field
    /** \brief Mutator method for addr field */
    void
    setaddr(const Addr& local_addr)
    {
        m_addr = local_addr;
    }
    /** \brief Mutator method for accAddr field */
    void
    setaccAddr(const Addr& local_accAddr)
    {
        m_accAddr = local_accAddr;
    }
    /** \brief Mutator method for accSize field */
    void
    setaccSize(const int& local_accSize)
    {
        m_accSize = local_accSize;
    }
    /** \brief Mutator method for type field */
    void
    settype(const CHIRequestType& local_type)
    {
        m_type = local_type;
    }
    /** \brief Mutator method for requestor field */
    void
    setrequestor(const MachineID& local_requestor)
    {
        m_requestor = local_requestor;
    }
    /** \brief Mutator method for fwdRequestor field */
    void
    setfwdRequestor(const MachineID& local_fwdRequestor)
    {
        m_fwdRequestor = local_fwdRequestor;
    }
    /** \brief Mutator method for dataToFwdRequestor field */
    void
    setdataToFwdRequestor(const bool& local_dataToFwdRequestor)
    {
        m_dataToFwdRequestor = local_dataToFwdRequestor;
    }
    /** \brief Mutator method for retToSrc field */
    void
    setretToSrc(const bool& local_retToSrc)
    {
        m_retToSrc = local_retToSrc;
    }
    /** \brief Mutator method for allowRetry field */
    void
    setallowRetry(const bool& local_allowRetry)
    {
        m_allowRetry = local_allowRetry;
    }
    /** \brief Mutator method for Destination field */
    void
    setDestination(const NetDest& local_Destination)
    {
        m_Destination = local_Destination;
    }
    /** \brief Mutator method for seqReq field */
    void
    setseqReq(const RequestPtr& local_seqReq)
    {
        m_seqReq = local_seqReq;
    }
    /** \brief Mutator method for isSeqReqValid field */
    void
    setisSeqReqValid(const bool& local_isSeqReqValid)
    {
        m_isSeqReqValid = local_isSeqReqValid;
    }
    /** \brief Mutator method for is_local_pf field */
    void
    setis_local_pf(const bool& local_is_local_pf)
    {
        m_is_local_pf = local_is_local_pf;
    }
    /** \brief Mutator method for is_remote_pf field */
    void
    setis_remote_pf(const bool& local_is_remote_pf)
    {
        m_is_remote_pf = local_is_remote_pf;
    }
    /** \brief Mutator method for usesTxnId field */
    void
    setusesTxnId(const bool& local_usesTxnId)
    {
        m_usesTxnId = local_usesTxnId;
    }
    /** \brief Mutator method for txnId field */
    void
    settxnId(const Addr& local_txnId)
    {
        m_txnId = local_txnId;
    }
    /** \brief Mutator method for MessageSize field */
    void
    setMessageSize(const MessageSizeType& local_MessageSize)
    {
        m_MessageSize = local_MessageSize;
    }
    void print(std::ostream& out) const;
  //private:
    /** Request line address */
    Addr m_addr;
    /** Original access address. Set for Write*Ptl and requests from the sequencer */
    Addr m_accAddr;
    /** Access size. Set for Write*Ptl and requests from the sequencer */
    int m_accSize;
    /** Request type */
    CHIRequestType m_type;
    /** Requestor ID */
    MachineID m_requestor;
    /** Where to send data for DMT/DCT requests */
    MachineID m_fwdRequestor;
    /** Data has to be forwarded to fwdRequestor */
    bool m_dataToFwdRequestor;
    /** Affects whether or not a snoop resp returns data */
    bool m_retToSrc;
    /** This request can be retried */
    bool m_allowRetry;
    /** Message destination */
    NetDest m_Destination;
    /** Pointer to original request from CPU/sequencer (nullptr if not valid) */
    RequestPtr m_seqReq;
    /** Set if seqReq is valid (not nullptr) */
    bool m_isSeqReqValid;
    /** Request generated by a local prefetcher */
    bool m_is_local_pf;
    /** Request generated a prefetcher in another cache */
    bool m_is_remote_pf;
    /** True if using a Transaction ID */
    bool m_usesTxnId;
    /** Transaction ID */
    Addr m_txnId;
    MessageSizeType m_MessageSize;
    bool functionalRead(Packet* param_pkt);
    bool functionalRead(Packet* param_pkt, WriteMask& param_mask);
    bool functionalWrite(Packet* param_pkt);
};
inline ::std::ostream&
operator<<(::std::ostream& out, const CHIRequestMsg& obj)
{
    obj.print(out);
    out << ::std::flush;
    return out;
}

} // namespace ruby
} // namespace gem5

#endif // __CHIRequestMsg_HH__
