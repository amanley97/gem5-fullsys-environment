/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /home/a599m019/gem5-fullsys-enviroment/gem5/src/mem/slicc/symbols/Type.py:443
 */

#ifndef __Cache_TBE_HH__
#define __Cache_TBE_HH__

#include <iostream>

#include "mem/ruby/slicc_interface/RubySlicc_Util.hh"

#include "mem/ruby/protocol/CHIRequestType.hh"
#include "mem/ruby/protocol/MachineID.hh"
#include "mem/ruby/protocol/MachineID.hh"
#include "mem/ruby/protocol/Cache_State.hh"
#include "mem/ruby/protocol/DataBlock.hh"
#include "mem/ruby/protocol/WriteMask.hh"
#include "mem/ruby/protocol/NetDest.hh"
#include "mem/ruby/protocol/MachineID.hh"
#include "mem/ruby/protocol/TriggerQueue.hh"
#include "mem/ruby/protocol/Cache_Event.hh"
#include "mem/ruby/protocol/Cache_State.hh"
#include "mem/ruby/protocol/ExpectedMap.hh"
#include "mem/ruby/protocol/ExpectedMap.hh"
#include "mem/ruby/protocol/CHIResponseType.hh"
#include "mem/ruby/protocol/CHIDataType.hh"
#include "mem/ruby/protocol/WriteMask.hh"
#include "mem/ruby/protocol/CHIDataType.hh"
#include "mem/ruby/protocol/MachineID.hh"
#include "mem/ruby/protocol/Cache_State.hh"
#include "mem/ruby/protocol/CHIRequestType.hh"
#include "mem/ruby/protocol/NetDest.hh"
namespace gem5
{

namespace ruby
{

class Cache_TBE
{
  public:
    Cache_TBE
()
		{
        m_is_req_tbe = false;
         // default value of bool
        m_is_snp_tbe = false;
         // default value of bool
        m_is_repl_tbe = false;
         // default value of bool
        m_is_dvm_tbe = false;
         // default value of bool
        m_is_dvm_snp_tbe = false;
         // default value of bool
        m_storSlot = 0;
         // default value of int
        // m_addr has no default
        // m_accAddr has no default
        m_accSize = 0;
         // default value of int
        m_reqType = CHIRequestType_NUM;
         // default value of CHIRequestType
        // m_requestor has no default
        // m_fwdRequestor has no default
        m_use_DMT = false;
         // default value of bool
        m_use_DCT = false;
         // default value of bool
        m_is_local_pf = false;
         // default value of bool
        m_is_remote_pf = false;
         // default value of bool
        m_seqReq = nullptr; // default for this field
        m_isSeqReqValid = false; // default for this field
        m_state = Cache_State_null;
         // default value of Cache_State
        m_hasUseTimeout = false;
         // default value of bool
        // m_dataBlk has no default
        // m_dataBlkValid has no default
        m_dataValid = false;
         // default value of bool
        m_dataDirty = false;
         // default value of bool
        m_dataMaybeDirtyUpstream = false;
         // default value of bool
        m_dataUnique = false;
         // default value of bool
        m_dataToBeInvalid = false;
         // default value of bool
        m_dataToBeSharedClean = false;
         // default value of bool
        // m_dir_sharers has no default
        // m_dir_owner has no default
        m_dir_ownerExists = false;
         // default value of bool
        m_dir_ownerIsExcl = false;
         // default value of bool
        m_doCacheFill = false;
         // default value of bool
        // m_actions has no default
        m_pendAction = Cache_Event_NUM;
         // default value of Cache_Event
        m_delayNextAction = 0;
         // default value of Tick
        m_finalState = Cache_State_null;
         // default value of Cache_State
        // m_expected_req_resp has no default
        // m_expected_snp_resp has no default
        m_defer_expected_comp = false;
         // default value of bool
        m_slicchack1 = CHIResponseType_NUM;
         // default value of CHIResponseType
        m_slicchack2 = CHIDataType_NUM;
         // default value of CHIDataType
        m_snd_pendEv = false;
         // default value of bool
        // m_snd_pendBytes has no default
        m_snd_msgType = CHIDataType_NUM;
         // default value of CHIDataType
        // m_snd_destination has no default
        m_updateDirOnCompAck = false;
         // default value of bool
        m_requestorToBeOwner = false;
         // default value of bool
        m_requestorToBeExclusiveOwner = false;
         // default value of bool
        m_snpNeedsData = false;
         // default value of bool
        m_fwdedState = Cache_State_null;
         // default value of Cache_State
        m_is_req_hazard = false;
         // default value of bool
        m_is_repl_hazard = false;
         // default value of bool
        m_is_stale = false;
         // default value of bool
        m_pendReqType = CHIRequestType_NUM;
         // default value of CHIRequestType
        m_pendReqAllowRetry = false;
         // default value of bool
        m_rcvdRetryAck = false;
         // default value of bool
        m_rcvdRetryCredit = false;
         // default value of bool
        // m_pendReqAccAddr has no default
        m_pendReqAccSize = 0;
         // default value of int
        // m_pendReqDest has no default
        m_pendReqD2OrigReq = false;
         // default value of bool
        m_pendReqRetToSrc = false;
         // default value of bool
        m_wakeup_pending_req = false;
         // default value of bool
        m_wakeup_pending_snp = false;
         // default value of bool
        m_wakeup_pending_tgr = false;
         // default value of bool
    }
    Cache_TBE(const Cache_TBE&) = default;
    Cache_TBE
    &operator=(const Cache_TBE&) = default;
    Cache_TBE(const bool& local_is_req_tbe, const bool& local_is_snp_tbe, const bool& local_is_repl_tbe, const bool& local_is_dvm_tbe, const bool& local_is_dvm_snp_tbe, const int& local_storSlot, const Addr& local_addr, const Addr& local_accAddr, const int& local_accSize, const CHIRequestType& local_reqType, const MachineID& local_requestor, const MachineID& local_fwdRequestor, const bool& local_use_DMT, const bool& local_use_DCT, const bool& local_is_local_pf, const bool& local_is_remote_pf, const RequestPtr& local_seqReq, const bool& local_isSeqReqValid, const Cache_State& local_state, const bool& local_hasUseTimeout, const DataBlock& local_dataBlk, const WriteMask& local_dataBlkValid, const bool& local_dataValid, const bool& local_dataDirty, const bool& local_dataMaybeDirtyUpstream, const bool& local_dataUnique, const bool& local_dataToBeInvalid, const bool& local_dataToBeSharedClean, const NetDest& local_dir_sharers, const MachineID& local_dir_owner, const bool& local_dir_ownerExists, const bool& local_dir_ownerIsExcl, const bool& local_doCacheFill, const TriggerQueue<Cache_Event>& local_actions, const Cache_Event& local_pendAction, const Tick& local_delayNextAction, const Cache_State& local_finalState, const ExpectedMap<CHIResponseType,CHIDataType>& local_expected_req_resp, const ExpectedMap<CHIResponseType,CHIDataType>& local_expected_snp_resp, const bool& local_defer_expected_comp, const CHIResponseType& local_slicchack1, const CHIDataType& local_slicchack2, const bool& local_snd_pendEv, const WriteMask& local_snd_pendBytes, const CHIDataType& local_snd_msgType, const MachineID& local_snd_destination, const bool& local_updateDirOnCompAck, const bool& local_requestorToBeOwner, const bool& local_requestorToBeExclusiveOwner, const bool& local_snpNeedsData, const Cache_State& local_fwdedState, const bool& local_is_req_hazard, const bool& local_is_repl_hazard, const bool& local_is_stale, const CHIRequestType& local_pendReqType, const bool& local_pendReqAllowRetry, const bool& local_rcvdRetryAck, const bool& local_rcvdRetryCredit, const Addr& local_pendReqAccAddr, const int& local_pendReqAccSize, const NetDest& local_pendReqDest, const bool& local_pendReqD2OrigReq, const bool& local_pendReqRetToSrc, const bool& local_wakeup_pending_req, const bool& local_wakeup_pending_snp, const bool& local_wakeup_pending_tgr)
    {
        m_is_req_tbe = local_is_req_tbe;
        m_is_snp_tbe = local_is_snp_tbe;
        m_is_repl_tbe = local_is_repl_tbe;
        m_is_dvm_tbe = local_is_dvm_tbe;
        m_is_dvm_snp_tbe = local_is_dvm_snp_tbe;
        m_storSlot = local_storSlot;
        m_addr = local_addr;
        m_accAddr = local_accAddr;
        m_accSize = local_accSize;
        m_reqType = local_reqType;
        m_requestor = local_requestor;
        m_fwdRequestor = local_fwdRequestor;
        m_use_DMT = local_use_DMT;
        m_use_DCT = local_use_DCT;
        m_is_local_pf = local_is_local_pf;
        m_is_remote_pf = local_is_remote_pf;
        m_seqReq = local_seqReq;
        m_isSeqReqValid = local_isSeqReqValid;
        m_state = local_state;
        m_hasUseTimeout = local_hasUseTimeout;
        m_dataBlk = local_dataBlk;
        m_dataBlkValid = local_dataBlkValid;
        m_dataValid = local_dataValid;
        m_dataDirty = local_dataDirty;
        m_dataMaybeDirtyUpstream = local_dataMaybeDirtyUpstream;
        m_dataUnique = local_dataUnique;
        m_dataToBeInvalid = local_dataToBeInvalid;
        m_dataToBeSharedClean = local_dataToBeSharedClean;
        m_dir_sharers = local_dir_sharers;
        m_dir_owner = local_dir_owner;
        m_dir_ownerExists = local_dir_ownerExists;
        m_dir_ownerIsExcl = local_dir_ownerIsExcl;
        m_doCacheFill = local_doCacheFill;
        m_actions = local_actions;
        m_pendAction = local_pendAction;
        m_delayNextAction = local_delayNextAction;
        m_finalState = local_finalState;
        m_expected_req_resp = local_expected_req_resp;
        m_expected_snp_resp = local_expected_snp_resp;
        m_defer_expected_comp = local_defer_expected_comp;
        m_slicchack1 = local_slicchack1;
        m_slicchack2 = local_slicchack2;
        m_snd_pendEv = local_snd_pendEv;
        m_snd_pendBytes = local_snd_pendBytes;
        m_snd_msgType = local_snd_msgType;
        m_snd_destination = local_snd_destination;
        m_updateDirOnCompAck = local_updateDirOnCompAck;
        m_requestorToBeOwner = local_requestorToBeOwner;
        m_requestorToBeExclusiveOwner = local_requestorToBeExclusiveOwner;
        m_snpNeedsData = local_snpNeedsData;
        m_fwdedState = local_fwdedState;
        m_is_req_hazard = local_is_req_hazard;
        m_is_repl_hazard = local_is_repl_hazard;
        m_is_stale = local_is_stale;
        m_pendReqType = local_pendReqType;
        m_pendReqAllowRetry = local_pendReqAllowRetry;
        m_rcvdRetryAck = local_rcvdRetryAck;
        m_rcvdRetryCredit = local_rcvdRetryCredit;
        m_pendReqAccAddr = local_pendReqAccAddr;
        m_pendReqAccSize = local_pendReqAccSize;
        m_pendReqDest = local_pendReqDest;
        m_pendReqD2OrigReq = local_pendReqD2OrigReq;
        m_pendReqRetToSrc = local_pendReqRetToSrc;
        m_wakeup_pending_req = local_wakeup_pending_req;
        m_wakeup_pending_snp = local_wakeup_pending_snp;
        m_wakeup_pending_tgr = local_wakeup_pending_tgr;
    }
    Cache_TBE*
    clone() const
    {
         return new Cache_TBE(*this);
    }
    // Const accessors methods for each field
    /** \brief Const accessor method for is_req_tbe field.
     *  \return is_req_tbe field
     */
    const bool&
    getis_req_tbe() const
    {
        return m_is_req_tbe;
    }
    /** \brief Const accessor method for is_snp_tbe field.
     *  \return is_snp_tbe field
     */
    const bool&
    getis_snp_tbe() const
    {
        return m_is_snp_tbe;
    }
    /** \brief Const accessor method for is_repl_tbe field.
     *  \return is_repl_tbe field
     */
    const bool&
    getis_repl_tbe() const
    {
        return m_is_repl_tbe;
    }
    /** \brief Const accessor method for is_dvm_tbe field.
     *  \return is_dvm_tbe field
     */
    const bool&
    getis_dvm_tbe() const
    {
        return m_is_dvm_tbe;
    }
    /** \brief Const accessor method for is_dvm_snp_tbe field.
     *  \return is_dvm_snp_tbe field
     */
    const bool&
    getis_dvm_snp_tbe() const
    {
        return m_is_dvm_snp_tbe;
    }
    /** \brief Const accessor method for storSlot field.
     *  \return storSlot field
     */
    const int&
    getstorSlot() const
    {
        return m_storSlot;
    }
    /** \brief Const accessor method for addr field.
     *  \return addr field
     */
    const Addr&
    getaddr() const
    {
        return m_addr;
    }
    /** \brief Const accessor method for accAddr field.
     *  \return accAddr field
     */
    const Addr&
    getaccAddr() const
    {
        return m_accAddr;
    }
    /** \brief Const accessor method for accSize field.
     *  \return accSize field
     */
    const int&
    getaccSize() const
    {
        return m_accSize;
    }
    /** \brief Const accessor method for reqType field.
     *  \return reqType field
     */
    const CHIRequestType&
    getreqType() const
    {
        return m_reqType;
    }
    /** \brief Const accessor method for requestor field.
     *  \return requestor field
     */
    const MachineID&
    getrequestor() const
    {
        return m_requestor;
    }
    /** \brief Const accessor method for fwdRequestor field.
     *  \return fwdRequestor field
     */
    const MachineID&
    getfwdRequestor() const
    {
        return m_fwdRequestor;
    }
    /** \brief Const accessor method for use_DMT field.
     *  \return use_DMT field
     */
    const bool&
    getuse_DMT() const
    {
        return m_use_DMT;
    }
    /** \brief Const accessor method for use_DCT field.
     *  \return use_DCT field
     */
    const bool&
    getuse_DCT() const
    {
        return m_use_DCT;
    }
    /** \brief Const accessor method for is_local_pf field.
     *  \return is_local_pf field
     */
    const bool&
    getis_local_pf() const
    {
        return m_is_local_pf;
    }
    /** \brief Const accessor method for is_remote_pf field.
     *  \return is_remote_pf field
     */
    const bool&
    getis_remote_pf() const
    {
        return m_is_remote_pf;
    }
    /** \brief Const accessor method for seqReq field.
     *  \return seqReq field
     */
    const RequestPtr&
    getseqReq() const
    {
        return m_seqReq;
    }
    /** \brief Const accessor method for isSeqReqValid field.
     *  \return isSeqReqValid field
     */
    const bool&
    getisSeqReqValid() const
    {
        return m_isSeqReqValid;
    }
    /** \brief Const accessor method for state field.
     *  \return state field
     */
    const Cache_State&
    getstate() const
    {
        return m_state;
    }
    /** \brief Const accessor method for hasUseTimeout field.
     *  \return hasUseTimeout field
     */
    const bool&
    gethasUseTimeout() const
    {
        return m_hasUseTimeout;
    }
    /** \brief Const accessor method for dataBlk field.
     *  \return dataBlk field
     */
    const DataBlock&
    getdataBlk() const
    {
        return m_dataBlk;
    }
    /** \brief Const accessor method for dataBlkValid field.
     *  \return dataBlkValid field
     */
    const WriteMask&
    getdataBlkValid() const
    {
        return m_dataBlkValid;
    }
    /** \brief Const accessor method for dataValid field.
     *  \return dataValid field
     */
    const bool&
    getdataValid() const
    {
        return m_dataValid;
    }
    /** \brief Const accessor method for dataDirty field.
     *  \return dataDirty field
     */
    const bool&
    getdataDirty() const
    {
        return m_dataDirty;
    }
    /** \brief Const accessor method for dataMaybeDirtyUpstream field.
     *  \return dataMaybeDirtyUpstream field
     */
    const bool&
    getdataMaybeDirtyUpstream() const
    {
        return m_dataMaybeDirtyUpstream;
    }
    /** \brief Const accessor method for dataUnique field.
     *  \return dataUnique field
     */
    const bool&
    getdataUnique() const
    {
        return m_dataUnique;
    }
    /** \brief Const accessor method for dataToBeInvalid field.
     *  \return dataToBeInvalid field
     */
    const bool&
    getdataToBeInvalid() const
    {
        return m_dataToBeInvalid;
    }
    /** \brief Const accessor method for dataToBeSharedClean field.
     *  \return dataToBeSharedClean field
     */
    const bool&
    getdataToBeSharedClean() const
    {
        return m_dataToBeSharedClean;
    }
    /** \brief Const accessor method for dir_sharers field.
     *  \return dir_sharers field
     */
    const NetDest&
    getdir_sharers() const
    {
        return m_dir_sharers;
    }
    /** \brief Const accessor method for dir_owner field.
     *  \return dir_owner field
     */
    const MachineID&
    getdir_owner() const
    {
        return m_dir_owner;
    }
    /** \brief Const accessor method for dir_ownerExists field.
     *  \return dir_ownerExists field
     */
    const bool&
    getdir_ownerExists() const
    {
        return m_dir_ownerExists;
    }
    /** \brief Const accessor method for dir_ownerIsExcl field.
     *  \return dir_ownerIsExcl field
     */
    const bool&
    getdir_ownerIsExcl() const
    {
        return m_dir_ownerIsExcl;
    }
    /** \brief Const accessor method for doCacheFill field.
     *  \return doCacheFill field
     */
    const bool&
    getdoCacheFill() const
    {
        return m_doCacheFill;
    }
    /** \brief Const accessor method for actions field.
     *  \return actions field
     */
    const TriggerQueue<Cache_Event>&
    getactions() const
    {
        return m_actions;
    }
    /** \brief Const accessor method for pendAction field.
     *  \return pendAction field
     */
    const Cache_Event&
    getpendAction() const
    {
        return m_pendAction;
    }
    /** \brief Const accessor method for delayNextAction field.
     *  \return delayNextAction field
     */
    const Tick&
    getdelayNextAction() const
    {
        return m_delayNextAction;
    }
    /** \brief Const accessor method for finalState field.
     *  \return finalState field
     */
    const Cache_State&
    getfinalState() const
    {
        return m_finalState;
    }
    /** \brief Const accessor method for expected_req_resp field.
     *  \return expected_req_resp field
     */
    const ExpectedMap<CHIResponseType,CHIDataType>&
    getexpected_req_resp() const
    {
        return m_expected_req_resp;
    }
    /** \brief Const accessor method for expected_snp_resp field.
     *  \return expected_snp_resp field
     */
    const ExpectedMap<CHIResponseType,CHIDataType>&
    getexpected_snp_resp() const
    {
        return m_expected_snp_resp;
    }
    /** \brief Const accessor method for defer_expected_comp field.
     *  \return defer_expected_comp field
     */
    const bool&
    getdefer_expected_comp() const
    {
        return m_defer_expected_comp;
    }
    /** \brief Const accessor method for slicchack1 field.
     *  \return slicchack1 field
     */
    const CHIResponseType&
    getslicchack1() const
    {
        return m_slicchack1;
    }
    /** \brief Const accessor method for slicchack2 field.
     *  \return slicchack2 field
     */
    const CHIDataType&
    getslicchack2() const
    {
        return m_slicchack2;
    }
    /** \brief Const accessor method for snd_pendEv field.
     *  \return snd_pendEv field
     */
    const bool&
    getsnd_pendEv() const
    {
        return m_snd_pendEv;
    }
    /** \brief Const accessor method for snd_pendBytes field.
     *  \return snd_pendBytes field
     */
    const WriteMask&
    getsnd_pendBytes() const
    {
        return m_snd_pendBytes;
    }
    /** \brief Const accessor method for snd_msgType field.
     *  \return snd_msgType field
     */
    const CHIDataType&
    getsnd_msgType() const
    {
        return m_snd_msgType;
    }
    /** \brief Const accessor method for snd_destination field.
     *  \return snd_destination field
     */
    const MachineID&
    getsnd_destination() const
    {
        return m_snd_destination;
    }
    /** \brief Const accessor method for updateDirOnCompAck field.
     *  \return updateDirOnCompAck field
     */
    const bool&
    getupdateDirOnCompAck() const
    {
        return m_updateDirOnCompAck;
    }
    /** \brief Const accessor method for requestorToBeOwner field.
     *  \return requestorToBeOwner field
     */
    const bool&
    getrequestorToBeOwner() const
    {
        return m_requestorToBeOwner;
    }
    /** \brief Const accessor method for requestorToBeExclusiveOwner field.
     *  \return requestorToBeExclusiveOwner field
     */
    const bool&
    getrequestorToBeExclusiveOwner() const
    {
        return m_requestorToBeExclusiveOwner;
    }
    /** \brief Const accessor method for snpNeedsData field.
     *  \return snpNeedsData field
     */
    const bool&
    getsnpNeedsData() const
    {
        return m_snpNeedsData;
    }
    /** \brief Const accessor method for fwdedState field.
     *  \return fwdedState field
     */
    const Cache_State&
    getfwdedState() const
    {
        return m_fwdedState;
    }
    /** \brief Const accessor method for is_req_hazard field.
     *  \return is_req_hazard field
     */
    const bool&
    getis_req_hazard() const
    {
        return m_is_req_hazard;
    }
    /** \brief Const accessor method for is_repl_hazard field.
     *  \return is_repl_hazard field
     */
    const bool&
    getis_repl_hazard() const
    {
        return m_is_repl_hazard;
    }
    /** \brief Const accessor method for is_stale field.
     *  \return is_stale field
     */
    const bool&
    getis_stale() const
    {
        return m_is_stale;
    }
    /** \brief Const accessor method for pendReqType field.
     *  \return pendReqType field
     */
    const CHIRequestType&
    getpendReqType() const
    {
        return m_pendReqType;
    }
    /** \brief Const accessor method for pendReqAllowRetry field.
     *  \return pendReqAllowRetry field
     */
    const bool&
    getpendReqAllowRetry() const
    {
        return m_pendReqAllowRetry;
    }
    /** \brief Const accessor method for rcvdRetryAck field.
     *  \return rcvdRetryAck field
     */
    const bool&
    getrcvdRetryAck() const
    {
        return m_rcvdRetryAck;
    }
    /** \brief Const accessor method for rcvdRetryCredit field.
     *  \return rcvdRetryCredit field
     */
    const bool&
    getrcvdRetryCredit() const
    {
        return m_rcvdRetryCredit;
    }
    /** \brief Const accessor method for pendReqAccAddr field.
     *  \return pendReqAccAddr field
     */
    const Addr&
    getpendReqAccAddr() const
    {
        return m_pendReqAccAddr;
    }
    /** \brief Const accessor method for pendReqAccSize field.
     *  \return pendReqAccSize field
     */
    const int&
    getpendReqAccSize() const
    {
        return m_pendReqAccSize;
    }
    /** \brief Const accessor method for pendReqDest field.
     *  \return pendReqDest field
     */
    const NetDest&
    getpendReqDest() const
    {
        return m_pendReqDest;
    }
    /** \brief Const accessor method for pendReqD2OrigReq field.
     *  \return pendReqD2OrigReq field
     */
    const bool&
    getpendReqD2OrigReq() const
    {
        return m_pendReqD2OrigReq;
    }
    /** \brief Const accessor method for pendReqRetToSrc field.
     *  \return pendReqRetToSrc field
     */
    const bool&
    getpendReqRetToSrc() const
    {
        return m_pendReqRetToSrc;
    }
    /** \brief Const accessor method for wakeup_pending_req field.
     *  \return wakeup_pending_req field
     */
    const bool&
    getwakeup_pending_req() const
    {
        return m_wakeup_pending_req;
    }
    /** \brief Const accessor method for wakeup_pending_snp field.
     *  \return wakeup_pending_snp field
     */
    const bool&
    getwakeup_pending_snp() const
    {
        return m_wakeup_pending_snp;
    }
    /** \brief Const accessor method for wakeup_pending_tgr field.
     *  \return wakeup_pending_tgr field
     */
    const bool&
    getwakeup_pending_tgr() const
    {
        return m_wakeup_pending_tgr;
    }
    // Non const Accessors methods for each field
    /** \brief Non-const accessor method for is_req_tbe field.
     *  \return is_req_tbe field
     */
    bool&
    getis_req_tbe()
    {
        return m_is_req_tbe;
    }
    /** \brief Non-const accessor method for is_snp_tbe field.
     *  \return is_snp_tbe field
     */
    bool&
    getis_snp_tbe()
    {
        return m_is_snp_tbe;
    }
    /** \brief Non-const accessor method for is_repl_tbe field.
     *  \return is_repl_tbe field
     */
    bool&
    getis_repl_tbe()
    {
        return m_is_repl_tbe;
    }
    /** \brief Non-const accessor method for is_dvm_tbe field.
     *  \return is_dvm_tbe field
     */
    bool&
    getis_dvm_tbe()
    {
        return m_is_dvm_tbe;
    }
    /** \brief Non-const accessor method for is_dvm_snp_tbe field.
     *  \return is_dvm_snp_tbe field
     */
    bool&
    getis_dvm_snp_tbe()
    {
        return m_is_dvm_snp_tbe;
    }
    /** \brief Non-const accessor method for storSlot field.
     *  \return storSlot field
     */
    int&
    getstorSlot()
    {
        return m_storSlot;
    }
    /** \brief Non-const accessor method for addr field.
     *  \return addr field
     */
    Addr&
    getaddr()
    {
        return m_addr;
    }
    /** \brief Non-const accessor method for accAddr field.
     *  \return accAddr field
     */
    Addr&
    getaccAddr()
    {
        return m_accAddr;
    }
    /** \brief Non-const accessor method for accSize field.
     *  \return accSize field
     */
    int&
    getaccSize()
    {
        return m_accSize;
    }
    /** \brief Non-const accessor method for reqType field.
     *  \return reqType field
     */
    CHIRequestType&
    getreqType()
    {
        return m_reqType;
    }
    /** \brief Non-const accessor method for requestor field.
     *  \return requestor field
     */
    MachineID&
    getrequestor()
    {
        return m_requestor;
    }
    /** \brief Non-const accessor method for fwdRequestor field.
     *  \return fwdRequestor field
     */
    MachineID&
    getfwdRequestor()
    {
        return m_fwdRequestor;
    }
    /** \brief Non-const accessor method for use_DMT field.
     *  \return use_DMT field
     */
    bool&
    getuse_DMT()
    {
        return m_use_DMT;
    }
    /** \brief Non-const accessor method for use_DCT field.
     *  \return use_DCT field
     */
    bool&
    getuse_DCT()
    {
        return m_use_DCT;
    }
    /** \brief Non-const accessor method for is_local_pf field.
     *  \return is_local_pf field
     */
    bool&
    getis_local_pf()
    {
        return m_is_local_pf;
    }
    /** \brief Non-const accessor method for is_remote_pf field.
     *  \return is_remote_pf field
     */
    bool&
    getis_remote_pf()
    {
        return m_is_remote_pf;
    }
    /** \brief Non-const accessor method for seqReq field.
     *  \return seqReq field
     */
    RequestPtr&
    getseqReq()
    {
        return m_seqReq;
    }
    /** \brief Non-const accessor method for isSeqReqValid field.
     *  \return isSeqReqValid field
     */
    bool&
    getisSeqReqValid()
    {
        return m_isSeqReqValid;
    }
    /** \brief Non-const accessor method for state field.
     *  \return state field
     */
    Cache_State&
    getstate()
    {
        return m_state;
    }
    /** \brief Non-const accessor method for hasUseTimeout field.
     *  \return hasUseTimeout field
     */
    bool&
    gethasUseTimeout()
    {
        return m_hasUseTimeout;
    }
    /** \brief Non-const accessor method for dataBlk field.
     *  \return dataBlk field
     */
    DataBlock&
    getdataBlk()
    {
        return m_dataBlk;
    }
    /** \brief Non-const accessor method for dataBlkValid field.
     *  \return dataBlkValid field
     */
    WriteMask&
    getdataBlkValid()
    {
        return m_dataBlkValid;
    }
    /** \brief Non-const accessor method for dataValid field.
     *  \return dataValid field
     */
    bool&
    getdataValid()
    {
        return m_dataValid;
    }
    /** \brief Non-const accessor method for dataDirty field.
     *  \return dataDirty field
     */
    bool&
    getdataDirty()
    {
        return m_dataDirty;
    }
    /** \brief Non-const accessor method for dataMaybeDirtyUpstream field.
     *  \return dataMaybeDirtyUpstream field
     */
    bool&
    getdataMaybeDirtyUpstream()
    {
        return m_dataMaybeDirtyUpstream;
    }
    /** \brief Non-const accessor method for dataUnique field.
     *  \return dataUnique field
     */
    bool&
    getdataUnique()
    {
        return m_dataUnique;
    }
    /** \brief Non-const accessor method for dataToBeInvalid field.
     *  \return dataToBeInvalid field
     */
    bool&
    getdataToBeInvalid()
    {
        return m_dataToBeInvalid;
    }
    /** \brief Non-const accessor method for dataToBeSharedClean field.
     *  \return dataToBeSharedClean field
     */
    bool&
    getdataToBeSharedClean()
    {
        return m_dataToBeSharedClean;
    }
    /** \brief Non-const accessor method for dir_sharers field.
     *  \return dir_sharers field
     */
    NetDest&
    getdir_sharers()
    {
        return m_dir_sharers;
    }
    /** \brief Non-const accessor method for dir_owner field.
     *  \return dir_owner field
     */
    MachineID&
    getdir_owner()
    {
        return m_dir_owner;
    }
    /** \brief Non-const accessor method for dir_ownerExists field.
     *  \return dir_ownerExists field
     */
    bool&
    getdir_ownerExists()
    {
        return m_dir_ownerExists;
    }
    /** \brief Non-const accessor method for dir_ownerIsExcl field.
     *  \return dir_ownerIsExcl field
     */
    bool&
    getdir_ownerIsExcl()
    {
        return m_dir_ownerIsExcl;
    }
    /** \brief Non-const accessor method for doCacheFill field.
     *  \return doCacheFill field
     */
    bool&
    getdoCacheFill()
    {
        return m_doCacheFill;
    }
    /** \brief Non-const accessor method for actions field.
     *  \return actions field
     */
    TriggerQueue<Cache_Event>&
    getactions()
    {
        return m_actions;
    }
    /** \brief Non-const accessor method for pendAction field.
     *  \return pendAction field
     */
    Cache_Event&
    getpendAction()
    {
        return m_pendAction;
    }
    /** \brief Non-const accessor method for delayNextAction field.
     *  \return delayNextAction field
     */
    Tick&
    getdelayNextAction()
    {
        return m_delayNextAction;
    }
    /** \brief Non-const accessor method for finalState field.
     *  \return finalState field
     */
    Cache_State&
    getfinalState()
    {
        return m_finalState;
    }
    /** \brief Non-const accessor method for expected_req_resp field.
     *  \return expected_req_resp field
     */
    ExpectedMap<CHIResponseType,CHIDataType>&
    getexpected_req_resp()
    {
        return m_expected_req_resp;
    }
    /** \brief Non-const accessor method for expected_snp_resp field.
     *  \return expected_snp_resp field
     */
    ExpectedMap<CHIResponseType,CHIDataType>&
    getexpected_snp_resp()
    {
        return m_expected_snp_resp;
    }
    /** \brief Non-const accessor method for defer_expected_comp field.
     *  \return defer_expected_comp field
     */
    bool&
    getdefer_expected_comp()
    {
        return m_defer_expected_comp;
    }
    /** \brief Non-const accessor method for slicchack1 field.
     *  \return slicchack1 field
     */
    CHIResponseType&
    getslicchack1()
    {
        return m_slicchack1;
    }
    /** \brief Non-const accessor method for slicchack2 field.
     *  \return slicchack2 field
     */
    CHIDataType&
    getslicchack2()
    {
        return m_slicchack2;
    }
    /** \brief Non-const accessor method for snd_pendEv field.
     *  \return snd_pendEv field
     */
    bool&
    getsnd_pendEv()
    {
        return m_snd_pendEv;
    }
    /** \brief Non-const accessor method for snd_pendBytes field.
     *  \return snd_pendBytes field
     */
    WriteMask&
    getsnd_pendBytes()
    {
        return m_snd_pendBytes;
    }
    /** \brief Non-const accessor method for snd_msgType field.
     *  \return snd_msgType field
     */
    CHIDataType&
    getsnd_msgType()
    {
        return m_snd_msgType;
    }
    /** \brief Non-const accessor method for snd_destination field.
     *  \return snd_destination field
     */
    MachineID&
    getsnd_destination()
    {
        return m_snd_destination;
    }
    /** \brief Non-const accessor method for updateDirOnCompAck field.
     *  \return updateDirOnCompAck field
     */
    bool&
    getupdateDirOnCompAck()
    {
        return m_updateDirOnCompAck;
    }
    /** \brief Non-const accessor method for requestorToBeOwner field.
     *  \return requestorToBeOwner field
     */
    bool&
    getrequestorToBeOwner()
    {
        return m_requestorToBeOwner;
    }
    /** \brief Non-const accessor method for requestorToBeExclusiveOwner field.
     *  \return requestorToBeExclusiveOwner field
     */
    bool&
    getrequestorToBeExclusiveOwner()
    {
        return m_requestorToBeExclusiveOwner;
    }
    /** \brief Non-const accessor method for snpNeedsData field.
     *  \return snpNeedsData field
     */
    bool&
    getsnpNeedsData()
    {
        return m_snpNeedsData;
    }
    /** \brief Non-const accessor method for fwdedState field.
     *  \return fwdedState field
     */
    Cache_State&
    getfwdedState()
    {
        return m_fwdedState;
    }
    /** \brief Non-const accessor method for is_req_hazard field.
     *  \return is_req_hazard field
     */
    bool&
    getis_req_hazard()
    {
        return m_is_req_hazard;
    }
    /** \brief Non-const accessor method for is_repl_hazard field.
     *  \return is_repl_hazard field
     */
    bool&
    getis_repl_hazard()
    {
        return m_is_repl_hazard;
    }
    /** \brief Non-const accessor method for is_stale field.
     *  \return is_stale field
     */
    bool&
    getis_stale()
    {
        return m_is_stale;
    }
    /** \brief Non-const accessor method for pendReqType field.
     *  \return pendReqType field
     */
    CHIRequestType&
    getpendReqType()
    {
        return m_pendReqType;
    }
    /** \brief Non-const accessor method for pendReqAllowRetry field.
     *  \return pendReqAllowRetry field
     */
    bool&
    getpendReqAllowRetry()
    {
        return m_pendReqAllowRetry;
    }
    /** \brief Non-const accessor method for rcvdRetryAck field.
     *  \return rcvdRetryAck field
     */
    bool&
    getrcvdRetryAck()
    {
        return m_rcvdRetryAck;
    }
    /** \brief Non-const accessor method for rcvdRetryCredit field.
     *  \return rcvdRetryCredit field
     */
    bool&
    getrcvdRetryCredit()
    {
        return m_rcvdRetryCredit;
    }
    /** \brief Non-const accessor method for pendReqAccAddr field.
     *  \return pendReqAccAddr field
     */
    Addr&
    getpendReqAccAddr()
    {
        return m_pendReqAccAddr;
    }
    /** \brief Non-const accessor method for pendReqAccSize field.
     *  \return pendReqAccSize field
     */
    int&
    getpendReqAccSize()
    {
        return m_pendReqAccSize;
    }
    /** \brief Non-const accessor method for pendReqDest field.
     *  \return pendReqDest field
     */
    NetDest&
    getpendReqDest()
    {
        return m_pendReqDest;
    }
    /** \brief Non-const accessor method for pendReqD2OrigReq field.
     *  \return pendReqD2OrigReq field
     */
    bool&
    getpendReqD2OrigReq()
    {
        return m_pendReqD2OrigReq;
    }
    /** \brief Non-const accessor method for pendReqRetToSrc field.
     *  \return pendReqRetToSrc field
     */
    bool&
    getpendReqRetToSrc()
    {
        return m_pendReqRetToSrc;
    }
    /** \brief Non-const accessor method for wakeup_pending_req field.
     *  \return wakeup_pending_req field
     */
    bool&
    getwakeup_pending_req()
    {
        return m_wakeup_pending_req;
    }
    /** \brief Non-const accessor method for wakeup_pending_snp field.
     *  \return wakeup_pending_snp field
     */
    bool&
    getwakeup_pending_snp()
    {
        return m_wakeup_pending_snp;
    }
    /** \brief Non-const accessor method for wakeup_pending_tgr field.
     *  \return wakeup_pending_tgr field
     */
    bool&
    getwakeup_pending_tgr()
    {
        return m_wakeup_pending_tgr;
    }
    // Mutator methods for each field
    /** \brief Mutator method for is_req_tbe field */
    void
    setis_req_tbe(const bool& local_is_req_tbe)
    {
        m_is_req_tbe = local_is_req_tbe;
    }
    /** \brief Mutator method for is_snp_tbe field */
    void
    setis_snp_tbe(const bool& local_is_snp_tbe)
    {
        m_is_snp_tbe = local_is_snp_tbe;
    }
    /** \brief Mutator method for is_repl_tbe field */
    void
    setis_repl_tbe(const bool& local_is_repl_tbe)
    {
        m_is_repl_tbe = local_is_repl_tbe;
    }
    /** \brief Mutator method for is_dvm_tbe field */
    void
    setis_dvm_tbe(const bool& local_is_dvm_tbe)
    {
        m_is_dvm_tbe = local_is_dvm_tbe;
    }
    /** \brief Mutator method for is_dvm_snp_tbe field */
    void
    setis_dvm_snp_tbe(const bool& local_is_dvm_snp_tbe)
    {
        m_is_dvm_snp_tbe = local_is_dvm_snp_tbe;
    }
    /** \brief Mutator method for storSlot field */
    void
    setstorSlot(const int& local_storSlot)
    {
        m_storSlot = local_storSlot;
    }
    /** \brief Mutator method for addr field */
    void
    setaddr(const Addr& local_addr)
    {
        m_addr = local_addr;
    }
    /** \brief Mutator method for accAddr field */
    void
    setaccAddr(const Addr& local_accAddr)
    {
        m_accAddr = local_accAddr;
    }
    /** \brief Mutator method for accSize field */
    void
    setaccSize(const int& local_accSize)
    {
        m_accSize = local_accSize;
    }
    /** \brief Mutator method for reqType field */
    void
    setreqType(const CHIRequestType& local_reqType)
    {
        m_reqType = local_reqType;
    }
    /** \brief Mutator method for requestor field */
    void
    setrequestor(const MachineID& local_requestor)
    {
        m_requestor = local_requestor;
    }
    /** \brief Mutator method for fwdRequestor field */
    void
    setfwdRequestor(const MachineID& local_fwdRequestor)
    {
        m_fwdRequestor = local_fwdRequestor;
    }
    /** \brief Mutator method for use_DMT field */
    void
    setuse_DMT(const bool& local_use_DMT)
    {
        m_use_DMT = local_use_DMT;
    }
    /** \brief Mutator method for use_DCT field */
    void
    setuse_DCT(const bool& local_use_DCT)
    {
        m_use_DCT = local_use_DCT;
    }
    /** \brief Mutator method for is_local_pf field */
    void
    setis_local_pf(const bool& local_is_local_pf)
    {
        m_is_local_pf = local_is_local_pf;
    }
    /** \brief Mutator method for is_remote_pf field */
    void
    setis_remote_pf(const bool& local_is_remote_pf)
    {
        m_is_remote_pf = local_is_remote_pf;
    }
    /** \brief Mutator method for seqReq field */
    void
    setseqReq(const RequestPtr& local_seqReq)
    {
        m_seqReq = local_seqReq;
    }
    /** \brief Mutator method for isSeqReqValid field */
    void
    setisSeqReqValid(const bool& local_isSeqReqValid)
    {
        m_isSeqReqValid = local_isSeqReqValid;
    }
    /** \brief Mutator method for state field */
    void
    setstate(const Cache_State& local_state)
    {
        m_state = local_state;
    }
    /** \brief Mutator method for hasUseTimeout field */
    void
    sethasUseTimeout(const bool& local_hasUseTimeout)
    {
        m_hasUseTimeout = local_hasUseTimeout;
    }
    /** \brief Mutator method for dataBlk field */
    void
    setdataBlk(const DataBlock& local_dataBlk)
    {
        m_dataBlk = local_dataBlk;
    }
    /** \brief Mutator method for dataBlkValid field */
    void
    setdataBlkValid(const WriteMask& local_dataBlkValid)
    {
        m_dataBlkValid = local_dataBlkValid;
    }
    /** \brief Mutator method for dataValid field */
    void
    setdataValid(const bool& local_dataValid)
    {
        m_dataValid = local_dataValid;
    }
    /** \brief Mutator method for dataDirty field */
    void
    setdataDirty(const bool& local_dataDirty)
    {
        m_dataDirty = local_dataDirty;
    }
    /** \brief Mutator method for dataMaybeDirtyUpstream field */
    void
    setdataMaybeDirtyUpstream(const bool& local_dataMaybeDirtyUpstream)
    {
        m_dataMaybeDirtyUpstream = local_dataMaybeDirtyUpstream;
    }
    /** \brief Mutator method for dataUnique field */
    void
    setdataUnique(const bool& local_dataUnique)
    {
        m_dataUnique = local_dataUnique;
    }
    /** \brief Mutator method for dataToBeInvalid field */
    void
    setdataToBeInvalid(const bool& local_dataToBeInvalid)
    {
        m_dataToBeInvalid = local_dataToBeInvalid;
    }
    /** \brief Mutator method for dataToBeSharedClean field */
    void
    setdataToBeSharedClean(const bool& local_dataToBeSharedClean)
    {
        m_dataToBeSharedClean = local_dataToBeSharedClean;
    }
    /** \brief Mutator method for dir_sharers field */
    void
    setdir_sharers(const NetDest& local_dir_sharers)
    {
        m_dir_sharers = local_dir_sharers;
    }
    /** \brief Mutator method for dir_owner field */
    void
    setdir_owner(const MachineID& local_dir_owner)
    {
        m_dir_owner = local_dir_owner;
    }
    /** \brief Mutator method for dir_ownerExists field */
    void
    setdir_ownerExists(const bool& local_dir_ownerExists)
    {
        m_dir_ownerExists = local_dir_ownerExists;
    }
    /** \brief Mutator method for dir_ownerIsExcl field */
    void
    setdir_ownerIsExcl(const bool& local_dir_ownerIsExcl)
    {
        m_dir_ownerIsExcl = local_dir_ownerIsExcl;
    }
    /** \brief Mutator method for doCacheFill field */
    void
    setdoCacheFill(const bool& local_doCacheFill)
    {
        m_doCacheFill = local_doCacheFill;
    }
    /** \brief Mutator method for actions field */
    void
    setactions(const TriggerQueue<Cache_Event>& local_actions)
    {
        m_actions = local_actions;
    }
    /** \brief Mutator method for pendAction field */
    void
    setpendAction(const Cache_Event& local_pendAction)
    {
        m_pendAction = local_pendAction;
    }
    /** \brief Mutator method for delayNextAction field */
    void
    setdelayNextAction(const Tick& local_delayNextAction)
    {
        m_delayNextAction = local_delayNextAction;
    }
    /** \brief Mutator method for finalState field */
    void
    setfinalState(const Cache_State& local_finalState)
    {
        m_finalState = local_finalState;
    }
    /** \brief Mutator method for expected_req_resp field */
    void
    setexpected_req_resp(const ExpectedMap<CHIResponseType,CHIDataType>& local_expected_req_resp)
    {
        m_expected_req_resp = local_expected_req_resp;
    }
    /** \brief Mutator method for expected_snp_resp field */
    void
    setexpected_snp_resp(const ExpectedMap<CHIResponseType,CHIDataType>& local_expected_snp_resp)
    {
        m_expected_snp_resp = local_expected_snp_resp;
    }
    /** \brief Mutator method for defer_expected_comp field */
    void
    setdefer_expected_comp(const bool& local_defer_expected_comp)
    {
        m_defer_expected_comp = local_defer_expected_comp;
    }
    /** \brief Mutator method for slicchack1 field */
    void
    setslicchack1(const CHIResponseType& local_slicchack1)
    {
        m_slicchack1 = local_slicchack1;
    }
    /** \brief Mutator method for slicchack2 field */
    void
    setslicchack2(const CHIDataType& local_slicchack2)
    {
        m_slicchack2 = local_slicchack2;
    }
    /** \brief Mutator method for snd_pendEv field */
    void
    setsnd_pendEv(const bool& local_snd_pendEv)
    {
        m_snd_pendEv = local_snd_pendEv;
    }
    /** \brief Mutator method for snd_pendBytes field */
    void
    setsnd_pendBytes(const WriteMask& local_snd_pendBytes)
    {
        m_snd_pendBytes = local_snd_pendBytes;
    }
    /** \brief Mutator method for snd_msgType field */
    void
    setsnd_msgType(const CHIDataType& local_snd_msgType)
    {
        m_snd_msgType = local_snd_msgType;
    }
    /** \brief Mutator method for snd_destination field */
    void
    setsnd_destination(const MachineID& local_snd_destination)
    {
        m_snd_destination = local_snd_destination;
    }
    /** \brief Mutator method for updateDirOnCompAck field */
    void
    setupdateDirOnCompAck(const bool& local_updateDirOnCompAck)
    {
        m_updateDirOnCompAck = local_updateDirOnCompAck;
    }
    /** \brief Mutator method for requestorToBeOwner field */
    void
    setrequestorToBeOwner(const bool& local_requestorToBeOwner)
    {
        m_requestorToBeOwner = local_requestorToBeOwner;
    }
    /** \brief Mutator method for requestorToBeExclusiveOwner field */
    void
    setrequestorToBeExclusiveOwner(const bool& local_requestorToBeExclusiveOwner)
    {
        m_requestorToBeExclusiveOwner = local_requestorToBeExclusiveOwner;
    }
    /** \brief Mutator method for snpNeedsData field */
    void
    setsnpNeedsData(const bool& local_snpNeedsData)
    {
        m_snpNeedsData = local_snpNeedsData;
    }
    /** \brief Mutator method for fwdedState field */
    void
    setfwdedState(const Cache_State& local_fwdedState)
    {
        m_fwdedState = local_fwdedState;
    }
    /** \brief Mutator method for is_req_hazard field */
    void
    setis_req_hazard(const bool& local_is_req_hazard)
    {
        m_is_req_hazard = local_is_req_hazard;
    }
    /** \brief Mutator method for is_repl_hazard field */
    void
    setis_repl_hazard(const bool& local_is_repl_hazard)
    {
        m_is_repl_hazard = local_is_repl_hazard;
    }
    /** \brief Mutator method for is_stale field */
    void
    setis_stale(const bool& local_is_stale)
    {
        m_is_stale = local_is_stale;
    }
    /** \brief Mutator method for pendReqType field */
    void
    setpendReqType(const CHIRequestType& local_pendReqType)
    {
        m_pendReqType = local_pendReqType;
    }
    /** \brief Mutator method for pendReqAllowRetry field */
    void
    setpendReqAllowRetry(const bool& local_pendReqAllowRetry)
    {
        m_pendReqAllowRetry = local_pendReqAllowRetry;
    }
    /** \brief Mutator method for rcvdRetryAck field */
    void
    setrcvdRetryAck(const bool& local_rcvdRetryAck)
    {
        m_rcvdRetryAck = local_rcvdRetryAck;
    }
    /** \brief Mutator method for rcvdRetryCredit field */
    void
    setrcvdRetryCredit(const bool& local_rcvdRetryCredit)
    {
        m_rcvdRetryCredit = local_rcvdRetryCredit;
    }
    /** \brief Mutator method for pendReqAccAddr field */
    void
    setpendReqAccAddr(const Addr& local_pendReqAccAddr)
    {
        m_pendReqAccAddr = local_pendReqAccAddr;
    }
    /** \brief Mutator method for pendReqAccSize field */
    void
    setpendReqAccSize(const int& local_pendReqAccSize)
    {
        m_pendReqAccSize = local_pendReqAccSize;
    }
    /** \brief Mutator method for pendReqDest field */
    void
    setpendReqDest(const NetDest& local_pendReqDest)
    {
        m_pendReqDest = local_pendReqDest;
    }
    /** \brief Mutator method for pendReqD2OrigReq field */
    void
    setpendReqD2OrigReq(const bool& local_pendReqD2OrigReq)
    {
        m_pendReqD2OrigReq = local_pendReqD2OrigReq;
    }
    /** \brief Mutator method for pendReqRetToSrc field */
    void
    setpendReqRetToSrc(const bool& local_pendReqRetToSrc)
    {
        m_pendReqRetToSrc = local_pendReqRetToSrc;
    }
    /** \brief Mutator method for wakeup_pending_req field */
    void
    setwakeup_pending_req(const bool& local_wakeup_pending_req)
    {
        m_wakeup_pending_req = local_wakeup_pending_req;
    }
    /** \brief Mutator method for wakeup_pending_snp field */
    void
    setwakeup_pending_snp(const bool& local_wakeup_pending_snp)
    {
        m_wakeup_pending_snp = local_wakeup_pending_snp;
    }
    /** \brief Mutator method for wakeup_pending_tgr field */
    void
    setwakeup_pending_tgr(const bool& local_wakeup_pending_tgr)
    {
        m_wakeup_pending_tgr = local_wakeup_pending_tgr;
    }
    void print(std::ostream& out) const;
  //private:
    /** Allocated in the request table */
    bool m_is_req_tbe;
    /** Allocated in the snoop table */
    bool m_is_snp_tbe;
    /** Allocated in the replacements table */
    bool m_is_repl_tbe;
    /** Allocated in the DVM table */
    bool m_is_dvm_tbe;
    /** Allocated in the DVM snoop table */
    bool m_is_dvm_snp_tbe;
    /** Slot in the storage tracker occupied by this entry */
    int m_storSlot;
    /** Line address for this TBE */
    Addr m_addr;
    /** Access address for Load/Store/WriteUniquePtl; otherwisse == addr */
    Addr m_accAddr;
    /** Access size for Load/Store/WriteUniquePtl; otherwisse == blockSize */
    int m_accSize;
    /** Request type that initiated this transaction */
    CHIRequestType m_reqType;
    /** Requestor ID */
    MachineID m_requestor;
    /** Requestor to receive data on fwding snoops */
    MachineID m_fwdRequestor;
    /** Use DMT for this transaction */
    bool m_use_DMT;
    /** Use DCT for this transaction */
    bool m_use_DCT;
    /** Request generated by a local prefetcher */
    bool m_is_local_pf;
    /** Request generated a prefetcher in another cache */
    bool m_is_remote_pf;
    /** Pointer to original request from CPU/sequencer */
    RequestPtr m_seqReq;
    /** Set if seqReq is valid (not nullptr) */
    bool m_isSeqReqValid;
    /** SLICC line state */
    Cache_State m_state;
    /** Line is locked under store/use timeout */
    bool m_hasUseTimeout;
    /** Local copy of the line */
    DataBlock m_dataBlk;
    /** Marks which bytes in the DataBlock are valid */
    WriteMask m_dataBlkValid;
    /** Local copy is valid */
    bool m_dataValid;
    /** Local copy is dirtry */
    bool m_dataDirty;
    /** Line maybe dirty upstream */
    bool m_dataMaybeDirtyUpstream;
    /** Line is unique either locally or upsatream */
    bool m_dataUnique;
    /** Local copy will be invalidated at the end of transaction */
    bool m_dataToBeInvalid;
    /** Local copy will become SC at the end of transaction */
    bool m_dataToBeSharedClean;
    /** Upstream controllers that have the line (includes owner) */
    NetDest m_dir_sharers;
    /** Owner ID */
    MachineID m_dir_owner;
    /** Owner ID is valid */
    bool m_dir_ownerExists;
    /** Owner is UD or UC; SD otherwise */
    bool m_dir_ownerIsExcl;
    /** Write valid data to the cache when completing transaction */
    bool m_doCacheFill;
    /** List of actions */
    TriggerQueue<Cache_Event> m_actions;
    /** Current pending action */
    Cache_Event m_pendAction;
    /** Delay next action until given tick */
    Tick m_delayNextAction;
    /** Final state; set when pendAction==Final */
    Cache_State m_finalState;
    ExpectedMap<CHIResponseType,CHIDataType> m_expected_req_resp;
    ExpectedMap<CHIResponseType,CHIDataType> m_expected_snp_resp;
    bool m_defer_expected_comp;
    CHIResponseType m_slicchack1;
    CHIDataType m_slicchack2;
    /** Is there a pending tx event ? */
    bool m_snd_pendEv;
    /** Which bytes are pending transmission */
    WriteMask m_snd_pendBytes;
    /** Type of message being sent */
    CHIDataType m_snd_msgType;
    /** Data destination */
    MachineID m_snd_destination;
    /** Update directory on CompAck */
    bool m_updateDirOnCompAck;
    /** Sets dir_ownerExists */
    bool m_requestorToBeOwner;
    /** Sets dir_ownerIsExcl */
    bool m_requestorToBeExclusiveOwner;
    /** Set if snoop requires data as response */
    bool m_snpNeedsData;
    /** State of CompData sent due to a forwarding snoop */
    Cache_State m_fwdedState;
    /** Snoop hazard with an outstanding request */
    bool m_is_req_hazard;
    /** Snoop hazard with an outstanding writeback request */
    bool m_is_repl_hazard;
    /** Request is now stale because of a snoop hazard */
    bool m_is_stale;
    /** Sent request type */
    CHIRequestType m_pendReqType;
    /** Sent request can be retried */
    bool m_pendReqAllowRetry;
    /** Received a RetryAck */
    bool m_rcvdRetryAck;
    /** Received a PCrdGrant */
    bool m_rcvdRetryCredit;
    Addr m_pendReqAccAddr;
    int m_pendReqAccSize;
    NetDest m_pendReqDest;
    bool m_pendReqD2OrigReq;
    bool m_pendReqRetToSrc;
    bool m_wakeup_pending_req;
    bool m_wakeup_pending_snp;
    bool m_wakeup_pending_tgr;
};
inline ::std::ostream&
operator<<(::std::ostream& out, const Cache_TBE& obj)
{
    obj.print(out);
    out << ::std::flush;
    return out;
}

} // namespace ruby
} // namespace gem5

#endif // __Cache_TBE_HH__
