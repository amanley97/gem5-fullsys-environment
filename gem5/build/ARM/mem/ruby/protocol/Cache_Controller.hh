/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /home/a599m019/gem5-fullsys-enviroment/gem5/src/mem/slicc/symbols/StateMachine.py:532
 */

// Created by slicc definition of Module "Cache coherency protocol"

#ifndef __Cache_CONTROLLER_HH__
#define __Cache_CONTROLLER_HH__

#include <iostream>
#include <sstream>
#include <string>

#include "mem/ruby/common/Consumer.hh"
#include "mem/ruby/protocol/TransitionResult.hh"
#include "mem/ruby/protocol/Types.hh"
#include "mem/ruby/slicc_interface/AbstractController.hh"
#include "params/Cache_Controller.hh"

#include "mem/ruby/protocol/PerfectCacheMemory.hh"
#include "mem/ruby/protocol/TimerTable.hh"
#include "mem/ruby/protocol/TBETable.hh"
#include "mem/ruby/protocol/TBEStorage.hh"
#include "mem/ruby/protocol/TriggerQueue.hh"
#include "mem/ruby/protocol/NetDest.hh"
namespace gem5
{

namespace ruby
{

extern std::stringstream Cache_transitionComment;

class Cache_Controller : public AbstractController
{
  public:
    typedef Cache_ControllerParams Params;
    Cache_Controller(const Params &p);
    static int getNumControllers();
    void init();

    MessageBuffer *getMandatoryQueue() const;
    MessageBuffer *getMemReqQueue() const;
    MessageBuffer *getMemRespQueue() const;
    void initNetQueues();

    void print(std::ostream& out) const;
    void wakeup();
    void resetStats();
    void regStats();
    void collateStats();

    void recordCacheTrace(int cntrl, CacheRecorder* tr);
    Sequencer* getCPUSequencer() const;
    DMASequencer* getDMASequencer() const;
    GPUCoalescer* getGPUCoalescer() const;

    bool functionalReadBuffers(PacketPtr&);
    bool functionalReadBuffers(PacketPtr&, WriteMask&);
    int functionalWriteBuffers(PacketPtr&);

    void countTransition(Cache_State state, Cache_Event event);
    void possibleTransition(Cache_State state, Cache_Event event);
    uint64_t getEventCount(Cache_Event event);
    bool isPossible(Cache_State state, Cache_Event event);
    uint64_t getTransitionCount(Cache_State state, Cache_Event event);

private:
    Sequencer* m_sequencer_ptr;
    CacheMemory* m_cache_ptr;
    Cycles m_read_hit_latency;
    Cycles m_read_miss_latency;
    Cycles m_write_fe_latency;
    Cycles m_write_be_latency;
    Cycles m_fill_latency;
    Cycles m_snp_latency;
    Cycles m_snp_inv_latency;
    bool m_wait_for_cache_wr;
    Cycles m_allocation_latency;
    Cycles m_request_latency;
    Cycles m_response_latency;
    Cycles m_snoop_latency;
    Cycles m_data_latency;
    Cycles m_dvm_ext_tlbi_latency;
    int m_sc_lock_base_latency_cy;
    int m_sc_lock_multiplier_inc;
    int m_sc_lock_multiplier_decay;
    int m_sc_lock_multiplier_max;
    bool m_sc_lock_enabled;
    Cycles m_stall_recycle_lat;
    bool m_send_evictions;
    int m_number_of_snoop_TBEs;
    int m_number_of_repl_TBEs;
    int m_number_of_DVM_TBEs;
    int m_number_of_DVM_snoop_TBEs;
    bool m_unify_repl_TBEs;
    bool m_dealloc_wait_for_tag;
    int m_data_channel_size;
    bool m_is_HN;
    bool m_enable_DMT;
    bool m_enable_DMT_early_dealloc;
    bool m_enable_DCT;
    bool m_comp_wu;
    Cycles m_comp_wu_latency;
    bool m_alloc_on_readshared;
    bool m_alloc_on_readunique;
    bool m_alloc_on_readonce;
    bool m_alloc_on_writeback;
    bool m_alloc_on_seq_acc;
    bool m_alloc_on_seq_line_write;
    bool m_dealloc_on_unique;
    bool m_dealloc_on_shared;
    bool m_dealloc_backinv_unique;
    bool m_dealloc_backinv_shared;
    bool m_fwd_unique_on_readshared;
    bool m_allow_SD;
    bool m_throttle_req_on_retry;
    bool m_use_prefetcher;
    MessageBuffer* m_reqOut_ptr;
    MessageBuffer* m_snpOut_ptr;
    MessageBuffer* m_rspOut_ptr;
    MessageBuffer* m_datOut_ptr;
    MessageBuffer* m_reqIn_ptr;
    MessageBuffer* m_snpIn_ptr;
    MessageBuffer* m_rspIn_ptr;
    MessageBuffer* m_datIn_ptr;
    MessageBuffer* m_mandatoryQueue_ptr;
    MessageBuffer* m_triggerQueue_ptr;
    MessageBuffer* m_retryTriggerQueue_ptr;
    MessageBuffer* m_reqRdy_ptr;
    MessageBuffer* m_snpRdy_ptr;
    MessageBuffer* m_replTriggerQueue_ptr;
    MessageBuffer* m_prefetchQueue_ptr;
    bool m_upstream_prefetch_trains_prefetcher;
    TransitionResult doTransition(Cache_Event event,
                                  Cache_CacheEntry* m_cache_entry_ptr,
                                  Cache_TBE* m_tbe_ptr,
                                  Addr addr);

    TransitionResult doTransitionWorker(Cache_Event event,
                                        Cache_State state,
                                        Cache_State& next_state,
                                        Cache_TBE*& m_tbe_ptr,
                                        Cache_CacheEntry*& m_cache_entry_ptr,
                                        Addr addr);

    Cache_Event m_curTransitionEvent;
    Cache_State m_curTransitionNextState;

    Cache_Event curTransitionEvent() { return m_curTransitionEvent; }
    Cache_State curTransitionNextState() { return m_curTransitionNextState; }

    int m_counters[Cache_State_NUM][Cache_Event_NUM];
    int m_event_counters[Cache_Event_NUM];
    bool m_possible[Cache_State_NUM][Cache_Event_NUM];

    static std::vector<statistics::Vector *> eventVec;
    static std::vector<std::vector<statistics::Vector *> > transVec;
    static int m_num_controllers;

    // Internal functions
    void notifyPfHit(const RequestPtr& param_req, const bool& param_is_read, const DataBlock& param_blk);
    void notifyPfMiss(const RequestPtr& param_req, const bool& param_is_read, const DataBlock& param_blk);
    void notifyPfFill(const RequestPtr& param_req, const DataBlock& param_blk, const bool& param_from_pf);
    void notifyPfEvict(const Addr& param_blkAddr, const bool& param_hwPrefetched);
    void notifyPfComplete(const Addr& param_addr);
    Cache_CacheEntry* getCacheEntry(const Addr& param_addr);
    Cache_CacheEntry* nullCacheEntry();
    Cache_DirEntry* getDirEntry(const Addr& param_addr);
    Cache_State getState(Cache_TBE* param_tbe, Cache_CacheEntry* param_cache_entry, const Addr& param_addr);
    void setState(Cache_TBE* param_tbe, Cache_CacheEntry* param_cache_entry, const Addr& param_addr, const Cache_State& param_state);
    Cache_TBE* nullTBE();
    Cache_TBE* getDvmTBE(const Addr& param_txnId);
    Cache_TBE* getCurrentActiveTBE(const Addr& param_addr);
    AccessPermission getAccessPermission(const Addr& param_addr);
    void setAccessPermission(Cache_CacheEntry* param_cache_entry, const Addr& param_addr, const Cache_State& param_state);
    void functionalRead(const Addr& param_addr, Packet* param_pkt, WriteMask& param_mask);
    int functionalWrite(const Addr& param_addr, Packet* param_pkt);
    Cycles mandatoryQueueLatency(const RubyRequestType& param_type);
    Cycles tagLatency(const bool& param_from_sequencer);
    Cycles dataLatency();
    bool inCache(const Addr& param_addr);
    bool hasBeenPrefetched(const Addr& param_addr);
    bool inMissQueue(const Addr& param_addr);
    void notifyCoalesced(const Addr& param_addr, const RubyRequestType& param_type, const RequestPtr& param_req, const DataBlock& param_data_blk, const bool& param_was_miss);
    void clearExpectedReqResp(Cache_TBE* param_tbe);
    void clearExpectedSnpResp(Cache_TBE* param_tbe);
    void initializeTBE(Cache_TBE* param_tbe, const Addr& param_addr, const int& param_storSlot);
    Cache_TBE* allocateRequestTBE(const Addr& param_addr, const CHIRequestMsg& param_in_msg);
    Cache_TBE* allocateDvmRequestTBE(const Addr& param_txnId, const CHIRequestMsg& param_in_msg);
    Cache_TBE* allocateSnoopTBE(const Addr& param_addr, const CHIRequestMsg& param_in_msg);
    Cache_TBE* allocateDvmSnoopTBE(const Addr& param_txnId, const CHIRequestMsg& param_in_msg);
    Cache_TBE* _allocateReplacementTBE(const Addr& param_addr, const int& param_storSlot);
    Cache_TBE* allocateReplacementTBE(const Addr& param_addr);
    Cache_TBE* allocateReplacementTBEOnSlot(const Addr& param_addr, const int& param_slot);
    Cache_TBE* getHazardTBE(Cache_TBE* param_tbe);
    void scheduleSendData(Cache_TBE* param_tbe, const int& param_when);
    void setupPendingSend(Cache_TBE* param_tbe);
    void setupPendingPartialSend(Cache_TBE* param_tbe);
    void prepareRequest(Cache_TBE* param_tbe, const CHIRequestType& param_type, CHIRequestMsg& param_out_msg);
    void allowRequestRetry(Cache_TBE* param_tbe, CHIRequestMsg& param_out_msg);
    void prepareRequestRetry(Cache_TBE* param_tbe, CHIRequestMsg& param_out_msg);
    void prepareRequestRetryDVM(Cache_TBE* param_tbe, CHIRequestMsg& param_out_msg);
    void enqueueDoRetry(Cache_TBE* param_tbe);
    void processRetryQueue();
    void printResources();
    bool needCacheEntry(const CHIRequestType& param_req_type, Cache_CacheEntry* param_cache_entry, Cache_DirEntry* param_dir_entry, const bool& param_is_prefetch);
    bool needDeallocCacheEntry(const CHIRequestType& param_req_type);
    bool upstreamHasUnique(const Cache_State& param_state);
    bool upstreamHasShared(const Cache_State& param_state);
    void printTBEState(Cache_TBE* param_tbe);
    void printDvmTBEState(Cache_TBE* param_tbe);
    MachineID getMiscNodeMachine();
    void copyCacheAndDir(Cache_CacheEntry* param_cache_entry, Cache_DirEntry* param_dir_entry, Cache_TBE* param_tbe, const Cache_State& param_initialState);
    void copyCacheAndDirTBEs(Cache_TBE* param_src, Cache_TBE* param_dst);
    void deallocateReqTBE(Cache_TBE* param_tbe);
    void deallocateSnpTBE(Cache_TBE* param_tbe);
    void deallocateReplacementTBE(Cache_TBE* param_tbe);
    void deallocateDvmTBE(Cache_TBE* param_tbe);
    void deallocateDvmSnoopTBE(Cache_TBE* param_tbe);
    void setDataToBeStates(Cache_TBE* param_tbe);
    void setExpectedForInvSnoop(Cache_TBE* param_tbe, const bool& param_expectCleanWB);
    Cache_State makeFinalStateHelper(const Cache_State& param_cs, const Cache_State& param_ds);
    Cache_State makeFinalState(Cache_TBE* param_tbe, Cache_CacheEntry* param_cache_entry, Cache_DirEntry* param_dir_entry);
    Cache_State getNextState(const Addr& param_address);
    int scLockLatency();
    void scLockIncLatency();
    void scLockDecayLatency();
    void clearPendingAction(Cache_TBE* param_tbe);
    bool isReadReqType(const CHIRequestType& param_type);
    bool isWriteReqType(const CHIRequestType& param_type);
    Cache_Event reqToEvent(const CHIRequestType& param_type, const bool& param_is_prefetch);
    Cache_Event respToEvent(const CHIResponseType& param_type, Cache_TBE* param_tbe);
    Cache_Event dataToEvent(const CHIDataType& param_type);
    Cache_Event snpToEvent(const CHIRequestType& param_type);
    void recordRequestType(const Cache_RequestType& param_request_type, const Addr& param_addr);
    bool _checkResourceAvailable(const Cache_RequestType& param_request_type, const Addr& param_addr);
    bool checkResourceAvailable(const Cache_RequestType& param_request_type, const Addr& param_addr);
    bool rspInPort_rsc_stall_handler();
    bool datInPort_rsc_stall_handler();
    bool snpRdyPort_rsc_stall_handler();
    void wakeupPendingSnps(Cache_TBE* param_tbe);
    bool retryTriggerInPort_rsc_stall_handler();
    bool triggerInPort_rsc_stall_handler();
    void wakeupPendingTgrs(Cache_TBE* param_tbe);
    bool reqRdyPort_rsc_stall_handler();
    void wakeupPendingReqs(Cache_TBE* param_tbe);
    bool reqInPort_rsc_stall_handler();
    void processNextState(const Addr& param_address, Cache_TBE* param_tbe, Cache_CacheEntry* param_cache_entry);

    // Set and Reset for cache_entry variable
    void set_cache_entry(Cache_CacheEntry*& m_cache_entry_ptr, AbstractCacheEntry* m_new_cache_entry);
    void unset_cache_entry(Cache_CacheEntry*& m_cache_entry_ptr);

    // Set and Reset for tbe variable
    void set_tbe(Cache_TBE*& m_tbe_ptr, Cache_TBE* m_new_tbe);
    void unset_tbe(Cache_TBE*& m_tbe_ptr);

    // Actions
    /** \brief  */
    void AllocateTBE_Request(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void AllocateTBE_Request_WithCredit(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void AllocateTBE_Snoop(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void AllocateTBE_DvmSnoop(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void AllocateTBE_SeqRequest(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void AllocateTBE_SeqDvmRequest(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief Allocate TBE for prefetch request */
    void AllocateTBE_PfRequest(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_Request(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_Request_DVM(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_Request_Stale(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_Snoop(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_Snoop_Hazard(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void RestoreFromHazard(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_Replacement(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void StallRequest(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void StallSnoop(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void StallLocalEviction(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void StallSnoop_NoTBE(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void StallActionOnHazard(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_ReadShared_Miss(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_ReadShared_Hit(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_ReadShared_HitUpstream(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_ReadShared_HitUpstream_NoOwner(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_ReadOnce_Miss(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_ReadOnce_Hit(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_ReadOnce_HitUpstream(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_ReadUnique_Miss(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_ReadUnique_AutoUpgrade(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_ReadUnique_Upgrade(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_ReadUnique_Hit(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_ReadUnique_HitUpstream(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_ReadUnique_Hit_InvUpstream(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_CleanUnique(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_CleanUnique_Stale(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Finish_CleanUnique(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_LoadHit(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_LoadMiss(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_StoreHit(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_StoreMiss(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_StoreUpgrade(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_WriteUnique_LocalWrite(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_WriteUnique_LocalWrite_AfterUpgrade(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_WriteUnique_Writeback(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_WriteUnique_PartialWrite(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_WriteUnique_Forward(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_CopyBack(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_CopyBack_Stale(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Finish_CopyBack_Stale(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_Evict(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_MaintainCoherence(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_InvalidationSnoop(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_SnpShared(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_SnpOnce(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_Replacement_Evict_BackInvalidte(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_Replacement_Evict(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_Replacement_JustDrop(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_Replacement_WB_BackInvalidate(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_Replacement_WB(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_ReadShared(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_ReadNoSnp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_ReadNoSnpDMT(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_ReadOnce(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_ReadUnique(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_CleanUnique(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_Evict(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_InvSnpResp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_WriteBackOrWriteEvict(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_WriteCleanFull(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_WriteNoSnp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_WriteNoSnp_Partial(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_WriteUnique(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_SnpCleanInvalid(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_SnpCleanInvalid_NoReq(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_SnpUnique(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_SnpUnique_RetToSrc(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_SnpUniqueFwd(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_SnpShared(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_SnpSharedFwd_ToOwner(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_SnpSharedFwd_ToSharer(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_SnpOnce(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_SnpOnceFwd(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void ExpectNCBWrData(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void ExpectCompAck(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void ExpectComp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Receive_ReqDataResp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Receive_RespSepDataFromCompData(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Receive_RespSepData(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Receive_ReadReceipt(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Receive_SnpDataResp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void UpdateDirState_FromReqDataResp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void UpdateDirState_FromSnpDataResp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void UpdateDataState_FromReqDataResp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void UpdateDataState_FromWUDataResp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void UpdateDataState_FromCUResp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void UpdateDataState_FromSnpDataResp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void UpdateDirState_FromReqResp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void UpdateDirState_FromSnpResp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Receive_ReqResp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Receive_ReqResp_WUNeedComp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Receive_ReqResp_WUComp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Receive_SnpResp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Receive_RetryAck(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Receive_PCrdGrant(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_Retry(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_Retry_DVM(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Receive_RetryAck_Hazard(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Receive_PCrdGrant_Hazard(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_Retry_Hazard(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_CompData(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_WBData(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_WUData(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void CheckWUComp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_SnpRespData(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_CompData_SnpUniqueFwd(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_CompData_SnpSharedFwd(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_CompData_SnpNSDFwd(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_CompData_SnpOnceFwd(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_SnpRespDataFwded(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_FwdSnpResp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_Data(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_RespSepData(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_CompI(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_CompUC(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_CompUC_Stale(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_CompAck(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_CompI_Stale(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_CompDBIDResp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_CompDBIDResp_Stale(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_DBIDResp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_Comp_WU(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_SnpRespI(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_RetryAck(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_PCrdGrant(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void CheckUpgrade_FromStoreOrRU(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void CheckUpgrade_FromCU(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Finalize_UpdateCacheFromTBE(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Finalize_UpdateDirectoryFromTBE(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Deallocate_CacheBlock(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Allocate_DirEntry(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Deallocate_DirEntry(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void CheckCacheFill(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Finalize_DeallocateRequest(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Finalize_DeallocateDvmRequest(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Finalize_DeallocateDvmSnoop(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Pop_ReqRdyQueue(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Pop_RespInQueue(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Pop_SnoopRdyQueue(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Pop_DataInQueue(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Pop_TriggerQueue(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Pop_ReplTriggerQueue(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Pop_RetryTriggerQueue(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Pop_SnpInPort(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Pop_SeqInPort(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void ProcessNextState(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void ProcessNextState_ClearPending(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Callback_LoadHit(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Callback_StoreHit(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Callback_ExpressPrefetchHit(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Callback_Miss(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Unset_Timeout_TBE(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Unset_Timeout_Cache(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Callback_WriteUnique(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Profile_Miss(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Profile_Hit(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Profile_Fill(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Profile_Eviction(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Profile_OutgoingStart(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Profile_OutgoingEnd_DataResp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Profile_OutgoingEnd_DatalessResp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void TagArrayRead(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void TagArrayWrite(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void DataArrayRead(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void DataArrayWrite(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void ReadHitPipe(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void ReadMissPipe(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void WriteFEPipe(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void WriteBEPipe(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void FillPipe(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void SnpSharedPipe(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void SnpInvPipe(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void SnpOncePipe(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_DvmTlbi(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Try_Send_DvmSync(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Try_Send_Pending_DvmSync(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_DvmSync(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_DvmTlbi_NCBWrData(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Send_DvmSync_NCBWrData(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void DvmTlbi_CompCallback(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void DvmSync_CompCallback(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Initiate_DvmSnoop(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void DvmExtTlbi_EnqueueSnpResp(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void DvmExtSync_TriggerCallback(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Profile_OutgoingStart_DVM(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);
    /** \brief  */
    void Profile_OutgoingEnd_DVM(Cache_TBE*& m_tbe_ptr, Cache_CacheEntry*& m_cache_entry_ptr, Addr addr);

    // Objects
    int* m_blockSize_ptr;
    PerfectCacheMemory<Cache_DirEntry>* m_directory_ptr;
    TimerTable* m_useTimerTable_ptr;
    int* m_sc_lock_multiplier_ptr;
    TBETable<Cache_TBE>* m_TBEs_ptr;
    TBEStorage* m_storTBEs_ptr;
    TBETable<Cache_TBE>* m_replTBEs_ptr;
    TBEStorage* m_storReplTBEs_ptr;
    TBETable<Cache_TBE>* m_snpTBEs_ptr;
    TBEStorage* m_storSnpTBEs_ptr;
    TBETable<Cache_TBE>* m_dvmTBEs_ptr;
    TBEStorage* m_storDvmTBEs_ptr;
    TBETable<Cache_TBE>* m_dvmSnpTBEs_ptr;
    TBEStorage* m_storDvmSnpTBEs_ptr;
    TriggerQueue<Cache_Event>* m_dvmPendingNonSyncsBlockingSync_ptr;
    bool* m_dvmHasPendingSyncOp_ptr;
    Addr* m_dvmPendingSyncOp_ptr;
    TriggerQueue<Cache_RetryQueueEntry>* m_retryQueue_ptr;
    NetDest* m_destsWaitingRetry_ptr;
};

} // namespace ruby
} // namespace gem5

#endif // __Cache_CONTROLLER_H__
