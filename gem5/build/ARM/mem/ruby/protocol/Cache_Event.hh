/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /home/a599m019/gem5-fullsys-enviroment/gem5/src/mem/slicc/symbols/Type.py:643
 */

#ifndef __Cache_Event_HH__
#define __Cache_Event_HH__

#include <iostream>
#include <string>

namespace gem5
{

namespace ruby
{


// Class definition
/** \enum Cache_Event
 *  \brief No description avaliable
 */
enum Cache_Event {
    Cache_Event_FIRST,
    Cache_Event_AllocRequest = Cache_Event_FIRST, /**< Allocates a TBE for a request. Triggers a retry if table is full */
    Cache_Event_AllocRequestWithCredit, /**< Allocates a TBE for a request. Always succeeds. */
    Cache_Event_AllocSeqRequest, /**< Allocates a TBE for a sequencer request. Stalls requests if table is full */
    Cache_Event_AllocSeqDvmRequest, /**< Allocates a TBE for a sequencer DVM request. Stalls requests if table is full */
    Cache_Event_AllocPfRequest, /**< Allocates a TBE for a prefetch request. Stalls requests if table is full */
    Cache_Event_AllocSnoop, /**< Allocates a TBE for a snoop. Stalls snoop if table is full */
    Cache_Event_AllocDvmSnoop, /**< Allocated a TBE for a DVM snoop. Stalls snoop if table is full */
    Cache_Event_Load, /**<  */
    Cache_Event_Store, /**<  */
    Cache_Event_Prefetch, /**<  */
    Cache_Event_ReadShared, /**<  */
    Cache_Event_ReadNotSharedDirty, /**<  */
    Cache_Event_ReadUnique, /**<  */
    Cache_Event_ReadUnique_PoC, /**<  */
    Cache_Event_ReadOnce, /**<  */
    Cache_Event_CleanUnique, /**<  */
    Cache_Event_Evict, /**<  */
    Cache_Event_WriteBackFull, /**<  */
    Cache_Event_WriteEvictFull, /**<  */
    Cache_Event_WriteCleanFull, /**<  */
    Cache_Event_WriteUnique, /**<  */
    Cache_Event_WriteUniquePtl_PoC, /**<  */
    Cache_Event_WriteUniqueFull_PoC, /**<  */
    Cache_Event_WriteUniqueFull_PoC_Alloc, /**<  */
    Cache_Event_SnpCleanInvalid, /**<  */
    Cache_Event_SnpShared, /**<  */
    Cache_Event_SnpSharedFwd, /**<  */
    Cache_Event_SnpNotSharedDirtyFwd, /**<  */
    Cache_Event_SnpUnique, /**<  */
    Cache_Event_SnpUniqueFwd, /**<  */
    Cache_Event_SnpOnce, /**<  */
    Cache_Event_SnpOnceFwd, /**<  */
    Cache_Event_SnpStalled, /**<  */
    Cache_Event_DvmTlbi_Initiate, /**<  */
    Cache_Event_DvmSync_Initiate, /**<  */
    Cache_Event_DvmSync_ExternCompleted, /**<  */
    Cache_Event_CompAck, /**<  */
    Cache_Event_Comp_I, /**<  */
    Cache_Event_Comp_UC, /**<  */
    Cache_Event_Comp_SC, /**<  */
    Cache_Event_CompDBIDResp, /**<  */
    Cache_Event_DBIDResp, /**<  */
    Cache_Event_Comp, /**<  */
    Cache_Event_ReadReceipt, /**<  */
    Cache_Event_RespSepData, /**<  */
    Cache_Event_SnpResp_I, /**<  */
    Cache_Event_SnpResp_I_Fwded_UC, /**<  */
    Cache_Event_SnpResp_I_Fwded_UD_PD, /**<  */
    Cache_Event_SnpResp_SC, /**<  */
    Cache_Event_SnpResp_SC_Fwded_SC, /**<  */
    Cache_Event_SnpResp_SC_Fwded_SD_PD, /**<  */
    Cache_Event_SnpResp_UC_Fwded_I, /**<  */
    Cache_Event_SnpResp_UD_Fwded_I, /**<  */
    Cache_Event_SnpResp_SC_Fwded_I, /**<  */
    Cache_Event_SnpResp_SD_Fwded_I, /**<  */
    Cache_Event_RetryAck, /**<  */
    Cache_Event_RetryAck_PoC, /**<  */
    Cache_Event_PCrdGrant, /**<  */
    Cache_Event_PCrdGrant_PoC, /**<  */
    Cache_Event_RetryAck_Hazard, /**<  */
    Cache_Event_RetryAck_PoC_Hazard, /**<  */
    Cache_Event_PCrdGrant_Hazard, /**<  */
    Cache_Event_PCrdGrant_PoC_Hazard, /**<  */
    Cache_Event_SnpDvmOpSync_P1, /**<  */
    Cache_Event_SnpDvmOpSync_P2, /**<  */
    Cache_Event_SnpDvmOpNonSync_P1, /**<  */
    Cache_Event_SnpDvmOpNonSync_P2, /**<  */
    Cache_Event_CompData_I, /**<  */
    Cache_Event_CompData_UC, /**<  */
    Cache_Event_CompData_SC, /**<  */
    Cache_Event_CompData_UD_PD, /**<  */
    Cache_Event_CompData_SD_PD, /**<  */
    Cache_Event_DataSepResp_UC, /**<  */
    Cache_Event_CBWrData_I, /**<  */
    Cache_Event_CBWrData_UC, /**<  */
    Cache_Event_CBWrData_SC, /**<  */
    Cache_Event_CBWrData_UD_PD, /**<  */
    Cache_Event_CBWrData_SD_PD, /**<  */
    Cache_Event_NCBWrData, /**<  */
    Cache_Event_SnpRespData_I, /**<  */
    Cache_Event_SnpRespData_I_PD, /**<  */
    Cache_Event_SnpRespData_SC, /**<  */
    Cache_Event_SnpRespData_SC_PD, /**<  */
    Cache_Event_SnpRespData_SD, /**<  */
    Cache_Event_SnpRespData_UC, /**<  */
    Cache_Event_SnpRespData_UD, /**<  */
    Cache_Event_SnpRespData_SC_Fwded_SC, /**<  */
    Cache_Event_SnpRespData_SC_Fwded_SD_PD, /**<  */
    Cache_Event_SnpRespData_SC_PD_Fwded_SC, /**<  */
    Cache_Event_SnpRespData_I_Fwded_SD_PD, /**<  */
    Cache_Event_SnpRespData_I_PD_Fwded_SC, /**<  */
    Cache_Event_SnpRespData_I_Fwded_SC, /**<  */
    Cache_Event_Evict_Stale, /**<  */
    Cache_Event_WriteBackFull_Stale, /**<  */
    Cache_Event_WriteEvictFull_Stale, /**<  */
    Cache_Event_WriteCleanFull_Stale, /**<  */
    Cache_Event_CleanUnique_Stale, /**<  */
    Cache_Event_CheckCacheFill, /**< Check if need to write or update the cache and trigger any necessary allocation and evictions */
    Cache_Event_Local_Eviction, /**< Evicts/WB the local copy of the line */
    Cache_Event_LocalHN_Eviction, /**< Local_Eviction triggered when is HN */
    Cache_Event_Global_Eviction, /**< Local_Eviction + back-invalidate line in all upstream requesters */
    Cache_Event_TagArrayRead, /**< Read the cache and directory tag array */
    Cache_Event_TagArrayWrite, /**< Write the cache and directory tag array */
    Cache_Event_DataArrayRead, /**< Read the cache data array */
    Cache_Event_DataArrayWrite, /**< Write the cache data array */
    Cache_Event_DataArrayWriteOnFill, /**< Write the cache data array (cache fill) */
    Cache_Event_ReadHitPipe, /**< Latency of reads served from local cache */
    Cache_Event_ReadMissPipe, /**< Latency of reads not served from local cache */
    Cache_Event_WriteFEPipe, /**< Front-end latency of write requests */
    Cache_Event_WriteBEPipe, /**< Back-end latency of write requests */
    Cache_Event_FillPipe, /**< Cache fill latency */
    Cache_Event_SnpSharedPipe, /**< Latency for SnpShared requests */
    Cache_Event_SnpInvPipe, /**< Latency for SnpUnique and SnpCleanInv requests */
    Cache_Event_SnpOncePipe, /**< Latency for SnpOnce requests */
    Cache_Event_SendReadShared, /**< Send a ReadShared or ReadNotSharedDirty is allow_SD is false */
    Cache_Event_SendReadOnce, /**< Send a ReadOnce */
    Cache_Event_SendReadNoSnp, /**< Send a SendReadNoSnp */
    Cache_Event_SendReadNoSnpDMT, /**< Send a SendReadNoSnp using DMT */
    Cache_Event_SendReadUnique, /**< Send a ReadUnique */
    Cache_Event_SendCompAck, /**< Send CompAck */
    Cache_Event_SendCompData, /**< Send CompData */
    Cache_Event_WaitCompAck, /**< Expect to receive CompAck */
    Cache_Event_SendRespSepData, /**< Send RespSepData for a DMT request */
    Cache_Event_SendWriteBackOrWriteEvict, /**< Send a WriteBackFull (if line is UD or SD) or WriteEvictFull (if UC) */
    Cache_Event_SendWriteClean, /**< Send a WriteCleanFull */
    Cache_Event_SendWriteNoSnp, /**< Send a WriteNoSnp for a full line */
    Cache_Event_SendWriteNoSnpPartial, /**< Send a WriteNoSnpPtl */
    Cache_Event_SendWriteUnique, /**< Send a WriteUniquePtl */
    Cache_Event_SendWBData, /**< Send writeback data */
    Cache_Event_SendWUData, /**< Send write unique data */
    Cache_Event_SendWUDataCB, /**< Send write unique data from a sequencer callback */
    Cache_Event_SendCompDBIDResp, /**< Ack WB with CompDBIDResp */
    Cache_Event_SendCompDBIDRespStale, /**< Ack stale WB with CompDBIDResp */
    Cache_Event_SendCompDBIDResp_WU, /**< Ack WU with CompDBIDResp and set expected data */
    Cache_Event_SendDBIDResp_WU, /**< Ack WU with DBIDResp and set expected data */
    Cache_Event_SendComp_WU, /**< Ack WU completion */
    Cache_Event_SendEvict, /**< Send a Evict */
    Cache_Event_SendCompIResp, /**< Ack Evict with Comp_I */
    Cache_Event_SendCleanUnique, /**< Send a CleanUnique */
    Cache_Event_SendCompUCResp, /**< Ack CleanUnique with Comp_UC */
    Cache_Event_SendCompUCRespStale, /**< Ack stale CleanUnique with Comp_UC */
    Cache_Event_CheckUpgrade_FromStore, /**< Upgrade needed by a Store */
    Cache_Event_CheckUpgrade_FromCU, /**< Upgrade needed by an upstream CleanUnique */
    Cache_Event_CheckUpgrade_FromRU, /**< Upgrade needed by an upstream ReadUnique */
    Cache_Event_SendSnpShared, /**< Send a SnpShared/SnpNotSharedDirty to sharer in UC,UD, or SD state */
    Cache_Event_SendSnpSharedFwdToOwner, /**< Send a SnpSharedFwd/SnpNotSharedDirtyFwd to sharer in UC,UD, or SD state */
    Cache_Event_SendSnpSharedFwdToSharer, /**< Send a SnpSharedFwd/SnpNotSharedDirtyFwd to a sharer in SC state */
    Cache_Event_SendSnpOnce, /**< Send a SnpOnce to a sharer */
    Cache_Event_SendSnpOnceFwd, /**< Send a SnpOnceFwd to a sharer */
    Cache_Event_SendSnpUnique, /**< Send a SnpUnique to all sharers */
    Cache_Event_SendSnpUniqueRetToSrc, /**< Send a SnpUnique to all sharers. Sets RetToSrc for only one sharer. */
    Cache_Event_SendSnpUniqueFwd, /**< Send a SnpUniqueFwd to a single sharer */
    Cache_Event_SendSnpCleanInvalid, /**< Send a SnpCleanInvalid to all sharers */
    Cache_Event_SendSnpCleanInvalidNoReq, /**< Send a SnpCleanInvalid to all sharers except requestor */
    Cache_Event_SendSnpData, /**< Send SnpRespData as snoop reply */
    Cache_Event_SendSnpIResp, /**< Send SnpResp_I as snoop reply */
    Cache_Event_SendInvSnpResp, /**< Check data state and queue either SendSnpIResp or SendSnpData */
    Cache_Event_SendSnpUniqueFwdCompData, /**< Send CompData to SnpUniqueFwd target and queue either SendSnpFwdedData or SendSnpFwdedResp */
    Cache_Event_SendSnpSharedFwdCompData, /**< Send CompData to SnpUniqueFwd target and queue either SendSnpFwdedData or SendSnpFwdedResp */
    Cache_Event_SendSnpNotSharedDirtyFwdCompData, /**< Send CompData to SnpNotSharedDirtyFwd target and queue either SendSnpFwdedData or SendSnpFwdedResp */
    Cache_Event_SendSnpOnceFwdCompData, /**< Send CompData to SnpOnceFwd target and queue either SendSnpFwdedData or SendSnpFwdedResp */
    Cache_Event_SendSnpFwdedData, /**< Send SnpResp for a forwarding snoop */
    Cache_Event_SendSnpFwdedResp, /**< Send SnpRespData for a forwarding snoop */
    Cache_Event_DvmSync_Send, /**< Send an unstarted DVM Sync */
    Cache_Event_SendRetryAck, /**< Send RetryAck */
    Cache_Event_SendPCrdGrant, /**< Send PCrdGrant */
    Cache_Event_DoRetry, /**< Resend the current pending request */
    Cache_Event_DoRetry_Hazard, /**< DoRetry during a hazard */
    Cache_Event_LoadHit, /**< Complete a load hit */
    Cache_Event_StoreHit, /**< Complete a store hit */
    Cache_Event_UseTimeout, /**< Transition from UD_T -> UD */
    Cache_Event_RestoreFromHazard, /**< Restore from a snoop hazard */
    Cache_Event_TX_Data, /**< Transmit pending data messages */
    Cache_Event_MaintainCoherence, /**< Queues a WriteBack or Evict before droping the only valid copy of the block */
    Cache_Event_FinishCleanUnique, /**< Sends acks and perform any writeback after a CleanUnique */
    Cache_Event_FinishCopyBack_Stale, /**< Check if a Evict needs to be sent */
    Cache_Event_ActionStalledOnHazard, /**< Stall a trigger action because until finish handling snoop hazard */
    Cache_Event_Final, /**<  */
    Cache_Event_null, /**<  */
    Cache_Event_NUM
};

// Code to convert from a string to the enumeration
Cache_Event string_to_Cache_Event(const ::std::string& str);

// Code to convert state to a string
::std::string Cache_Event_to_string(const Cache_Event& obj);

// Code to increment an enumeration type
Cache_Event &operator++(Cache_Event &e);

::std::ostream&
operator<<(::std::ostream& out, const Cache_Event& obj);

} // namespace ruby
} // namespace gem5
#endif // __Cache_Event_HH__
