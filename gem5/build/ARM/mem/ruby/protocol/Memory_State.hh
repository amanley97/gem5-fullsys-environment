/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /home/a599m019/gem5-fullsys-enviroment/gem5/src/mem/slicc/symbols/Type.py:643
 */

#ifndef __Memory_State_HH__
#define __Memory_State_HH__

#include <iostream>
#include <string>

#include "mem/ruby/protocol/AccessPermission.hh"
namespace gem5
{

namespace ruby
{


// Class definition
/** \enum Memory_State
 *  \brief Transaction states
 */
enum Memory_State {
    Memory_State_FIRST,
    Memory_State_READY = Memory_State_FIRST, /**< Ready to transfer the line */
    Memory_State_WAITING_NET_DATA, /**< Waiting data from the network */
    Memory_State_SENDING_NET_DATA, /**< Sending data to the network */
    Memory_State_READING_MEM, /**< Waiting data from memory */
    Memory_State_null, /**< Null state */
    Memory_State_NUM
};

// Code to convert from a string to the enumeration
Memory_State string_to_Memory_State(const ::std::string& str);

// Code to convert state to a string
::std::string Memory_State_to_string(const Memory_State& obj);

// Code to increment an enumeration type
Memory_State &operator++(Memory_State &e);

// Code to convert the current state to an access permission
AccessPermission Memory_State_to_permission(const Memory_State& obj);


::std::ostream&
operator<<(::std::ostream& out, const Memory_State& obj);

} // namespace ruby
} // namespace gem5
#endif // __Memory_State_HH__
