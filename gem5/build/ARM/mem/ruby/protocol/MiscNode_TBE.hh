/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /home/a599m019/gem5-fullsys-enviroment/gem5/src/mem/slicc/symbols/Type.py:443
 */

#ifndef __MiscNode_TBE_HH__
#define __MiscNode_TBE_HH__

#include <iostream>

#include "mem/ruby/slicc_interface/RubySlicc_Util.hh"

#include "mem/ruby/protocol/CHIRequestType.hh"
#include "mem/ruby/protocol/MachineID.hh"
#include "mem/ruby/protocol/MiscNode_State.hh"
#include "mem/ruby/protocol/NetDest.hh"
#include "mem/ruby/protocol/NetDest.hh"
#include "mem/ruby/protocol/NetDest.hh"
#include "mem/ruby/protocol/TriggerQueue.hh"
#include "mem/ruby/protocol/MiscNode_Event.hh"
#include "mem/ruby/protocol/MiscNode_State.hh"
#include "mem/ruby/protocol/ExpectedMap.hh"
#include "mem/ruby/protocol/ExpectedMap.hh"
#include "mem/ruby/protocol/CHIResponseType.hh"
#include "mem/ruby/protocol/CHIDataType.hh"
namespace gem5
{

namespace ruby
{

class MiscNode_TBE
{
  public:
    MiscNode_TBE
()
		{
        m_timestamp = 0;
         // default value of Tick
        m_storSlot = 0;
         // default value of int
        // m_txnId has no default
        m_reqType = CHIRequestType_NUM;
         // default value of CHIRequestType
        m_isNonSync = false;
         // default value of bool
        // m_requestor has no default
        m_state = MiscNode_State_null;
         // default value of MiscNode_State
        // m_notSentTargets has no default
        // m_pendingTargets has no default
        // m_receivedTargets has no default
        // m_actions has no default
        m_pendAction = MiscNode_Event_NUM;
         // default value of MiscNode_Event
        m_delayNextAction = 0;
         // default value of Tick
        m_finalState = MiscNode_State_null;
         // default value of MiscNode_State
        // m_expected_req_resp has no default
        // m_expected_snp_resp has no default
        m_waiting_on_other_txns = false;
         // default value of bool
        m_slicchack1 = CHIResponseType_NUM;
         // default value of CHIResponseType
        m_slicchack2 = CHIDataType_NUM;
         // default value of CHIDataType
        m_sched_responses = 0;
         // default value of int
        m_block_on_sched_responses = false;
         // default value of bool
        m_wakeup_pending_req = false;
         // default value of bool
        m_wakeup_pending_snp = false;
         // default value of bool
        m_wakeup_pending_tgr = false;
         // default value of bool
    }
    MiscNode_TBE(const MiscNode_TBE&) = default;
    MiscNode_TBE
    &operator=(const MiscNode_TBE&) = default;
    MiscNode_TBE(const Tick& local_timestamp, const int& local_storSlot, const Addr& local_txnId, const CHIRequestType& local_reqType, const bool& local_isNonSync, const MachineID& local_requestor, const MiscNode_State& local_state, const NetDest& local_notSentTargets, const NetDest& local_pendingTargets, const NetDest& local_receivedTargets, const TriggerQueue<MiscNode_Event>& local_actions, const MiscNode_Event& local_pendAction, const Tick& local_delayNextAction, const MiscNode_State& local_finalState, const ExpectedMap<CHIResponseType,CHIDataType>& local_expected_req_resp, const ExpectedMap<CHIResponseType,CHIDataType>& local_expected_snp_resp, const bool& local_waiting_on_other_txns, const CHIResponseType& local_slicchack1, const CHIDataType& local_slicchack2, const int& local_sched_responses, const bool& local_block_on_sched_responses, const bool& local_wakeup_pending_req, const bool& local_wakeup_pending_snp, const bool& local_wakeup_pending_tgr)
    {
        m_timestamp = local_timestamp;
        m_storSlot = local_storSlot;
        m_txnId = local_txnId;
        m_reqType = local_reqType;
        m_isNonSync = local_isNonSync;
        m_requestor = local_requestor;
        m_state = local_state;
        m_notSentTargets = local_notSentTargets;
        m_pendingTargets = local_pendingTargets;
        m_receivedTargets = local_receivedTargets;
        m_actions = local_actions;
        m_pendAction = local_pendAction;
        m_delayNextAction = local_delayNextAction;
        m_finalState = local_finalState;
        m_expected_req_resp = local_expected_req_resp;
        m_expected_snp_resp = local_expected_snp_resp;
        m_waiting_on_other_txns = local_waiting_on_other_txns;
        m_slicchack1 = local_slicchack1;
        m_slicchack2 = local_slicchack2;
        m_sched_responses = local_sched_responses;
        m_block_on_sched_responses = local_block_on_sched_responses;
        m_wakeup_pending_req = local_wakeup_pending_req;
        m_wakeup_pending_snp = local_wakeup_pending_snp;
        m_wakeup_pending_tgr = local_wakeup_pending_tgr;
    }
    MiscNode_TBE*
    clone() const
    {
         return new MiscNode_TBE(*this);
    }
    // Const accessors methods for each field
    /** \brief Const accessor method for timestamp field.
     *  \return timestamp field
     */
    const Tick&
    gettimestamp() const
    {
        return m_timestamp;
    }
    /** \brief Const accessor method for storSlot field.
     *  \return storSlot field
     */
    const int&
    getstorSlot() const
    {
        return m_storSlot;
    }
    /** \brief Const accessor method for txnId field.
     *  \return txnId field
     */
    const Addr&
    gettxnId() const
    {
        return m_txnId;
    }
    /** \brief Const accessor method for reqType field.
     *  \return reqType field
     */
    const CHIRequestType&
    getreqType() const
    {
        return m_reqType;
    }
    /** \brief Const accessor method for isNonSync field.
     *  \return isNonSync field
     */
    const bool&
    getisNonSync() const
    {
        return m_isNonSync;
    }
    /** \brief Const accessor method for requestor field.
     *  \return requestor field
     */
    const MachineID&
    getrequestor() const
    {
        return m_requestor;
    }
    /** \brief Const accessor method for state field.
     *  \return state field
     */
    const MiscNode_State&
    getstate() const
    {
        return m_state;
    }
    /** \brief Const accessor method for notSentTargets field.
     *  \return notSentTargets field
     */
    const NetDest&
    getnotSentTargets() const
    {
        return m_notSentTargets;
    }
    /** \brief Const accessor method for pendingTargets field.
     *  \return pendingTargets field
     */
    const NetDest&
    getpendingTargets() const
    {
        return m_pendingTargets;
    }
    /** \brief Const accessor method for receivedTargets field.
     *  \return receivedTargets field
     */
    const NetDest&
    getreceivedTargets() const
    {
        return m_receivedTargets;
    }
    /** \brief Const accessor method for actions field.
     *  \return actions field
     */
    const TriggerQueue<MiscNode_Event>&
    getactions() const
    {
        return m_actions;
    }
    /** \brief Const accessor method for pendAction field.
     *  \return pendAction field
     */
    const MiscNode_Event&
    getpendAction() const
    {
        return m_pendAction;
    }
    /** \brief Const accessor method for delayNextAction field.
     *  \return delayNextAction field
     */
    const Tick&
    getdelayNextAction() const
    {
        return m_delayNextAction;
    }
    /** \brief Const accessor method for finalState field.
     *  \return finalState field
     */
    const MiscNode_State&
    getfinalState() const
    {
        return m_finalState;
    }
    /** \brief Const accessor method for expected_req_resp field.
     *  \return expected_req_resp field
     */
    const ExpectedMap<CHIResponseType,CHIDataType>&
    getexpected_req_resp() const
    {
        return m_expected_req_resp;
    }
    /** \brief Const accessor method for expected_snp_resp field.
     *  \return expected_snp_resp field
     */
    const ExpectedMap<CHIResponseType,CHIDataType>&
    getexpected_snp_resp() const
    {
        return m_expected_snp_resp;
    }
    /** \brief Const accessor method for waiting_on_other_txns field.
     *  \return waiting_on_other_txns field
     */
    const bool&
    getwaiting_on_other_txns() const
    {
        return m_waiting_on_other_txns;
    }
    /** \brief Const accessor method for slicchack1 field.
     *  \return slicchack1 field
     */
    const CHIResponseType&
    getslicchack1() const
    {
        return m_slicchack1;
    }
    /** \brief Const accessor method for slicchack2 field.
     *  \return slicchack2 field
     */
    const CHIDataType&
    getslicchack2() const
    {
        return m_slicchack2;
    }
    /** \brief Const accessor method for sched_responses field.
     *  \return sched_responses field
     */
    const int&
    getsched_responses() const
    {
        return m_sched_responses;
    }
    /** \brief Const accessor method for block_on_sched_responses field.
     *  \return block_on_sched_responses field
     */
    const bool&
    getblock_on_sched_responses() const
    {
        return m_block_on_sched_responses;
    }
    /** \brief Const accessor method for wakeup_pending_req field.
     *  \return wakeup_pending_req field
     */
    const bool&
    getwakeup_pending_req() const
    {
        return m_wakeup_pending_req;
    }
    /** \brief Const accessor method for wakeup_pending_snp field.
     *  \return wakeup_pending_snp field
     */
    const bool&
    getwakeup_pending_snp() const
    {
        return m_wakeup_pending_snp;
    }
    /** \brief Const accessor method for wakeup_pending_tgr field.
     *  \return wakeup_pending_tgr field
     */
    const bool&
    getwakeup_pending_tgr() const
    {
        return m_wakeup_pending_tgr;
    }
    // Non const Accessors methods for each field
    /** \brief Non-const accessor method for timestamp field.
     *  \return timestamp field
     */
    Tick&
    gettimestamp()
    {
        return m_timestamp;
    }
    /** \brief Non-const accessor method for storSlot field.
     *  \return storSlot field
     */
    int&
    getstorSlot()
    {
        return m_storSlot;
    }
    /** \brief Non-const accessor method for txnId field.
     *  \return txnId field
     */
    Addr&
    gettxnId()
    {
        return m_txnId;
    }
    /** \brief Non-const accessor method for reqType field.
     *  \return reqType field
     */
    CHIRequestType&
    getreqType()
    {
        return m_reqType;
    }
    /** \brief Non-const accessor method for isNonSync field.
     *  \return isNonSync field
     */
    bool&
    getisNonSync()
    {
        return m_isNonSync;
    }
    /** \brief Non-const accessor method for requestor field.
     *  \return requestor field
     */
    MachineID&
    getrequestor()
    {
        return m_requestor;
    }
    /** \brief Non-const accessor method for state field.
     *  \return state field
     */
    MiscNode_State&
    getstate()
    {
        return m_state;
    }
    /** \brief Non-const accessor method for notSentTargets field.
     *  \return notSentTargets field
     */
    NetDest&
    getnotSentTargets()
    {
        return m_notSentTargets;
    }
    /** \brief Non-const accessor method for pendingTargets field.
     *  \return pendingTargets field
     */
    NetDest&
    getpendingTargets()
    {
        return m_pendingTargets;
    }
    /** \brief Non-const accessor method for receivedTargets field.
     *  \return receivedTargets field
     */
    NetDest&
    getreceivedTargets()
    {
        return m_receivedTargets;
    }
    /** \brief Non-const accessor method for actions field.
     *  \return actions field
     */
    TriggerQueue<MiscNode_Event>&
    getactions()
    {
        return m_actions;
    }
    /** \brief Non-const accessor method for pendAction field.
     *  \return pendAction field
     */
    MiscNode_Event&
    getpendAction()
    {
        return m_pendAction;
    }
    /** \brief Non-const accessor method for delayNextAction field.
     *  \return delayNextAction field
     */
    Tick&
    getdelayNextAction()
    {
        return m_delayNextAction;
    }
    /** \brief Non-const accessor method for finalState field.
     *  \return finalState field
     */
    MiscNode_State&
    getfinalState()
    {
        return m_finalState;
    }
    /** \brief Non-const accessor method for expected_req_resp field.
     *  \return expected_req_resp field
     */
    ExpectedMap<CHIResponseType,CHIDataType>&
    getexpected_req_resp()
    {
        return m_expected_req_resp;
    }
    /** \brief Non-const accessor method for expected_snp_resp field.
     *  \return expected_snp_resp field
     */
    ExpectedMap<CHIResponseType,CHIDataType>&
    getexpected_snp_resp()
    {
        return m_expected_snp_resp;
    }
    /** \brief Non-const accessor method for waiting_on_other_txns field.
     *  \return waiting_on_other_txns field
     */
    bool&
    getwaiting_on_other_txns()
    {
        return m_waiting_on_other_txns;
    }
    /** \brief Non-const accessor method for slicchack1 field.
     *  \return slicchack1 field
     */
    CHIResponseType&
    getslicchack1()
    {
        return m_slicchack1;
    }
    /** \brief Non-const accessor method for slicchack2 field.
     *  \return slicchack2 field
     */
    CHIDataType&
    getslicchack2()
    {
        return m_slicchack2;
    }
    /** \brief Non-const accessor method for sched_responses field.
     *  \return sched_responses field
     */
    int&
    getsched_responses()
    {
        return m_sched_responses;
    }
    /** \brief Non-const accessor method for block_on_sched_responses field.
     *  \return block_on_sched_responses field
     */
    bool&
    getblock_on_sched_responses()
    {
        return m_block_on_sched_responses;
    }
    /** \brief Non-const accessor method for wakeup_pending_req field.
     *  \return wakeup_pending_req field
     */
    bool&
    getwakeup_pending_req()
    {
        return m_wakeup_pending_req;
    }
    /** \brief Non-const accessor method for wakeup_pending_snp field.
     *  \return wakeup_pending_snp field
     */
    bool&
    getwakeup_pending_snp()
    {
        return m_wakeup_pending_snp;
    }
    /** \brief Non-const accessor method for wakeup_pending_tgr field.
     *  \return wakeup_pending_tgr field
     */
    bool&
    getwakeup_pending_tgr()
    {
        return m_wakeup_pending_tgr;
    }
    // Mutator methods for each field
    /** \brief Mutator method for timestamp field */
    void
    settimestamp(const Tick& local_timestamp)
    {
        m_timestamp = local_timestamp;
    }
    /** \brief Mutator method for storSlot field */
    void
    setstorSlot(const int& local_storSlot)
    {
        m_storSlot = local_storSlot;
    }
    /** \brief Mutator method for txnId field */
    void
    settxnId(const Addr& local_txnId)
    {
        m_txnId = local_txnId;
    }
    /** \brief Mutator method for reqType field */
    void
    setreqType(const CHIRequestType& local_reqType)
    {
        m_reqType = local_reqType;
    }
    /** \brief Mutator method for isNonSync field */
    void
    setisNonSync(const bool& local_isNonSync)
    {
        m_isNonSync = local_isNonSync;
    }
    /** \brief Mutator method for requestor field */
    void
    setrequestor(const MachineID& local_requestor)
    {
        m_requestor = local_requestor;
    }
    /** \brief Mutator method for state field */
    void
    setstate(const MiscNode_State& local_state)
    {
        m_state = local_state;
    }
    /** \brief Mutator method for notSentTargets field */
    void
    setnotSentTargets(const NetDest& local_notSentTargets)
    {
        m_notSentTargets = local_notSentTargets;
    }
    /** \brief Mutator method for pendingTargets field */
    void
    setpendingTargets(const NetDest& local_pendingTargets)
    {
        m_pendingTargets = local_pendingTargets;
    }
    /** \brief Mutator method for receivedTargets field */
    void
    setreceivedTargets(const NetDest& local_receivedTargets)
    {
        m_receivedTargets = local_receivedTargets;
    }
    /** \brief Mutator method for actions field */
    void
    setactions(const TriggerQueue<MiscNode_Event>& local_actions)
    {
        m_actions = local_actions;
    }
    /** \brief Mutator method for pendAction field */
    void
    setpendAction(const MiscNode_Event& local_pendAction)
    {
        m_pendAction = local_pendAction;
    }
    /** \brief Mutator method for delayNextAction field */
    void
    setdelayNextAction(const Tick& local_delayNextAction)
    {
        m_delayNextAction = local_delayNextAction;
    }
    /** \brief Mutator method for finalState field */
    void
    setfinalState(const MiscNode_State& local_finalState)
    {
        m_finalState = local_finalState;
    }
    /** \brief Mutator method for expected_req_resp field */
    void
    setexpected_req_resp(const ExpectedMap<CHIResponseType,CHIDataType>& local_expected_req_resp)
    {
        m_expected_req_resp = local_expected_req_resp;
    }
    /** \brief Mutator method for expected_snp_resp field */
    void
    setexpected_snp_resp(const ExpectedMap<CHIResponseType,CHIDataType>& local_expected_snp_resp)
    {
        m_expected_snp_resp = local_expected_snp_resp;
    }
    /** \brief Mutator method for waiting_on_other_txns field */
    void
    setwaiting_on_other_txns(const bool& local_waiting_on_other_txns)
    {
        m_waiting_on_other_txns = local_waiting_on_other_txns;
    }
    /** \brief Mutator method for slicchack1 field */
    void
    setslicchack1(const CHIResponseType& local_slicchack1)
    {
        m_slicchack1 = local_slicchack1;
    }
    /** \brief Mutator method for slicchack2 field */
    void
    setslicchack2(const CHIDataType& local_slicchack2)
    {
        m_slicchack2 = local_slicchack2;
    }
    /** \brief Mutator method for sched_responses field */
    void
    setsched_responses(const int& local_sched_responses)
    {
        m_sched_responses = local_sched_responses;
    }
    /** \brief Mutator method for block_on_sched_responses field */
    void
    setblock_on_sched_responses(const bool& local_block_on_sched_responses)
    {
        m_block_on_sched_responses = local_block_on_sched_responses;
    }
    /** \brief Mutator method for wakeup_pending_req field */
    void
    setwakeup_pending_req(const bool& local_wakeup_pending_req)
    {
        m_wakeup_pending_req = local_wakeup_pending_req;
    }
    /** \brief Mutator method for wakeup_pending_snp field */
    void
    setwakeup_pending_snp(const bool& local_wakeup_pending_snp)
    {
        m_wakeup_pending_snp = local_wakeup_pending_snp;
    }
    /** \brief Mutator method for wakeup_pending_tgr field */
    void
    setwakeup_pending_tgr(const bool& local_wakeup_pending_tgr)
    {
        m_wakeup_pending_tgr = local_wakeup_pending_tgr;
    }
    void print(std::ostream& out) const;
  //private:
    /** Time this entry was allocated. Affects order of trigger events */
    Tick m_timestamp;
    /** Slot in the storage tracker occupied by this entry */
    int m_storSlot;
    /** Unique Transaction ID */
    Addr m_txnId;
    /** Request type that initiated this transaction */
    CHIRequestType m_reqType;
    /** Is a non-sync DVM operation */
    bool m_isNonSync;
    /** Requestor ID */
    MachineID m_requestor;
    /** SLICC line state */
    MiscNode_State m_state;
    /** Set of MachineIDs we haven't snooped yet */
    NetDest m_notSentTargets;
    /** Set of MachineIDs that were snooped, but haven't responded */
    NetDest m_pendingTargets;
    /** Set of MachineIDs that have responded to snoops */
    NetDest m_receivedTargets;
    /** List of actions */
    TriggerQueue<MiscNode_Event> m_actions;
    /** Current pending action */
    MiscNode_Event m_pendAction;
    /** Delay next action until given tick */
    Tick m_delayNextAction;
    /** Final state; set when pendAction==Final */
    MiscNode_State m_finalState;
    ExpectedMap<CHIResponseType,CHIDataType> m_expected_req_resp;
    ExpectedMap<CHIResponseType,CHIDataType> m_expected_snp_resp;
    /** Is waiting for other transactions to update before finishing. */
    bool m_waiting_on_other_txns;
    CHIResponseType m_slicchack1;
    CHIDataType m_slicchack2;
    int m_sched_responses;
    bool m_block_on_sched_responses;
    bool m_wakeup_pending_req;
    bool m_wakeup_pending_snp;
    bool m_wakeup_pending_tgr;
};
inline ::std::ostream&
operator<<(::std::ostream& out, const MiscNode_TBE& obj)
{
    obj.print(out);
    out << ::std::flush;
    return out;
}

} // namespace ruby
} // namespace gem5

#endif // __MiscNode_TBE_HH__
