/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /home/a599m019/gem5-fullsys-enviroment/gem5/src/mem/slicc/symbols/Type.py:935
 */

#include <cassert>
#include <iostream>
#include <string>

#include "base/logging.hh"
#include "mem/ruby/protocol/Cache_RequestType.hh"

namespace gem5
{

namespace ruby
{

// Code for output operator
::std::ostream&
operator<<(::std::ostream& out, const Cache_RequestType& obj)
{
    out << Cache_RequestType_to_string(obj);
    out << ::std::flush;
    return out;
}

// Code to convert state to a string
std::string
Cache_RequestType_to_string(const Cache_RequestType& obj)
{
    switch(obj) {
      case Cache_RequestType_TagArrayRead:
        return "TagArrayRead";
      case Cache_RequestType_TagArrayWrite:
        return "TagArrayWrite";
      case Cache_RequestType_DataArrayRead:
        return "DataArrayRead";
      case Cache_RequestType_DataArrayWrite:
        return "DataArrayWrite";
      case Cache_RequestType_DestinationAvailable:
        return "DestinationAvailable";
      case Cache_RequestType_ReplTBEAvailable:
        return "ReplTBEAvailable";
      default:
        panic("Invalid range for type Cache_RequestType");
    }
    // Appease the compiler since this function has a return value
    return "";
}

// Code to convert from a string to the enumeration
Cache_RequestType
string_to_Cache_RequestType(const std::string& str)
{
    if (str == "TagArrayRead") {
        return Cache_RequestType_TagArrayRead;
    } else if (str == "TagArrayWrite") {
        return Cache_RequestType_TagArrayWrite;
    } else if (str == "DataArrayRead") {
        return Cache_RequestType_DataArrayRead;
    } else if (str == "DataArrayWrite") {
        return Cache_RequestType_DataArrayWrite;
    } else if (str == "DestinationAvailable") {
        return Cache_RequestType_DestinationAvailable;
    } else if (str == "ReplTBEAvailable") {
        return Cache_RequestType_ReplTBEAvailable;
    } else {
        panic("Invalid string conversion for %s, type Cache_RequestType", str);
    }
}

// Code to increment an enumeration type
Cache_RequestType&
operator++(Cache_RequestType& e)
{
    assert(e < Cache_RequestType_NUM);
    return e = Cache_RequestType(e+1);
}
} // namespace ruby
} // namespace gem5
