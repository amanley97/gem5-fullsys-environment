/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /home/a599m019/gem5-fullsys-enviroment/gem5/src/mem/slicc/symbols/StateMachine.py:1499
 */

// MiscNode: CHI Misc Node for handling and distrbuting DVM operations

#include <sys/types.h>
#include <unistd.h>

#include <cassert>
#include <typeinfo>

#include "base/logging.hh"

#include "debug/RubyGenerated.hh"
#include "debug/RubyProtocol.hh"
#include "debug/RubySlicc.hh"
#include "mem/ruby/protocol/MiscNode_Controller.hh"
#include "mem/ruby/protocol/MiscNode_Event.hh"
#include "mem/ruby/protocol/MiscNode_State.hh"

#include "mem/ruby/protocol/Types.hh"
#include "mem/ruby/system/RubySystem.hh"

#include "mem/ruby/slicc_interface/RubySlicc_includes.hh"
namespace gem5
{

namespace ruby
{

void
MiscNode_Controller::wakeup()
{
    if (getMemReqQueue() && getMemReqQueue()->isReady(clockEdge())) {
        serviceMemoryQueue();
    }

    int counter = 0;
    while (true) {
        unsigned char rejected[9];
        memset(rejected, 0, sizeof(unsigned char)*9);
        // Some cases will put us into an infinite loop without this limit
        assert(counter <= m_transitions_per_cycle);
        if (counter == m_transitions_per_cycle) {
            // Count how often we are fully utilized
            stats.fullyBusyCycles++;

            // Wakeup in another cycle and try again
            scheduleEvent(Cycles(1));
            break;
        }
            // MiscNodeInPort rspInPort
            m_cur_in_port = 11;
            try {
                            if ((((*m_rspIn_ptr)).isReady((clockEdge())))) {
                                (printResources());
                                {
                                    // Declare message
                                    [[maybe_unused]] const CHIResponseMsg* in_msg_ptr;
                                    in_msg_ptr = dynamic_cast<const CHIResponseMsg *>(((*m_rspIn_ptr)).peek());
                                    if (in_msg_ptr == NULL) {
                                        // If the cast fails, this is the wrong inport (wrong message type).
                                        // Throw an exception, and the caller will decide to either try a
                                        // different inport or punt.
                                        throw RejectException();
                                    }
                                #ifndef NDEBUG
                                if (!(((*in_msg_ptr)).m_usesTxnId)) {
                                    panic("Runtime Error at CHI-dvm-misc-node-ports.sm:72: %s.\n", "assert failure");

                                }
                                #endif
                                ;
                                MiscNode_TBE* tbe
                                 = (getCurrentActiveTBE(((*in_msg_ptr)).m_txnId));
                                {

                                    TransitionResult result = doTransition((respToEvent(((*in_msg_ptr)).m_type)), tbe, ((*in_msg_ptr)).m_txnId);

                                    if (result == TransitionResult_Valid) {
                                        counter++;
                                        continue; // Check the first port again
                                    } else if (result == TransitionResult_ResourceStall) {

                                        if (rspInPort_rsc_stall_handler()) {
                                            counter++;
                                            continue; // Check the first port again
                                        } else {
                                            scheduleEvent(Cycles(1));
                                            // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)
                                        }

                                    } else if (result == TransitionResult_ProtocolStall) {

                                        scheduleEvent(Cycles(1));
                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                    }

                                }
                                ;
                                }
                            }
                        } catch (const RejectException & e) {
                            rejected[0]++;
                        }
            // MiscNodeInPort datInPort
            m_cur_in_port = 10;
            try {
                            if ((((*m_datIn_ptr)).isReady((clockEdge())))) {
                                (printResources());
                                {
                                    // Declare message
                                    [[maybe_unused]] const CHIDataMsg* in_msg_ptr;
                                    in_msg_ptr = dynamic_cast<const CHIDataMsg *>(((*m_datIn_ptr)).peek());
                                    if (in_msg_ptr == NULL) {
                                        // If the cast fails, this is the wrong inport (wrong message type).
                                        // Throw an exception, and the caller will decide to either try a
                                        // different inport or punt.
                                        throw RejectException();
                                    }
                                #ifndef NDEBUG
                                if (!(((((((*in_msg_ptr)).m_bitMask).count()) <= m_data_channel_size) && (((((*in_msg_ptr)).m_bitMask).count()) > (0))))) {
                                    panic("Runtime Error at CHI-dvm-misc-node-ports.sm:90: %s.\n", "assert failure");

                                }
                                #endif
                                ;
                                #ifndef NDEBUG
                                if (!(((*in_msg_ptr)).m_usesTxnId)) {
                                    panic("Runtime Error at CHI-dvm-misc-node-ports.sm:91: %s.\n", "assert failure");

                                }
                                #endif
                                ;
                                {

                                    TransitionResult result = doTransition((dataToEvent(((*in_msg_ptr)).m_type)), (getCurrentActiveTBE(((*in_msg_ptr)).m_txnId)), ((*in_msg_ptr)).m_txnId);

                                    if (result == TransitionResult_Valid) {
                                        counter++;
                                        continue; // Check the first port again
                                    } else if (result == TransitionResult_ResourceStall) {

                                        if (datInPort_rsc_stall_handler()) {
                                            counter++;
                                            continue; // Check the first port again
                                        } else {
                                            scheduleEvent(Cycles(1));
                                            // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)
                                        }

                                    } else if (result == TransitionResult_ProtocolStall) {

                                        scheduleEvent(Cycles(1));
                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                    }

                                }
                                ;
                                }
                            }
                        } catch (const RejectException & e) {
                            rejected[1]++;
                        }
            // MiscNodeInPort snpInPort
            m_cur_in_port = 8;
            try {
                            if ((((*m_snpIn_ptr)).isReady((clockEdge())))) {
                                (printResources());
                                {
                                    // Declare message
                                    [[maybe_unused]] const CHIRequestMsg* in_msg_ptr;
                                    in_msg_ptr = dynamic_cast<const CHIRequestMsg *>(((*m_snpIn_ptr)).peek());
                                    if (in_msg_ptr == NULL) {
                                        // If the cast fails, this is the wrong inport (wrong message type).
                                        // Throw an exception, and the caller will decide to either try a
                                        // different inport or punt.
                                        throw RejectException();
                                    }
                                panic("Runtime Error at CHI-dvm-misc-node-ports.sm:106: %s.\n", ("MN should not receive snoops"));
                                ;
                                }
                            }
                        } catch (const RejectException & e) {
                            rejected[2]++;
                        }
            // MiscNodeInPort reqInPort
            m_cur_in_port = 2;
            try {
                            if ((((*m_reqIn_ptr)).isReady((clockEdge())))) {
                                (printResources());
                                {
                                    // Declare message
                                    [[maybe_unused]] const CHIRequestMsg* in_msg_ptr;
                                    in_msg_ptr = dynamic_cast<const CHIRequestMsg *>(((*m_reqIn_ptr)).peek());
                                    if (in_msg_ptr == NULL) {
                                        // If the cast fails, this is the wrong inport (wrong message type).
                                        // Throw an exception, and the caller will decide to either try a
                                        // different inport or punt.
                                        throw RejectException();
                                    }
                                #ifndef NDEBUG
                                if (!(((*in_msg_ptr)).m_usesTxnId)) {
                                    panic("Runtime Error at CHI-dvm-misc-node-ports.sm:121: %s.\n", "assert failure");

                                }
                                #endif
                                ;
                                #ifndef NDEBUG
                                if (!((! ((getCurrentActiveTBE(((*in_msg_ptr)).m_txnId)) != NULL)))) {
                                    panic("Runtime Error at CHI-dvm-misc-node-ports.sm:123: %s.\n", "assert failure");

                                }
                                #endif
                                ;
                                    if (((*in_msg_ptr)).m_allowRetry) {
                                        {

                                            TransitionResult result = doTransition(MiscNode_Event_AllocRequest, (nullTBE()), ((*in_msg_ptr)).m_txnId);

                                            if (result == TransitionResult_Valid) {
                                                counter++;
                                                continue; // Check the first port again
                                            } else if (result == TransitionResult_ResourceStall) {

                                                if (reqInPort_rsc_stall_handler()) {
                                                    counter++;
                                                    continue; // Check the first port again
                                                } else {
                                                    scheduleEvent(Cycles(1));
                                                    // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)
                                                }

                                            } else if (result == TransitionResult_ProtocolStall) {

                                                scheduleEvent(Cycles(1));
                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                            }

                                        }
                                        ;
                                    } else {
                                        {

                                            TransitionResult result = doTransition(MiscNode_Event_AllocRequestWithCredit, (nullTBE()), ((*in_msg_ptr)).m_txnId);

                                            if (result == TransitionResult_Valid) {
                                                counter++;
                                                continue; // Check the first port again
                                            } else if (result == TransitionResult_ResourceStall) {

                                                if (reqInPort_rsc_stall_handler()) {
                                                    counter++;
                                                    continue; // Check the first port again
                                                } else {
                                                    scheduleEvent(Cycles(1));
                                                    // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)
                                                }

                                            } else if (result == TransitionResult_ProtocolStall) {

                                                scheduleEvent(Cycles(1));
                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                            }

                                        }
                                        ;
                                    }
                                    }
                                }
                        } catch (const RejectException & e) {
                            rejected[3]++;
                        }
            // MiscNodeInPort seqInPort
            m_cur_in_port = 1;
            try {
                            if ((((*m_mandatoryQueue_ptr)).isReady((clockEdge())))) {
                                (printResources());
                                {
                                    // Declare message
                                    [[maybe_unused]] const RubyRequest* in_msg_ptr;
                                    in_msg_ptr = dynamic_cast<const RubyRequest *>(((*m_mandatoryQueue_ptr)).peek());
                                    if (in_msg_ptr == NULL) {
                                        // If the cast fails, this is the wrong inport (wrong message type).
                                        // Throw an exception, and the caller will decide to either try a
                                        // different inport or punt.
                                        throw RejectException();
                                    }
                                panic("Runtime Error at CHI-dvm-misc-node-ports.sm:143: %s.\n", ("MN should not have sequencer"));
                                ;
                                }
                            }
                        } catch (const RejectException & e) {
                            rejected[4]++;
                        }
            // MiscNodeInPort triggerInPort
            m_cur_in_port = 5;
            try {
                            if ((((*m_triggerQueue_ptr)).isReady((clockEdge())))) {
                                (printResources());
                                {
                                    // Declare message
                                    [[maybe_unused]] const MiscNode_TriggerMsg* in_msg_ptr;
                                    in_msg_ptr = dynamic_cast<const MiscNode_TriggerMsg *>(((*m_triggerQueue_ptr)).peek());
                                    if (in_msg_ptr == NULL) {
                                        // If the cast fails, this is the wrong inport (wrong message type).
                                        // Throw an exception, and the caller will decide to either try a
                                        // different inport or punt.
                                        throw RejectException();
                                    }
                                MiscNode_TBE* tbe
                                 = (getCurrentActiveTBE(((*in_msg_ptr)).m_txnId));
                                #ifndef NDEBUG
                                if (!((tbe != NULL))) {
                                    panic("Runtime Error at CHI-dvm-misc-node-ports.sm:156: %s.\n", "assert failure");

                                }
                                #endif
                                ;
                                #ifndef NDEBUG
                                if (!((! ((*in_msg_ptr)).m_from_hazard))) {
                                    panic("Runtime Error at CHI-dvm-misc-node-ports.sm:157: %s.\n", "assert failure");

                                }
                                #endif
                                ;
                                {

                                    TransitionResult result = doTransition((*tbe).m_pendAction, tbe, ((*in_msg_ptr)).m_txnId);

                                    if (result == TransitionResult_Valid) {
                                        counter++;
                                        continue; // Check the first port again
                                    } else if (result == TransitionResult_ResourceStall) {

                                        if (triggerInPort_rsc_stall_handler()) {
                                            counter++;
                                            continue; // Check the first port again
                                        } else {
                                            scheduleEvent(Cycles(1));
                                            // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)
                                        }

                                    } else if (result == TransitionResult_ProtocolStall) {

                                        scheduleEvent(Cycles(1));
                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                    }

                                }
                                ;
                                }
                            }
                        } catch (const RejectException & e) {
                            rejected[5]++;
                        }
            // MiscNodeInPort reqRdyPort
            m_cur_in_port = 3;
            try {
                            if ((((*m_reqRdy_ptr)).isReady((clockEdge())))) {
                                (printResources());
                                {
                                    // Declare message
                                    [[maybe_unused]] const CHIRequestMsg* in_msg_ptr;
                                    in_msg_ptr = dynamic_cast<const CHIRequestMsg *>(((*m_reqRdy_ptr)).peek());
                                    if (in_msg_ptr == NULL) {
                                        // If the cast fails, this is the wrong inport (wrong message type).
                                        // Throw an exception, and the caller will decide to either try a
                                        // different inport or punt.
                                        throw RejectException();
                                    }
                                #ifndef NDEBUG
                                if (!(((*in_msg_ptr)).m_usesTxnId)) {
                                    panic("Runtime Error at CHI-dvm-misc-node-ports.sm:181: %s.\n", "assert failure");

                                }
                                #endif
                                ;
                                MiscNode_TBE* tbe
                                 = (getCurrentActiveTBE(((*in_msg_ptr)).m_txnId));
                                #ifndef NDEBUG
                                if (!((! ((*in_msg_ptr)).m_is_local_pf))) {
                                    panic("Runtime Error at CHI-dvm-misc-node-ports.sm:183: %s.\n", "assert failure");

                                }
                                #endif
                                ;
                                {

                                    TransitionResult result = doTransition((reqToEvent(((*in_msg_ptr)).m_type)), tbe, ((*in_msg_ptr)).m_txnId);

                                    if (result == TransitionResult_Valid) {
                                        counter++;
                                        continue; // Check the first port again
                                    } else if (result == TransitionResult_ResourceStall) {

                                        if (reqRdyPort_rsc_stall_handler()) {
                                            counter++;
                                            continue; // Check the first port again
                                        } else {
                                            scheduleEvent(Cycles(1));
                                            // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)
                                        }

                                    } else if (result == TransitionResult_ProtocolStall) {

                                        scheduleEvent(Cycles(1));
                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                    }

                                }
                                ;
                                }
                            }
                        } catch (const RejectException & e) {
                            rejected[6]++;
                        }
            // MiscNodeInPort retryTriggerInPort
            m_cur_in_port = 7;
            try {
                            if ((((*m_retryTriggerQueue_ptr)).isReady((clockEdge())))) {
                                (printResources());
                                {
                                    // Declare message
                                    [[maybe_unused]] const MiscNode_RetryTriggerMsg* in_msg_ptr;
                                    in_msg_ptr = dynamic_cast<const MiscNode_RetryTriggerMsg *>(((*m_retryTriggerQueue_ptr)).peek());
                                    if (in_msg_ptr == NULL) {
                                        // If the cast fails, this is the wrong inport (wrong message type).
                                        // Throw an exception, and the caller will decide to either try a
                                        // different inport or punt.
                                        throw RejectException();
                                    }
                                MiscNode_Event ev
                                 = ((*in_msg_ptr)).m_event;
                                MiscNode_TBE* tbe
                                 = (getCurrentActiveTBE(((*in_msg_ptr)).m_txnId));
                                #ifndef NDEBUG
                                if (!(((ev == MiscNode_Event_SendRetryAck) || (ev == MiscNode_Event_SendPCrdGrant)))) {
                                    panic("Runtime Error at CHI-dvm-misc-node-ports.sm:212: %s.\n", "assert failure");

                                }
                                #endif
                                ;
                                {

                                    TransitionResult result = doTransition(ev, tbe, ((*in_msg_ptr)).m_txnId);

                                    if (result == TransitionResult_Valid) {
                                        counter++;
                                        continue; // Check the first port again
                                    } else if (result == TransitionResult_ResourceStall) {

                                        scheduleEvent(Cycles(1));
                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                    } else if (result == TransitionResult_ProtocolStall) {

                                        scheduleEvent(Cycles(1));
                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                    }

                                }
                                ;
                                }
                            }
                        } catch (const RejectException & e) {
                            rejected[7]++;
                        }
            // MiscNodeInPort schedRspTriggerInPort
            m_cur_in_port = 6;
            try {
                            if ((((*m_schedRspTriggerQueue_ptr)).isReady((clockEdge())))) {
                                (printResources());
                                {
                                    // Declare message
                                    [[maybe_unused]] const CHIResponseMsg* in_msg_ptr;
                                    in_msg_ptr = dynamic_cast<const CHIResponseMsg *>(((*m_schedRspTriggerQueue_ptr)).peek());
                                    if (in_msg_ptr == NULL) {
                                        // If the cast fails, this is the wrong inport (wrong message type).
                                        // Throw an exception, and the caller will decide to either try a
                                        // different inport or punt.
                                        throw RejectException();
                                    }
                                panic("Runtime Error at CHI-dvm-misc-node-ports.sm:224: %s.\n", ("Misc Node shouldn't have schedResp"));
                                ;
                                }
                            }
                        } catch (const RejectException & e) {
                            rejected[8]++;
                        }
        // If we got this far, we have nothing left todo or something went
        // wrong
        break;
    }
}

} // namespace ruby
} // namespace gem5
