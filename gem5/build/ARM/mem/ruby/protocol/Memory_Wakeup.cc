/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /home/a599m019/gem5-fullsys-enviroment/gem5/src/mem/slicc/symbols/StateMachine.py:1499
 */

// Memory: Memory controller interface

#include <sys/types.h>
#include <unistd.h>

#include <cassert>
#include <typeinfo>

#include "base/logging.hh"

#include "debug/RubyGenerated.hh"
#include "debug/RubySlicc.hh"
#include "mem/ruby/protocol/Memory_Controller.hh"
#include "mem/ruby/protocol/Memory_Event.hh"
#include "mem/ruby/protocol/Memory_State.hh"

#include "mem/ruby/protocol/Types.hh"
#include "mem/ruby/system/RubySystem.hh"

#include "mem/ruby/slicc_interface/RubySlicc_includes.hh"
namespace gem5
{

namespace ruby
{

void
Memory_Controller::wakeup()
{
    if (getMemReqQueue() && getMemReqQueue()->isReady(clockEdge())) {
        serviceMemoryQueue();
    }

    int counter = 0;
    while (true) {
        unsigned char rejected[7];
        memset(rejected, 0, sizeof(unsigned char)*7);
        // Some cases will put us into an infinite loop without this limit
        assert(counter <= m_transitions_per_cycle);
        if (counter == m_transitions_per_cycle) {
            // Count how often we are fully utilized
            stats.fullyBusyCycles++;

            // Wakeup in another cycle and try again
            scheduleEvent(Cycles(1));
            break;
        }
            // MemoryInPort rspInPort
            m_cur_in_port = 6;
            try {
                            if ((((*m_rspIn_ptr)).isReady((clockEdge())))) {
                                (printResources());
                                {
                                    // Declare message
                                    [[maybe_unused]] const CHIResponseMsg* in_msg_ptr;
                                    in_msg_ptr = dynamic_cast<const CHIResponseMsg *>(((*m_rspIn_ptr)).peek());
                                    if (in_msg_ptr == NULL) {
                                        // If the cast fails, this is the wrong inport (wrong message type).
                                        // Throw an exception, and the caller will decide to either try a
                                        // different inport or punt.
                                        throw RejectException();
                                    }
                                panic("Runtime Error at CHI-mem.sm:359: %s.\n", ("Unexpected message"));
                                ;
                                }
                            }
                        } catch (const RejectException & e) {
                            rejected[0]++;
                        }
            // MemoryInPort datInPort
            m_cur_in_port = 5;
            try {
                            if ((((*m_datIn_ptr)).isReady((clockEdge())))) {
                                (printResources());
                                {
                                    // Declare message
                                    [[maybe_unused]] const CHIDataMsg* in_msg_ptr;
                                    in_msg_ptr = dynamic_cast<const CHIDataMsg *>(((*m_datIn_ptr)).peek());
                                    if (in_msg_ptr == NULL) {
                                        // If the cast fails, this is the wrong inport (wrong message type).
                                        // Throw an exception, and the caller will decide to either try a
                                        // different inport or punt.
                                        throw RejectException();
                                    }
                                #ifndef NDEBUG
                                if (!(((((((*in_msg_ptr)).m_bitMask).count()) <= m_data_channel_size) && (((((*in_msg_ptr)).m_bitMask).count()) > (0))))) {
                                    panic("Runtime Error at CHI-mem.sm:370: %s.\n", "assert failure");

                                }
                                #endif
                                ;
                                {

                                    TransitionResult result = doTransition((dataToEvent(((*in_msg_ptr)).m_type)), (((*m_TBEs_ptr)).lookup(((*in_msg_ptr)).m_addr)), ((*in_msg_ptr)).m_addr);

                                    if (result == TransitionResult_Valid) {
                                        counter++;
                                        continue; // Check the first port again
                                    } else if (result == TransitionResult_ResourceStall) {

                                        scheduleEvent(Cycles(1));
                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                    } else if (result == TransitionResult_ProtocolStall) {

                                        scheduleEvent(Cycles(1));
                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                    }

                                }
                                ;
                                }
                            }
                        } catch (const RejectException & e) {
                            rejected[1]++;
                        }
            // MemoryInPort memQueue_in
            m_cur_in_port = 4;
            try {
                            if ((((*m_responseFromMemory_ptr)).isReady((clockEdge())))) {
                                (printResources());
                                {
                                    // Declare message
                                    [[maybe_unused]] const MemoryMsg* in_msg_ptr;
                                    in_msg_ptr = dynamic_cast<const MemoryMsg *>(((*m_responseFromMemory_ptr)).peek());
                                    if (in_msg_ptr == NULL) {
                                        // If the cast fails, this is the wrong inport (wrong message type).
                                        // Throw an exception, and the caller will decide to either try a
                                        // different inport or punt.
                                        throw RejectException();
                                    }
                                Addr addr
                                 = (makeLineAddress(((*in_msg_ptr)).m_addr));
                                    if ((((*in_msg_ptr)).m_Type == MemoryRequestType_MEMORY_READ)) {
                                        {

                                            TransitionResult result = doTransition(Memory_Event_MemoryData, (((*m_TBEs_ptr)).lookup(addr)), addr);

                                            if (result == TransitionResult_Valid) {
                                                counter++;
                                                continue; // Check the first port again
                                            } else if (result == TransitionResult_ResourceStall) {

                                                scheduleEvent(Cycles(1));
                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                            } else if (result == TransitionResult_ProtocolStall) {

                                                scheduleEvent(Cycles(1));
                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                            }

                                        }
                                        ;
                                    } else {
                                            if ((((*in_msg_ptr)).m_Type == MemoryRequestType_MEMORY_WB)) {
                                                {

                                                    TransitionResult result = doTransition(Memory_Event_MemoryAck, (((*m_TBEs_ptr)).lookup(addr)), addr);

                                                    if (result == TransitionResult_Valid) {
                                                        counter++;
                                                        continue; // Check the first port again
                                                    } else if (result == TransitionResult_ResourceStall) {

                                                        scheduleEvent(Cycles(1));
                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                    } else if (result == TransitionResult_ProtocolStall) {

                                                        scheduleEvent(Cycles(1));
                                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                                    }

                                                }
                                                ;
                                            } else {
                                                panic("Runtime Error at CHI-mem.sm:388: %s.\n", ("Invalid message"));
                                                ;
                                            }
                                        }
                                        }
                                    }
                        } catch (const RejectException & e) {
                            rejected[2]++;
                        }
            // MemoryInPort triggerInPort
            m_cur_in_port = 3;
            try {
                            if ((((*m_triggerQueue_ptr)).isReady((clockEdge())))) {
                                (printResources());
                                {
                                    // Declare message
                                    [[maybe_unused]] const Memory_TriggerMsg* in_msg_ptr;
                                    in_msg_ptr = dynamic_cast<const Memory_TriggerMsg *>(((*m_triggerQueue_ptr)).peek());
                                    if (in_msg_ptr == NULL) {
                                        // If the cast fails, this is the wrong inport (wrong message type).
                                        // Throw an exception, and the caller will decide to either try a
                                        // different inport or punt.
                                        throw RejectException();
                                    }
                                {

                                    TransitionResult result = doTransition(((*in_msg_ptr)).m_event, (((*m_TBEs_ptr)).lookup(((*in_msg_ptr)).m_addr)), ((*in_msg_ptr)).m_addr);

                                    if (result == TransitionResult_Valid) {
                                        counter++;
                                        continue; // Check the first port again
                                    } else if (result == TransitionResult_ResourceStall) {

                                        scheduleEvent(Cycles(1));
                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                    } else if (result == TransitionResult_ProtocolStall) {

                                        scheduleEvent(Cycles(1));
                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                    }

                                }
                                ;
                                }
                            }
                        } catch (const RejectException & e) {
                            rejected[3]++;
                        }
            // MemoryInPort snpInPort
            m_cur_in_port = 2;
            try {
                            if ((((*m_snpIn_ptr)).isReady((clockEdge())))) {
                                (printResources());
                                {
                                    // Declare message
                                    [[maybe_unused]] const CHIRequestMsg* in_msg_ptr;
                                    in_msg_ptr = dynamic_cast<const CHIRequestMsg *>(((*m_snpIn_ptr)).peek());
                                    if (in_msg_ptr == NULL) {
                                        // If the cast fails, this is the wrong inport (wrong message type).
                                        // Throw an exception, and the caller will decide to either try a
                                        // different inport or punt.
                                        throw RejectException();
                                    }
                                panic("Runtime Error at CHI-mem.sm:409: %s.\n", ("Unexpected message"));
                                ;
                                }
                            }
                        } catch (const RejectException & e) {
                            rejected[4]++;
                        }
            // MemoryInPort reqRdyInPort
            m_cur_in_port = 1;
            try {
                            if ((((*m_reqRdy_ptr)).isReady((clockEdge())))) {
                                (printResources());
                                {
                                    // Declare message
                                    [[maybe_unused]] const CHIRequestMsg* in_msg_ptr;
                                    in_msg_ptr = dynamic_cast<const CHIRequestMsg *>(((*m_reqRdy_ptr)).peek());
                                    if (in_msg_ptr == NULL) {
                                        // If the cast fails, this is the wrong inport (wrong message type).
                                        // Throw an exception, and the caller will decide to either try a
                                        // different inport or punt.
                                        throw RejectException();
                                    }
                                {

                                    TransitionResult result = doTransition((reqToEvent(((*in_msg_ptr)).m_type)), (((*m_TBEs_ptr)).lookup(((*in_msg_ptr)).m_addr)), ((*in_msg_ptr)).m_addr);

                                    if (result == TransitionResult_Valid) {
                                        counter++;
                                        continue; // Check the first port again
                                    } else if (result == TransitionResult_ResourceStall) {

                                        scheduleEvent(Cycles(1));
                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                    } else if (result == TransitionResult_ProtocolStall) {

                                        scheduleEvent(Cycles(1));
                                        // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                    }

                                }
                                ;
                                }
                            }
                        } catch (const RejectException & e) {
                            rejected[5]++;
                        }
            // MemoryInPort reqInPort
            m_cur_in_port = 0;
            try {
                            if ((((*m_reqIn_ptr)).isReady((clockEdge())))) {
                                (printResources());
                                {
                                    // Declare message
                                    [[maybe_unused]] const CHIRequestMsg* in_msg_ptr;
                                    in_msg_ptr = dynamic_cast<const CHIRequestMsg *>(((*m_reqIn_ptr)).peek());
                                    if (in_msg_ptr == NULL) {
                                        // If the cast fails, this is the wrong inport (wrong message type).
                                        // Throw an exception, and the caller will decide to either try a
                                        // different inport or punt.
                                        throw RejectException();
                                    }
                                    if (((*in_msg_ptr)).m_allowRetry) {
                                        {

                                            TransitionResult result = doTransition(Memory_Event_CheckAllocTBE, (((*m_TBEs_ptr)).lookup(((*in_msg_ptr)).m_addr)), ((*in_msg_ptr)).m_addr);

                                            if (result == TransitionResult_Valid) {
                                                counter++;
                                                continue; // Check the first port again
                                            } else if (result == TransitionResult_ResourceStall) {

                                                scheduleEvent(Cycles(1));
                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                            } else if (result == TransitionResult_ProtocolStall) {

                                                scheduleEvent(Cycles(1));
                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                            }

                                        }
                                        ;
                                    } else {
                                        {

                                            TransitionResult result = doTransition(Memory_Event_CheckAllocTBE_WithCredit, (((*m_TBEs_ptr)).lookup(((*in_msg_ptr)).m_addr)), ((*in_msg_ptr)).m_addr);

                                            if (result == TransitionResult_Valid) {
                                                counter++;
                                                continue; // Check the first port again
                                            } else if (result == TransitionResult_ResourceStall) {

                                                scheduleEvent(Cycles(1));
                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                            } else if (result == TransitionResult_ProtocolStall) {

                                                scheduleEvent(Cycles(1));
                                                // Cannot do anything with this transition, go check next doable transition (mostly likely of next port)

                                            }

                                        }
                                        ;
                                    }
                                    }
                                }
                        } catch (const RejectException & e) {
                            rejected[6]++;
                        }
        // If we got this far, we have nothing left todo or something went
        // wrong
        break;
    }
}

} // namespace ruby
} // namespace gem5
