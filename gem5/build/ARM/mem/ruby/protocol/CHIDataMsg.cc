/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /home/a599m019/gem5-fullsys-enviroment/gem5/src/mem/slicc/symbols/Type.py:501
 */

#include <iostream>
#include <memory>

#include "mem/ruby/protocol/CHIDataMsg.hh"
#include "mem/ruby/system/RubySystem.hh"

namespace gem5
{

namespace ruby
{

/** \brief Print the state of this object */
void
CHIDataMsg::print(std::ostream& out) const
{
    out << "[CHIDataMsg: ";
    out << "addr = " << printAddress(m_addr) << " ";
    out << "type = " << m_type << " ";
    out << "responder = " << m_responder << " ";
    out << "Destination = " << m_Destination << " ";
    out << "dataBlk = " << m_dataBlk << " ";
    out << "bitMask = " << m_bitMask << " ";
    out << "usesTxnId = " << m_usesTxnId << " ";
    out << "txnId = " << printAddress(m_txnId) << " ";
    out << "MessageSize = " << m_MessageSize << " ";
    out << "]";
}
bool
CHIDataMsg::functionalRead(Packet* param_pkt)
{
    if (((m_bitMask).isFull())) {
        return (testAndRead(m_addr, m_dataBlk, param_pkt));
    } else {
        return (false);
    }

}
bool
CHIDataMsg::functionalRead(Packet* param_pkt, WriteMask& param_mask)
{
bool is_dirty
 = (((((((((((((m_type == CHIDataType_CompData_UD_PD) || (m_type == CHIDataType_CompData_SD_PD)) || (m_type == CHIDataType_CBWrData_UD_PD)) || (m_type == CHIDataType_CBWrData_SD_PD)) || (m_type == CHIDataType_NCBWrData)) || (m_type == CHIDataType_SnpRespData_I_PD)) || (m_type == CHIDataType_SnpRespData_SC_PD)) || (m_type == CHIDataType_SnpRespData_SD)) || (m_type == CHIDataType_SnpRespData_UD)) || (m_type == CHIDataType_SnpRespData_SC_Fwded_SD_PD)) || (m_type == CHIDataType_SnpRespData_SC_PD_Fwded_SC)) || (m_type == CHIDataType_SnpRespData_I_Fwded_SD_PD)) || (m_type == CHIDataType_SnpRespData_I_PD_Fwded_SC));
#ifndef NDEBUG
if (!((((m_bitMask).isEmpty()) == (false)))) {
    panic("Runtime Error at CHI-msg.sm:234: %s.\n", "assert failure");

}
#endif
;
WriteMask test_mask
 = param_mask;
((test_mask).orMask(m_bitMask));
    if (((((param_mask).containsMask(test_mask)) == (false)) || is_dirty)) {
            if ((testAndReadMask(m_addr, m_dataBlk, m_bitMask, param_pkt))) {
                ((param_mask).orMask(m_bitMask));
                return (true);
            }
        }
        return (false);

}
bool
CHIDataMsg::functionalWrite(Packet* param_pkt)
{
return (testAndWrite(m_addr, m_dataBlk, param_pkt));

}
} // namespace ruby
} // namespace gem5
